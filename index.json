[{"uri":"https://diffsharp.github.io/reference/diffsharp.html","title":"DiffSharp","content":"Backend \nCompose \nDevice \nDtype \nDtypeAutoOpens \nNumerical \nOpAvgPoolExtensions \nOpBMMExtensions \nOpDetExtensions \nOpInvExtensions \nOpNormExtensions \nOpOuterExtensions \nOpSolveExtensions \nPrinter \nScalarExtensions \nShape \nShapeAutoOpens \nShorten \nSlicingExtensions \nBackend \nBackendFunctionality\u003C\u0027T\u003E \nBinaryOp \nBinaryOpElementwise \nDevice \nDeviceType \nDtype \nPrinter \nShape \nTensor \nTensorOp \nUnaryOp \nUnaryOpElementwise \ndsharp \nscalar \nImageExtensions \nImageUtil"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends.html","title":"DiffSharp.Backends","content":"BackendTensorStatics \nRawTensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data.html","title":"DiffSharp.Data","content":"DataLoader \nDataset \nDatasetSubset \nTensorDataset \nTextDataset \nDataUtil \nCIFAR10 \nCIFAR100 \nImageDataset \nMNIST"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions.html","title":"DiffSharp.Distributions","content":"Bernoulli \nCategorical \nDistribution\u003C\u0027T\u003E \nEmpirical\u003C\u0027T\u003E \nNormal \nTensorDistribution \nUniform"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model.html","title":"DiffSharp.Model","content":"RecurrentShape \nBatchNorm1d \nBatchNorm2d \nBatchNorm3d \nConv1d \nConv2d \nConv3d \nConvTranspose1d \nConvTranspose2d \nConvTranspose3d \nDropout \nDropout2d \nDropout3d \nLSTM \nLSTMCell \nLinear \nMode \nModel\u003C\u0027In, \u0027Out\u003E \nModel \nModelBase \nParameter \nParameterDict \nRNN \nRNNCell \nSequential \nVAE \nVAEBase \nVAEMLP \nWeight"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim.html","title":"DiffSharp.Optim","content":"Adam \nOptimizer \nSGD \noptim"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util.html","title":"DiffSharp.Util","content":"Array \nArray4D \nArray5D \nArray6D \nArrayND \nDataConverter \nDictionary \nExtensionAutoOpens \nOrderedDictionary \nRandom \nSeq \nUtilAutoOpens \nGlobalNestingLevel \nNestingLevel \nRandom \nhelpers \nPyplot"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendmodule.html","title":"Backend","content":"Backend \n\n Contains functions and settings related to backend specifications.\n \nBackend.Register \nRegister \nBackend.Default \nDefault"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendmodule.html#Register","title":"Backend.Register","content":"Backend.Register \nRegister \n\n Register a new backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendmodule.html#Default","title":"Backend.Default","content":"Backend.Default \nDefault \n\n Get or set the default backend used when creating tensors. Note, use \u003Cc\u003Edsharp.config(...)\u003C/c\u003E instead.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html","title":"Compose","content":"Compose \n \nCompose.tensor \ntensor \nCompose.multinomial \nmultinomial \nCompose.bernoulli \nbernoulli \nCompose.dropout \ndropout \nCompose.dropout2d \ndropout2d \nCompose.dropout3d \ndropout3d \nCompose.zerosLike \nzerosLike \nCompose.onesLike \nonesLike \nCompose.fullLike \nfullLike \nCompose.arangeLike \narangeLike \nCompose.arangeLike \narangeLike \nCompose.linspaceLike \nlinspaceLike \nCompose.linspaceLike \nlinspaceLike \nCompose.logspaceLike \nlogspaceLike \nCompose.logspaceLike \nlogspaceLike \nCompose.onehotLike \nonehotLike \nCompose.randLike \nrandLike \nCompose.randnLike \nrandnLike \nCompose.randintLike \nrandintLike \nCompose.like \nlike \nCompose.lt \nlt \nCompose.gt \ngt \nCompose.le \nle \nCompose.ge \nge \nCompose.eq \neq \nCompose.clamp \nclamp \nCompose.diagonal \ndiagonal \nCompose.expand \nexpand \nCompose.expandAs \nexpandAs \nCompose.stack \nstack \nCompose.unstack \nunstack \nCompose.cat \ncat \nCompose.split \nsplit \nCompose.add \nadd \nCompose.sub \nsub \nCompose.mul \nmul \nCompose.div \ndiv \nCompose.pow \npow \nCompose.matmul \nmatmul \nCompose.dot \ndot \nCompose.sum \nsum \nCompose.mean \nmean \nCompose.var \nvar \nCompose.std \nstd \nCompose.cov \ncov \nCompose.corrcoef \ncorrcoef \nCompose.gather \ngather \nCompose.scatter \nscatter \nCompose.transpose \ntranspose \nCompose.squeeze \nsqueeze \nCompose.unsqueeze \nunsqueeze \nCompose.unsqueezeAs \nunsqueezeAs \nCompose.flip \nflip \nCompose.dilate \ndilate \nCompose.undilate \nundilate \nCompose.repeat \nrepeat \nCompose.slice \nslice \nCompose.view \nview \nCompose.view \nview \nCompose.viewAs \nviewAs \nCompose.flatten \nflatten \nCompose.unflatten \nunflatten \nCompose.leakyRelu \nleakyRelu \nCompose.softmax \nsoftmax \nCompose.logsoftmax \nlogsoftmax \nCompose.logsumexp \nlogsumexp \nCompose.mseLoss \nmseLoss \nCompose.bceLoss \nbceLoss \nCompose.nllLoss \nnllLoss \nCompose.crossEntropyLoss \ncrossEntropyLoss \nCompose.maxpool1d \nmaxpool1d \nCompose.maxpool2d \nmaxpool2d \nCompose.maxpool3d \nmaxpool3d \nCompose.maxunpool1d \nmaxunpool1d \nCompose.maxunpool2d \nmaxunpool2d \nCompose.maxunpool3d \nmaxunpool3d \nCompose.conv1d \nconv1d \nCompose.conv2d \nconv2d \nCompose.conv3d \nconv3d \nCompose.convTranspose1d \nconvTranspose1d \nCompose.convTranspose2d \nconvTranspose2d \nCompose.convTranspose3d \nconvTranspose3d \nCompose.pad \npad \nCompose.toImage \ntoImage \nCompose.toImageString \ntoImageString \nCompose.cast \ncast \nCompose.move \nmove"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#tensor","title":"Compose.tensor","content":"Compose.tensor \ntensor \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#multinomial","title":"Compose.multinomial","content":"Compose.multinomial \nmultinomial \nTBDReturns a tensor where each row contains \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EnumSamples\u003C/span\u003E indices sampled from the multinomial probability distribution located in the corresponding row of tensor input. \n\n Indices are ordered from left to right according to when each was sampled (first samples are placed in first column).\n \n If input is a vector, out is a vector of size num_samples.\n \n If input is a matrix with m rows, the result is an matrix of shape (m \u00D7 numSamples)\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#bernoulli","title":"Compose.bernoulli","content":"Compose.bernoulli \nbernoulli \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#dropout","title":"Compose.dropout","content":"Compose.dropout \ndropout \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#dropout2d","title":"Compose.dropout2d","content":"Compose.dropout2d \ndropout2d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#dropout3d","title":"Compose.dropout3d","content":"Compose.dropout3d \ndropout3d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#zerosLike","title":"Compose.zerosLike","content":"Compose.zerosLike \nzerosLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#onesLike","title":"Compose.onesLike","content":"Compose.onesLike \nonesLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#fullLike","title":"Compose.fullLike","content":"Compose.fullLike \nfullLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#arangeLike","title":"Compose.arangeLike","content":"Compose.arangeLike \narangeLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#arangeLike","title":"Compose.arangeLike","content":"Compose.arangeLike \narangeLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#linspaceLike","title":"Compose.linspaceLike","content":"Compose.linspaceLike \nlinspaceLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#linspaceLike","title":"Compose.linspaceLike","content":"Compose.linspaceLike \nlinspaceLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#logspaceLike","title":"Compose.logspaceLike","content":"Compose.logspaceLike \nlogspaceLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#logspaceLike","title":"Compose.logspaceLike","content":"Compose.logspaceLike \nlogspaceLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#onehotLike","title":"Compose.onehotLike","content":"Compose.onehotLike \nonehotLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#randLike","title":"Compose.randLike","content":"Compose.randLike \nrandLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#randnLike","title":"Compose.randnLike","content":"Compose.randnLike \nrandnLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#randintLike","title":"Compose.randintLike","content":"Compose.randintLike \nrandintLike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#like","title":"Compose.like","content":"Compose.like \nlike \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#lt","title":"Compose.lt","content":"Compose.lt \nlt \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#gt","title":"Compose.gt","content":"Compose.gt \ngt \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#le","title":"Compose.le","content":"Compose.le \nle \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#ge","title":"Compose.ge","content":"Compose.ge \nge \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#eq","title":"Compose.eq","content":"Compose.eq \neq \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#clamp","title":"Compose.clamp","content":"Compose.clamp \nclamp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#diagonal","title":"Compose.diagonal","content":"Compose.diagonal \ndiagonal \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#expand","title":"Compose.expand","content":"Compose.expand \nexpand \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#expandAs","title":"Compose.expandAs","content":"Compose.expandAs \nexpandAs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#stack","title":"Compose.stack","content":"Compose.stack \nstack \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#unstack","title":"Compose.unstack","content":"Compose.unstack \nunstack \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#cat","title":"Compose.cat","content":"Compose.cat \ncat \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#split","title":"Compose.split","content":"Compose.split \nsplit \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#add","title":"Compose.add","content":"Compose.add \nadd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#sub","title":"Compose.sub","content":"Compose.sub \nsub \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#mul","title":"Compose.mul","content":"Compose.mul \nmul \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#div","title":"Compose.div","content":"Compose.div \ndiv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#pow","title":"Compose.pow","content":"Compose.pow \npow \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#matmul","title":"Compose.matmul","content":"Compose.matmul \nmatmul \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#dot","title":"Compose.dot","content":"Compose.dot \ndot \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#sum","title":"Compose.sum","content":"Compose.sum \nsum \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#mean","title":"Compose.mean","content":"Compose.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#var","title":"Compose.var","content":"Compose.var \nvar \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#std","title":"Compose.std","content":"Compose.std \nstd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#cov","title":"Compose.cov","content":"Compose.cov \ncov \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#corrcoef","title":"Compose.corrcoef","content":"Compose.corrcoef \ncorrcoef \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#gather","title":"Compose.gather","content":"Compose.gather \ngather \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#scatter","title":"Compose.scatter","content":"Compose.scatter \nscatter \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#transpose","title":"Compose.transpose","content":"Compose.transpose \ntranspose \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#squeeze","title":"Compose.squeeze","content":"Compose.squeeze \nsqueeze \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#unsqueeze","title":"Compose.unsqueeze","content":"Compose.unsqueeze \nunsqueeze \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#unsqueezeAs","title":"Compose.unsqueezeAs","content":"Compose.unsqueezeAs \nunsqueezeAs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#flip","title":"Compose.flip","content":"Compose.flip \nflip \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#dilate","title":"Compose.dilate","content":"Compose.dilate \ndilate \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#undilate","title":"Compose.undilate","content":"Compose.undilate \nundilate \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#repeat","title":"Compose.repeat","content":"Compose.repeat \nrepeat \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#slice","title":"Compose.slice","content":"Compose.slice \nslice \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#view","title":"Compose.view","content":"Compose.view \nview \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#view","title":"Compose.view","content":"Compose.view \nview \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#viewAs","title":"Compose.viewAs","content":"Compose.viewAs \nviewAs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#flatten","title":"Compose.flatten","content":"Compose.flatten \nflatten \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#unflatten","title":"Compose.unflatten","content":"Compose.unflatten \nunflatten \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#leakyRelu","title":"Compose.leakyRelu","content":"Compose.leakyRelu \nleakyRelu \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#softmax","title":"Compose.softmax","content":"Compose.softmax \nsoftmax \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#logsoftmax","title":"Compose.logsoftmax","content":"Compose.logsoftmax \nlogsoftmax \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#logsumexp","title":"Compose.logsumexp","content":"Compose.logsumexp \nlogsumexp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#mseLoss","title":"Compose.mseLoss","content":"Compose.mseLoss \nmseLoss \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#bceLoss","title":"Compose.bceLoss","content":"Compose.bceLoss \nbceLoss \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#nllLoss","title":"Compose.nllLoss","content":"Compose.nllLoss \nnllLoss \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#crossEntropyLoss","title":"Compose.crossEntropyLoss","content":"Compose.crossEntropyLoss \ncrossEntropyLoss \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxpool1d","title":"Compose.maxpool1d","content":"Compose.maxpool1d \nmaxpool1d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxpool2d","title":"Compose.maxpool2d","content":"Compose.maxpool2d \nmaxpool2d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxpool3d","title":"Compose.maxpool3d","content":"Compose.maxpool3d \nmaxpool3d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxunpool1d","title":"Compose.maxunpool1d","content":"Compose.maxunpool1d \nmaxunpool1d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxunpool2d","title":"Compose.maxunpool2d","content":"Compose.maxunpool2d \nmaxunpool2d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#maxunpool3d","title":"Compose.maxunpool3d","content":"Compose.maxunpool3d \nmaxunpool3d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#conv1d","title":"Compose.conv1d","content":"Compose.conv1d \nconv1d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#conv2d","title":"Compose.conv2d","content":"Compose.conv2d \nconv2d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#conv3d","title":"Compose.conv3d","content":"Compose.conv3d \nconv3d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#convTranspose1d","title":"Compose.convTranspose1d","content":"Compose.convTranspose1d \nconvTranspose1d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#convTranspose2d","title":"Compose.convTranspose2d","content":"Compose.convTranspose2d \nconvTranspose2d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#convTranspose3d","title":"Compose.convTranspose3d","content":"Compose.convTranspose3d \nconvTranspose3d \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#pad","title":"Compose.pad","content":"Compose.pad \npad \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#toImage","title":"Compose.toImage","content":"Compose.toImage \ntoImage \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#toImageString","title":"Compose.toImageString","content":"Compose.toImageString \ntoImageString \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#cast","title":"Compose.cast","content":"Compose.cast \ncast \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-compose.html#move","title":"Compose.move","content":"Compose.move \nmove \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicemodule.html","title":"Device","content":"Device \n\n Contains functions and settings related to device specifications.\n \nDevice.Default \nDefault"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicemodule.html#Default","title":"Device.Default","content":"Device.Default \nDefault \n\n Get or set the default device used when creating tensors. Note, use \u003Cc\u003Edsharp.config(...)\u003C/c\u003E instead.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html","title":"Dtype","content":"Dtype \n\n Contains functions and settings related to tensor element types\n \nDtype.widen \nwiden \nDtype.Default \nDefault \nDtype.divisionType \ndivisionType \nDtype.(|FloatingPoint|_|) \n(|FloatingPoint|_|) \nDtype.(|Integral|_|) \n(|Integral|_|) \nDtype.(|IntegralOrBool|_|) \n(|IntegralOrBool|_|)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#widen","title":"Dtype.widen","content":"Dtype.widen \nwiden \n\n Find the Dtype into which dtype1 and dtype2 can be widened\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#Default","title":"Dtype.Default","content":"Dtype.Default \nDefault \n\n Get or set the default element type used when creating tensors. Only floating point types are supported as the default type. Note, use \u003Cc\u003Edsharp.config(...)\u003C/c\u003E instead.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#divisionType","title":"Dtype.divisionType","content":"Dtype.divisionType \ndivisionType \n\n Find the Dtype which would result from dividing tensors with dtype1 and dtype2\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#(|FloatingPoint|_|)","title":"Dtype.(|FloatingPoint|_|)","content":"Dtype.(|FloatingPoint|_|) \n(|FloatingPoint|_|) \n\n Matches all floating point tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#(|Integral|_|)","title":"Dtype.(|Integral|_|)","content":"Dtype.(|Integral|_|) \n(|Integral|_|) \n\n Matches all integral tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypemodule.html#(|IntegralOrBool|_|)","title":"Dtype.(|IntegralOrBool|_|)","content":"Dtype.(|IntegralOrBool|_|) \n(|IntegralOrBool|_|) \n\n Matches all integral or boolean tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html","title":"DtypeAutoOpens","content":"DtypeAutoOpens \n\n Contains global functions and settings related to tensor element types, used when writing backends.\n \nDtypeAutoOpens.opNotSupported \nopNotSupported \nDtypeAutoOpens.opNotSupportedOnDeviceType \nopNotSupportedOnDeviceType \nDtypeAutoOpens.opNotSupported2 \nopNotSupported2 \nDtypeAutoOpens.IsFloatingPoint \nIsFloatingPoint \nDtypeAutoOpens.IsFloatingPoint \nIsFloatingPoint \nDtypeAutoOpens.IsIntegral \nIsIntegral \nDtypeAutoOpens.IsIntegral \nIsIntegral"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#opNotSupported","title":"DtypeAutoOpens.opNotSupported","content":"DtypeAutoOpens.opNotSupported \nopNotSupported \n\n Raise an exception indicating the given operation is not supported for the given tensor element type.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#opNotSupportedOnDeviceType","title":"DtypeAutoOpens.opNotSupportedOnDeviceType","content":"DtypeAutoOpens.opNotSupportedOnDeviceType \nopNotSupportedOnDeviceType \n\n Raise an exception indicating the given operation is not supported for the given tensor device type.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#opNotSupported2","title":"DtypeAutoOpens.opNotSupported2","content":"DtypeAutoOpens.opNotSupported2 \nopNotSupported2 \n\n Raise an exception indicating the given binary operation is not supported for the two given tensor element types.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#IsFloatingPoint","title":"DtypeAutoOpens.IsFloatingPoint","content":"DtypeAutoOpens.IsFloatingPoint \nIsFloatingPoint \n\n Matches all floating point tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#IsFloatingPoint","title":"DtypeAutoOpens.IsFloatingPoint","content":"DtypeAutoOpens.IsFloatingPoint \nIsFloatingPoint \n\n Matches all floating point tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#IsIntegral","title":"DtypeAutoOpens.IsIntegral","content":"DtypeAutoOpens.IsIntegral \nIsIntegral \n\n Matches all integral tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtypeautoopens.html#IsIntegral","title":"DtypeAutoOpens.IsIntegral","content":"DtypeAutoOpens.IsIntegral \nIsIntegral \n\n Matches all integral tensor element types\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html","title":"Numerical","content":"Numerical \n \nNumerical.Shorten \nShorten \nNumerical.numdiff \nnumdiff \nNumerical.numfdiff \nnumfdiff \nNumerical.numfdiff2 \nnumfdiff2 \nNumerical.numdiff2 \nnumdiff2 \nNumerical.numjacobianv \nnumjacobianv \nNumerical.numfjacobianv \nnumfjacobianv \nNumerical.numfjacobian \nnumfjacobian \nNumerical.numjacobian \nnumjacobian \nNumerical.numgradv \nnumgradv \nNumerical.numfgradv \nnumfgradv \nNumerical.numfgrad \nnumfgrad \nNumerical.numgrad \nnumgrad \nNumerical.numfgradhessian \nnumfgradhessian \nNumerical.numgradhessian \nnumgradhessian \nNumerical.numfhessian \nnumfhessian \nNumerical.numhessian \nnumhessian \nNumerical.numfhessianv \nnumfhessianv \nNumerical.numhessianv \nnumhessianv \nNumerical.numflaplacian \nnumflaplacian \nNumerical.numlaplacian \nnumlaplacian \nNumerical.numfcurl \nnumfcurl \nNumerical.numcurl \nnumcurl \nNumerical.numfdivergence \nnumfdivergence \nNumerical.numdivergence \nnumdivergence \nNumerical.numfcurldivergence \nnumfcurldivergence \nNumerical.numcurldivergence \nnumcurldivergence"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numdiff","title":"Numerical.numdiff","content":"Numerical.numdiff \nnumdiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfdiff","title":"Numerical.numfdiff","content":"Numerical.numfdiff \nnumfdiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfdiff2","title":"Numerical.numfdiff2","content":"Numerical.numfdiff2 \nnumfdiff2 \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numdiff2","title":"Numerical.numdiff2","content":"Numerical.numdiff2 \nnumdiff2 \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numjacobianv","title":"Numerical.numjacobianv","content":"Numerical.numjacobianv \nnumjacobianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfjacobianv","title":"Numerical.numfjacobianv","content":"Numerical.numfjacobianv \nnumfjacobianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfjacobian","title":"Numerical.numfjacobian","content":"Numerical.numfjacobian \nnumfjacobian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numjacobian","title":"Numerical.numjacobian","content":"Numerical.numjacobian \nnumjacobian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numgradv","title":"Numerical.numgradv","content":"Numerical.numgradv \nnumgradv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfgradv","title":"Numerical.numfgradv","content":"Numerical.numfgradv \nnumfgradv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfgrad","title":"Numerical.numfgrad","content":"Numerical.numfgrad \nnumfgrad \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numgrad","title":"Numerical.numgrad","content":"Numerical.numgrad \nnumgrad \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfgradhessian","title":"Numerical.numfgradhessian","content":"Numerical.numfgradhessian \nnumfgradhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numgradhessian","title":"Numerical.numgradhessian","content":"Numerical.numgradhessian \nnumgradhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfhessian","title":"Numerical.numfhessian","content":"Numerical.numfhessian \nnumfhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numhessian","title":"Numerical.numhessian","content":"Numerical.numhessian \nnumhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfhessianv","title":"Numerical.numfhessianv","content":"Numerical.numfhessianv \nnumfhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numhessianv","title":"Numerical.numhessianv","content":"Numerical.numhessianv \nnumhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numflaplacian","title":"Numerical.numflaplacian","content":"Numerical.numflaplacian \nnumflaplacian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numlaplacian","title":"Numerical.numlaplacian","content":"Numerical.numlaplacian \nnumlaplacian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfcurl","title":"Numerical.numfcurl","content":"Numerical.numfcurl \nnumfcurl \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numcurl","title":"Numerical.numcurl","content":"Numerical.numcurl \nnumcurl \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfdivergence","title":"Numerical.numfdivergence","content":"Numerical.numfdivergence \nnumfdivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numdivergence","title":"Numerical.numdivergence","content":"Numerical.numdivergence \nnumdivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numfcurldivergence","title":"Numerical.numfcurldivergence","content":"Numerical.numfcurldivergence \nnumfcurldivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical.html#numcurldivergence","title":"Numerical.numcurldivergence","content":"Numerical.numcurldivergence \nnumcurldivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html","title":"Shorten","content":"Shorten \n \nShorten.numgvp \nnumgvp \nShorten.numg \nnumg \nShorten.numhvp \nnumhvp \nShorten.numh \nnumh \nShorten.numgh \nnumgh \nShorten.numjvp \nnumjvp \nShorten.numj \nnumj \nShorten.numfgvp \nnumfgvp \nShorten.numfg \nnumfg \nShorten.numfhvp \nnumfhvp \nShorten.numfh \nnumfh \nShorten.numfgh \nnumfgh \nShorten.numfjvp \nnumfjvp \nShorten.numfj \nnumfj"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numgvp","title":"Shorten.numgvp","content":"Shorten.numgvp \nnumgvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numg","title":"Shorten.numg","content":"Shorten.numg \nnumg \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numhvp","title":"Shorten.numhvp","content":"Shorten.numhvp \nnumhvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numh","title":"Shorten.numh","content":"Shorten.numh \nnumh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numgh","title":"Shorten.numgh","content":"Shorten.numgh \nnumgh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numjvp","title":"Shorten.numjvp","content":"Shorten.numjvp \nnumjvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numj","title":"Shorten.numj","content":"Shorten.numj \nnumj \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfgvp","title":"Shorten.numfgvp","content":"Shorten.numfgvp \nnumfgvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfg","title":"Shorten.numfg","content":"Shorten.numfg \nnumfg \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfhvp","title":"Shorten.numfhvp","content":"Shorten.numfhvp \nnumfhvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfh","title":"Shorten.numfh","content":"Shorten.numfh \nnumfh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfgh","title":"Shorten.numfgh","content":"Shorten.numfgh \nnumfgh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfjvp","title":"Shorten.numfjvp","content":"Shorten.numfjvp \nnumfjvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-numerical-shorten.html#numfj","title":"Shorten.numfj","content":"Shorten.numfj \nnumfj \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html","title":"OpAvgPoolExtensions","content":"OpAvgPoolExtensions \n \nOpAvgPoolExtensions.avgpool1d \navgpool1d \nOpAvgPoolExtensions.avgpool2d \navgpool2d \nOpAvgPoolExtensions.avgpool3d \navgpool3d \nOpAvgPoolExtensions.avgpool1d \navgpool1d \nOpAvgPoolExtensions.avgpool2d \navgpool2d \nOpAvgPoolExtensions.avgpool3d \navgpool3d"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool1d","title":"OpAvgPoolExtensions.avgpool1d","content":"OpAvgPoolExtensions.avgpool1d \navgpool1d \nApplies a 1D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool2d","title":"OpAvgPoolExtensions.avgpool2d","content":"OpAvgPoolExtensions.avgpool2d \navgpool2d \nApplies a 1D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool3d","title":"OpAvgPoolExtensions.avgpool3d","content":"OpAvgPoolExtensions.avgpool3d \navgpool3d \nApplies a 3D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool1d","title":"OpAvgPoolExtensions.avgpool1d","content":"OpAvgPoolExtensions.avgpool1d \navgpool1d \nApplies a 1D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool2d","title":"OpAvgPoolExtensions.avgpool2d","content":"OpAvgPoolExtensions.avgpool2d \navgpool2d \nApplies a 2D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opavgpoolextensions.html#avgpool3d","title":"OpAvgPoolExtensions.avgpool3d","content":"OpAvgPoolExtensions.avgpool3d \navgpool3d \nApplies a 2D average pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opbmmextensions.html","title":"OpBMMExtensions","content":"OpBMMExtensions \n \nOpBMMExtensions.bmm \nbmm \nOpBMMExtensions.bmm \nbmm"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opbmmextensions.html#bmm","title":"OpBMMExtensions.bmm","content":"OpBMMExtensions.bmm \nbmm \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opbmmextensions.html#bmm","title":"OpBMMExtensions.bmm","content":"OpBMMExtensions.bmm \nbmm \nBatched matrix product of two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-opdetextensions.html","title":"OpDetExtensions","content":"OpDetExtensions \n \nOpDetExtensions.det \ndet \nOpDetExtensions.det \ndet"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opdetextensions.html#det","title":"OpDetExtensions.det","content":"OpDetExtensions.det \ndet \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opdetextensions.html#det","title":"OpDetExtensions.det","content":"OpDetExtensions.det \ndet \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opinvextensions.html","title":"OpInvExtensions","content":"OpInvExtensions \n \nOpInvExtensions.inv \ninv \nOpInvExtensions.inv \ninv"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opinvextensions.html#inv","title":"OpInvExtensions.inv","content":"OpInvExtensions.inv \ninv \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opinvextensions.html#inv","title":"OpInvExtensions.inv","content":"OpInvExtensions.inv \ninv \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opnormextensions.html","title":"OpNormExtensions","content":"OpNormExtensions \n \nOpNormExtensions.norm \nnorm \nOpNormExtensions.norm \nnorm"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opnormextensions.html#norm","title":"OpNormExtensions.norm","content":"OpNormExtensions.norm \nnorm \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opnormextensions.html#norm","title":"OpNormExtensions.norm","content":"OpNormExtensions.norm \nnorm \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opouterextensions.html","title":"OpOuterExtensions","content":"OpOuterExtensions \n \nOpOuterExtensions.outer \nouter \nOpOuterExtensions.outer \nouter"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opouterextensions.html#outer","title":"OpOuterExtensions.outer","content":"OpOuterExtensions.outer \nouter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opouterextensions.html#outer","title":"OpOuterExtensions.outer","content":"OpOuterExtensions.outer \nouter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opsolveextensions.html","title":"OpSolveExtensions","content":"OpSolveExtensions \n \nOpSolveExtensions.solve \nsolve \nOpSolveExtensions.solve \nsolve"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opsolveextensions.html#solve","title":"OpSolveExtensions.solve","content":"OpSolveExtensions.solve \nsolve \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-opsolveextensions.html#solve","title":"OpSolveExtensions.solve","content":"OpSolveExtensions.solve \nsolve \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printermodule.html","title":"Printer","content":"Printer \n\n Contains functions and settings related to print options.\n \nPrinter.Default \nDefault"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printermodule.html#Default","title":"Printer.Default","content":"Printer.Default \nDefault \n\n Get or set the default printer used when printing tensors. Note, use \u003Cc\u003Edsharp.config(...)\u003C/c\u003E instead.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html","title":"ScalarExtensions","content":"ScalarExtensions \n \nScalarExtensions.tryWidenScalar \ntryWidenScalar \nScalarExtensions.widenScalarForDivision \nwidenScalarForDivision \nScalarExtensions.toSingle \ntoSingle \nScalarExtensions.toDouble \ntoDouble \nScalarExtensions.toInt64 \ntoInt64 \nScalarExtensions.toInt32 \ntoInt32 \nScalarExtensions.toInt16 \ntoInt16 \nScalarExtensions.toSByte \ntoSByte \nScalarExtensions.toByte \ntoByte \nScalarExtensions.toBool \ntoBool \nScalarExtensions.sub \nsub \nScalarExtensions.log \nlog \nScalarExtensions.neg \nneg \nScalarExtensions.dtype \ndtype \nScalarExtensions.dtype \ndtype \nScalarExtensions.cast \ncast"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#tryWidenScalar","title":"ScalarExtensions.tryWidenScalar","content":"ScalarExtensions.tryWidenScalar \ntryWidenScalar \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#widenScalarForDivision","title":"ScalarExtensions.widenScalarForDivision","content":"ScalarExtensions.widenScalarForDivision \nwidenScalarForDivision \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toSingle","title":"ScalarExtensions.toSingle","content":"ScalarExtensions.toSingle \ntoSingle \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toDouble","title":"ScalarExtensions.toDouble","content":"ScalarExtensions.toDouble \ntoDouble \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toInt64","title":"ScalarExtensions.toInt64","content":"ScalarExtensions.toInt64 \ntoInt64 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toInt32","title":"ScalarExtensions.toInt32","content":"ScalarExtensions.toInt32 \ntoInt32 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toInt16","title":"ScalarExtensions.toInt16","content":"ScalarExtensions.toInt16 \ntoInt16 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toSByte","title":"ScalarExtensions.toSByte","content":"ScalarExtensions.toSByte \ntoSByte \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toByte","title":"ScalarExtensions.toByte","content":"ScalarExtensions.toByte \ntoByte \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#toBool","title":"ScalarExtensions.toBool","content":"ScalarExtensions.toBool \ntoBool \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#sub","title":"ScalarExtensions.sub","content":"ScalarExtensions.sub \nsub \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#log","title":"ScalarExtensions.log","content":"ScalarExtensions.log \nlog \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#neg","title":"ScalarExtensions.neg","content":"ScalarExtensions.neg \nneg \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#dtype","title":"ScalarExtensions.dtype","content":"ScalarExtensions.dtype \ndtype \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#dtype","title":"ScalarExtensions.dtype","content":"ScalarExtensions.dtype \ndtype \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalarextensions.html#cast","title":"ScalarExtensions.cast","content":"ScalarExtensions.cast \ncast \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html","title":"Shape","content":"Shape \n\n Contains functions and values related to tensor shapes.\n \nShape.nelement \nnelement \nShape.scalar \nscalar \nShape.contains \ncontains \nShape.checkCanStack \ncheckCanStack \nShape.checkCanGetSlice \ncheckCanGetSlice \nShape.checkCanIndex \ncheckCanIndex \nShape.dilated \ndilated \nShape.checkCanCat \ncheckCanCat \nShape.checkCanSplit \ncheckCanSplit \nShape.checkCanUnstack \ncheckCanUnstack \nShape.computeTranspose2d \ncomputeTranspose2d \nShape.checkDeviceTypes \ncheckDeviceTypes \nShape.checkDtypes \ncheckDtypes \nShape.checkCanConv1d \ncheckCanConv1d \nShape.checkCanConv2d \ncheckCanConv2d \nShape.checkCanConv3d \ncheckCanConv3d \nShape.checkCanConvTranspose1d \ncheckCanConvTranspose1d \nShape.checkCanConvTranspose2d \ncheckCanConvTranspose2d \nShape.checkCanConvTranspose3d \ncheckCanConvTranspose3d \nShape.checkCanMaxOrAvgpool1d \ncheckCanMaxOrAvgpool1d \nShape.checkCanMaxpool1d \ncheckCanMaxpool1d \nShape.checkCanAvgpool1d \ncheckCanAvgpool1d \nShape.checkCanMaxOrAvgpool2d \ncheckCanMaxOrAvgpool2d \nShape.checkCanMaxpool2d \ncheckCanMaxpool2d \nShape.checkCanAvgpool2d \ncheckCanAvgpool2d \nShape.checkCanMaxOrAvgpool3d \ncheckCanMaxOrAvgpool3d \nShape.checkCanMaxpool3d \ncheckCanMaxpool3d \nShape.checkCanAvgpool3d \ncheckCanAvgpool3d \nShape.checkCanMaxunpool1d \ncheckCanMaxunpool1d \nShape.checkCanMaxunpool2d \ncheckCanMaxunpool2d \nShape.checkCanMaxunpool3d \ncheckCanMaxunpool3d \nShape.canExpand \ncanExpand \nShape.checkCanExpand \ncheckCanExpand \nShape.checkCanTranspose \ncheckCanTranspose \nShape.checkCanTranspose2d \ncheckCanTranspose2d \nShape.checkCanInvert \ncheckCanInvert \nShape.checkCanDet \ncheckCanDet \nShape.checkCanSolve \ncheckCanSolve \nShape.checkCanPermute \ncheckCanPermute \nShape.checkCanFlip \ncheckCanFlip \nShape.checkCanRepeat \ncheckCanRepeat \nShape.checkCanDilate \ncheckCanDilate \nShape.checkCanGather \ncheckCanGather \nShape.checkCanScatter \ncheckCanScatter \nShape.checkCanView \ncheckCanView \nShape.checkCanFlatten \ncheckCanFlatten \nShape.checkCanAddSlice \ncheckCanAddSlice \nShape.checkCanMatmul \ncheckCanMatmul \nShape.checkCanBMM \ncheckCanBMM \nShape.checkCanDot \ncheckCanDot \nShape.checkCanPad \ncheckCanPad \nShape.checkCanDropout \ncheckCanDropout \nShape.checkCanDropout2d \ncheckCanDropout2d \nShape.checkCanDropout3d \ncheckCanDropout3d \nShape.squeeze \nsqueeze \nShape.checkCanMinMaxReduce \ncheckCanMinMaxReduce \nShape.checkCanUnsqueeze \ncheckCanUnsqueeze \nShape.unsqueezeAs \nunsqueezeAs \nShape.locationToBounds \nlocationToBounds \nShape.flatten \nflatten \nShape.broadcast2 \nbroadcast2 \nShape.broadcastShapes \nbroadcastShapes \nShape.undilatedShape \nundilatedShape \nShape.complete \ncomplete \nShape.completeDim \ncompleteDim \nShape.completeDimUnsqueeze \ncompleteDimUnsqueeze \nShape.completeExpand \ncompleteExpand \nShape.completeSliceBounds \ncompleteSliceBounds \nShape.create \ncreate \nShape.resolve2dKernelSizes \nresolve2dKernelSizes \nShape.resolve3dKernelSizes \nresolve3dKernelSizes \nShape.resolve2dConvSizes \nresolve2dConvSizes \nShape.resolve3dConvSizes \nresolve3dConvSizes \nShape.resolve2dConvOutputPadding \nresolve2dConvOutputPadding \nShape.resolve3dConvOutputPadding \nresolve3dConvOutputPadding \nShape.resolve2dMaxPoolSizes \nresolve2dMaxPoolSizes \nShape.resolve3dMaxPoolSizes \nresolve3dMaxPoolSizes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#nelement","title":"Shape.nelement","content":"Shape.nelement \nnelement \n\n Gets the total number of elements in the shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#scalar","title":"Shape.scalar","content":"Shape.scalar \nscalar \n\n The shape for a scalar value.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#contains","title":"Shape.contains","content":"Shape.contains \ncontains \n\n Indicates if one shape contains another.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanStack","title":"Shape.checkCanStack","content":"Shape.checkCanStack \ncheckCanStack \n\n Checks if the given shapes are appropriate for a stack operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanGetSlice","title":"Shape.checkCanGetSlice","content":"Shape.checkCanGetSlice \ncheckCanGetSlice \n\n Checks if the given shapes are appropriate for a GetSlice operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanIndex","title":"Shape.checkCanIndex","content":"Shape.checkCanIndex \ncheckCanIndex \n\n Checks if the given index is valid in the context of the given shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#dilated","title":"Shape.dilated","content":"Shape.dilated \ndilated \n\n Computes the shape that results from a dilation operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanCat","title":"Shape.checkCanCat","content":"Shape.checkCanCat \ncheckCanCat \n\n Checks if the given shapes are appropriate for a concatenation operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanSplit","title":"Shape.checkCanSplit","content":"Shape.checkCanSplit \ncheckCanSplit \n\n Checks if the given shapes are appropriate for a split operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanUnstack","title":"Shape.checkCanUnstack","content":"Shape.checkCanUnstack \ncheckCanUnstack \n\n Checks if the given shapes are appropriate for an unstack operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#computeTranspose2d","title":"Shape.computeTranspose2d","content":"Shape.computeTranspose2d \ncomputeTranspose2d \n\n Checks if the given shapes are appropriate for a transpose operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkDeviceTypes","title":"Shape.checkDeviceTypes","content":"Shape.checkDeviceTypes \ncheckDeviceTypes \n\n Checks if the two device types are equal.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkDtypes","title":"Shape.checkDtypes","content":"Shape.checkDtypes \ncheckDtypes \n\n Checks if the two tensor element types are equal.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConv1d","title":"Shape.checkCanConv1d","content":"Shape.checkCanConv1d \ncheckCanConv1d \n\n Checks if the given shapes are appropriate for a convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConv2d","title":"Shape.checkCanConv2d","content":"Shape.checkCanConv2d \ncheckCanConv2d \n\n Checks if the given shapes are appropriate for a convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConv3d","title":"Shape.checkCanConv3d","content":"Shape.checkCanConv3d \ncheckCanConv3d \n\n Checks if the given shapes are appropriate for a convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConvTranspose1d","title":"Shape.checkCanConvTranspose1d","content":"Shape.checkCanConvTranspose1d \ncheckCanConvTranspose1d \n\n Checks if the given shapes are appropriate for a transposed convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConvTranspose2d","title":"Shape.checkCanConvTranspose2d","content":"Shape.checkCanConvTranspose2d \ncheckCanConvTranspose2d \n\n Checks if the given shapes are appropriate for a transposed convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanConvTranspose3d","title":"Shape.checkCanConvTranspose3d","content":"Shape.checkCanConvTranspose3d \ncheckCanConvTranspose3d \n\n Checks if the given shapes are appropriate for a transposed convolution operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxOrAvgpool1d","title":"Shape.checkCanMaxOrAvgpool1d","content":"Shape.checkCanMaxOrAvgpool1d \ncheckCanMaxOrAvgpool1d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxpool1d","title":"Shape.checkCanMaxpool1d","content":"Shape.checkCanMaxpool1d \ncheckCanMaxpool1d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanAvgpool1d","title":"Shape.checkCanAvgpool1d","content":"Shape.checkCanAvgpool1d \ncheckCanAvgpool1d \n\n Checks if the given shapes are appropriate for an avgpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxOrAvgpool2d","title":"Shape.checkCanMaxOrAvgpool2d","content":"Shape.checkCanMaxOrAvgpool2d \ncheckCanMaxOrAvgpool2d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxpool2d","title":"Shape.checkCanMaxpool2d","content":"Shape.checkCanMaxpool2d \ncheckCanMaxpool2d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanAvgpool2d","title":"Shape.checkCanAvgpool2d","content":"Shape.checkCanAvgpool2d \ncheckCanAvgpool2d \n\n Checks if the given shapes are appropriate for an avgpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxOrAvgpool3d","title":"Shape.checkCanMaxOrAvgpool3d","content":"Shape.checkCanMaxOrAvgpool3d \ncheckCanMaxOrAvgpool3d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxpool3d","title":"Shape.checkCanMaxpool3d","content":"Shape.checkCanMaxpool3d \ncheckCanMaxpool3d \n\n Checks if the given shapes are appropriate for a maxpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanAvgpool3d","title":"Shape.checkCanAvgpool3d","content":"Shape.checkCanAvgpool3d \ncheckCanAvgpool3d \n\n Checks if the given shapes are appropriate for an avgpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxunpool1d","title":"Shape.checkCanMaxunpool1d","content":"Shape.checkCanMaxunpool1d \ncheckCanMaxunpool1d \n\n Checks if the given shapes are appropriate for a maxunpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxunpool2d","title":"Shape.checkCanMaxunpool2d","content":"Shape.checkCanMaxunpool2d \ncheckCanMaxunpool2d \n\n Checks if the given shapes are appropriate for a maxunpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMaxunpool3d","title":"Shape.checkCanMaxunpool3d","content":"Shape.checkCanMaxunpool3d \ncheckCanMaxunpool3d \n\n Checks if the given shapes are appropriate for a maxunpool operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#canExpand","title":"Shape.canExpand","content":"Shape.canExpand \ncanExpand \n\n Indicates if one shape can expand into another through the addition of broadcast dimensions.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanExpand","title":"Shape.checkCanExpand","content":"Shape.checkCanExpand \ncheckCanExpand \n\n Checks if one shape can expand into another through the addition of broadcast dimensions.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanTranspose","title":"Shape.checkCanTranspose","content":"Shape.checkCanTranspose \ncheckCanTranspose \n\n Checks if the given shape is appropriate for a transpose operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanTranspose2d","title":"Shape.checkCanTranspose2d","content":"Shape.checkCanTranspose2d \ncheckCanTranspose2d \n\n Checks if the given shape is appropriate for a transpose operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanInvert","title":"Shape.checkCanInvert","content":"Shape.checkCanInvert \ncheckCanInvert \n\n Checks if the given shape is appropriate for a transpose operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDet","title":"Shape.checkCanDet","content":"Shape.checkCanDet \ncheckCanDet \n\n Checks if the given shape is appropriate for a determinant operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanSolve","title":"Shape.checkCanSolve","content":"Shape.checkCanSolve \ncheckCanSolve \n\n Checks if the given shapes are appropriate for a linear solve operation, and returns the resulting shape of the solution\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanPermute","title":"Shape.checkCanPermute","content":"Shape.checkCanPermute \ncheckCanPermute \n\n Checks if the given shape is appropriate for a permute operation and returns information related to the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanFlip","title":"Shape.checkCanFlip","content":"Shape.checkCanFlip \ncheckCanFlip \n\n Checks if the given shape is appropriate for a flip operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanRepeat","title":"Shape.checkCanRepeat","content":"Shape.checkCanRepeat \ncheckCanRepeat \n\n Checks if the given shape is appropriate for a repeat operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDilate","title":"Shape.checkCanDilate","content":"Shape.checkCanDilate \ncheckCanDilate \n\n Checks if the given shape is appropriate for a dilate operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanGather","title":"Shape.checkCanGather","content":"Shape.checkCanGather \ncheckCanGather \n\n Checks if the given shape is appropriate for a gather operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanScatter","title":"Shape.checkCanScatter","content":"Shape.checkCanScatter \ncheckCanScatter \n\n Checks if the given shape is appropriate for a scatter operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanView","title":"Shape.checkCanView","content":"Shape.checkCanView \ncheckCanView \n\n Checks if the given shape is appropriate for a view operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanFlatten","title":"Shape.checkCanFlatten","content":"Shape.checkCanFlatten \ncheckCanFlatten \n\n Checks if the given shape is appropriate for a flatten operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanAddSlice","title":"Shape.checkCanAddSlice","content":"Shape.checkCanAddSlice \ncheckCanAddSlice \n\n Checks if the given shape is appropriate for an addSlice operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMatmul","title":"Shape.checkCanMatmul","content":"Shape.checkCanMatmul \ncheckCanMatmul \n\n Checks if the given shapes are appropriate for a matmul operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanBMM","title":"Shape.checkCanBMM","content":"Shape.checkCanBMM \ncheckCanBMM \n\n Checks if the given shapes are appropriate for a batched matrix multiplication operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDot","title":"Shape.checkCanDot","content":"Shape.checkCanDot \ncheckCanDot \n\n Checks if the given shape is appropriate for a dot product operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanPad","title":"Shape.checkCanPad","content":"Shape.checkCanPad \ncheckCanPad \n\n Checks if the given shape is appropriate for a pad operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDropout","title":"Shape.checkCanDropout","content":"Shape.checkCanDropout \ncheckCanDropout \n\n Checks if the given shape is appropriate for a dropout operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDropout2d","title":"Shape.checkCanDropout2d","content":"Shape.checkCanDropout2d \ncheckCanDropout2d \n\n Checks if the given shape is appropriate for a dropout2d operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanDropout3d","title":"Shape.checkCanDropout3d","content":"Shape.checkCanDropout3d \ncheckCanDropout3d \n\n Checks if the given shape is appropriate for a dropout3d operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#squeeze","title":"Shape.squeeze","content":"Shape.squeeze \nsqueeze \n\n Computes the shape that results from a squeeze operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanMinMaxReduce","title":"Shape.checkCanMinMaxReduce","content":"Shape.checkCanMinMaxReduce \ncheckCanMinMaxReduce \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#checkCanUnsqueeze","title":"Shape.checkCanUnsqueeze","content":"Shape.checkCanUnsqueeze \ncheckCanUnsqueeze \n\n Checks if the given shape is appropriate for an unsqueeze operation and returns the resulting shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#unsqueezeAs","title":"Shape.unsqueezeAs","content":"Shape.unsqueezeAs \nunsqueezeAs \n\n Computes the shape that results from an unsqueezeAs operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#locationToBounds","title":"Shape.locationToBounds","content":"Shape.locationToBounds \nlocationToBounds \n\n Converts the given location to a three-element bounds array in the context of the given shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#flatten","title":"Shape.flatten","content":"Shape.flatten \nflatten \n\n Computes the shape that results from a flatten operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#broadcast2","title":"Shape.broadcast2","content":"Shape.broadcast2 \nbroadcast2 \n\n Finds the shape into which \u0060shape1\u0060 and \u0060shape2\u0060 can be expanded.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#broadcastShapes","title":"Shape.broadcastShapes","content":"Shape.broadcastShapes \nbroadcastShapes \n\n Finds the shape into which all the shapes can be expanded.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#undilatedShape","title":"Shape.undilatedShape","content":"Shape.undilatedShape \nundilatedShape \n\n Computes the shape that results from an undilation operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#complete","title":"Shape.complete","content":"Shape.complete \ncomplete \n\n Completes the given shape with respect to a tensor with the given number of elements.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#completeDim","title":"Shape.completeDim","content":"Shape.completeDim \ncompleteDim \n\n Completes the given shape dimension with respect to a concrete dimension.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#completeDimUnsqueeze","title":"Shape.completeDimUnsqueeze","content":"Shape.completeDimUnsqueeze \ncompleteDimUnsqueeze \n\n Completes the given shape dimension with respect to a concrete dimension, for the unsqueeze operation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#completeExpand","title":"Shape.completeExpand","content":"Shape.completeExpand \ncompleteExpand \n\n Completes the new shape for an expand operation based on the current shape of the tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#completeSliceBounds","title":"Shape.completeSliceBounds","content":"Shape.completeSliceBounds \ncompleteSliceBounds \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#create","title":"Shape.create","content":"Shape.create \ncreate \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve2dKernelSizes","title":"Shape.resolve2dKernelSizes","content":"Shape.resolve2dKernelSizes \nresolve2dKernelSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve3dKernelSizes","title":"Shape.resolve3dKernelSizes","content":"Shape.resolve3dKernelSizes \nresolve3dKernelSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve2dConvSizes","title":"Shape.resolve2dConvSizes","content":"Shape.resolve2dConvSizes \nresolve2dConvSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve3dConvSizes","title":"Shape.resolve3dConvSizes","content":"Shape.resolve3dConvSizes \nresolve3dConvSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve2dConvOutputPadding","title":"Shape.resolve2dConvOutputPadding","content":"Shape.resolve2dConvOutputPadding \nresolve2dConvOutputPadding \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve3dConvOutputPadding","title":"Shape.resolve3dConvOutputPadding","content":"Shape.resolve3dConvOutputPadding \nresolve3dConvOutputPadding \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve2dMaxPoolSizes","title":"Shape.resolve2dMaxPoolSizes","content":"Shape.resolve2dMaxPoolSizes \nresolve2dMaxPoolSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapemodule.html#resolve3dMaxPoolSizes","title":"Shape.resolve3dMaxPoolSizes","content":"Shape.resolve3dMaxPoolSizes \nresolve3dMaxPoolSizes \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html","title":"ShapeAutoOpens","content":"ShapeAutoOpens \n \nShapeAutoOpens.shapeLength \nshapeLength \nShapeAutoOpens.boundsIsScalar \nboundsIsScalar \nShapeAutoOpens.boundsToLocation \nboundsToLocation \nShapeAutoOpens.boundsToShape \nboundsToShape \nShapeAutoOpens.shapeToFullBounds \nshapeToFullBounds \nShapeAutoOpens.mirrorCoordinates \nmirrorCoordinates \nShapeAutoOpens.dilatedCoordinates \ndilatedCoordinates \nShapeAutoOpens.indexToFlatIndex \nindexToFlatIndex \nShapeAutoOpens.flatIndexToIndex \nflatIndexToIndex"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#shapeLength","title":"ShapeAutoOpens.shapeLength","content":"ShapeAutoOpens.shapeLength \nshapeLength \n\n Gets the total number of elements in a shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#boundsIsScalar","title":"ShapeAutoOpens.boundsIsScalar","content":"ShapeAutoOpens.boundsIsScalar \nboundsIsScalar \n\n Checks if the full bounds is a scalar location\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#boundsToLocation","title":"ShapeAutoOpens.boundsToLocation","content":"ShapeAutoOpens.boundsToLocation \nboundsToLocation \n\n Converts the array of three-position bounds specifications to a location.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#boundsToShape","title":"ShapeAutoOpens.boundsToShape","content":"ShapeAutoOpens.boundsToShape \nboundsToShape \n\n Converts the array of three-position bounds specifications to a shape without squeezing out scalars\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#shapeToFullBounds","title":"ShapeAutoOpens.shapeToFullBounds","content":"ShapeAutoOpens.shapeToFullBounds \nshapeToFullBounds \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#mirrorCoordinates","title":"ShapeAutoOpens.mirrorCoordinates","content":"ShapeAutoOpens.mirrorCoordinates \nmirrorCoordinates \n\n Mirrors the coordinates in the given dimensions in the context of the given shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#dilatedCoordinates","title":"ShapeAutoOpens.dilatedCoordinates","content":"ShapeAutoOpens.dilatedCoordinates \ndilatedCoordinates \n\n Dilates the given coordinates.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#indexToFlatIndex","title":"ShapeAutoOpens.indexToFlatIndex","content":"ShapeAutoOpens.indexToFlatIndex \nindexToFlatIndex \n\n Converts the given index to a flat index in the context of the given shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shapeautoopens.html#flatIndexToIndex","title":"ShapeAutoOpens.flatIndexToIndex","content":"ShapeAutoOpens.flatIndexToIndex \nflatIndexToIndex \n\n Converts the given flat index to an index in the context of the given shape.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html","title":"Shorten","content":"Shorten \n \nShorten.gvp \ngvp \nShorten.g \ng \nShorten.hvp \nhvp \nShorten.h \nh \nShorten.gh \ngh \nShorten.ghvp \nghvp \nShorten.jvp \njvp \nShorten.vjp \nvjp \nShorten.j \nj \nShorten.fgvp \nfgvp \nShorten.fg \nfg \nShorten.fgh \nfgh \nShorten.fhvp \nfhvp \nShorten.fh \nfh \nShorten.fghvp \nfghvp \nShorten.fjvp \nfjvp \nShorten.fvjp \nfvjp \nShorten.fj \nfj"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#gvp","title":"Shorten.gvp","content":"Shorten.gvp \ngvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#g","title":"Shorten.g","content":"Shorten.g \ng \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#hvp","title":"Shorten.hvp","content":"Shorten.hvp \nhvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#h","title":"Shorten.h","content":"Shorten.h \nh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#gh","title":"Shorten.gh","content":"Shorten.gh \ngh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#ghvp","title":"Shorten.ghvp","content":"Shorten.ghvp \nghvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#jvp","title":"Shorten.jvp","content":"Shorten.jvp \njvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#vjp","title":"Shorten.vjp","content":"Shorten.vjp \nvjp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#j","title":"Shorten.j","content":"Shorten.j \nj \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fgvp","title":"Shorten.fgvp","content":"Shorten.fgvp \nfgvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fg","title":"Shorten.fg","content":"Shorten.fg \nfg \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fgh","title":"Shorten.fgh","content":"Shorten.fgh \nfgh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fhvp","title":"Shorten.fhvp","content":"Shorten.fhvp \nfhvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fh","title":"Shorten.fh","content":"Shorten.fh \nfh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fghvp","title":"Shorten.fghvp","content":"Shorten.fghvp \nfghvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fjvp","title":"Shorten.fjvp","content":"Shorten.fjvp \nfjvp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fvjp","title":"Shorten.fvjp","content":"Shorten.fvjp \nfvjp \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shorten.html#fj","title":"Shorten.fj","content":"Shorten.fj \nfj \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html","title":"SlicingExtensions","content":"SlicingExtensions \n \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice \nSlicingExtensions.GetSlice \nGetSlice"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-slicingextensions.html#GetSlice","title":"SlicingExtensions.GetSlice","content":"SlicingExtensions.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backend.html","title":"Backend","content":"Backend \n\n Represents a backend for DiffSharp tensors\n \nBackend.Name \nName \nBackend.Reference \nReference \nBackend.Torch \nTorch \nBackend.Other \nOther"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backend.html#Name","title":"Backend.Name","content":"Backend.Name \nName \n\n Get the name of the backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backend.html#Reference","title":"Backend.Reference","content":"Backend.Reference \nReference \n\n The reference backend \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backend.html#Torch","title":"Backend.Torch","content":"Backend.Torch \nTorch \n\n The LibTorch backend \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backend.html#Other","title":"Backend.Other","content":"Backend.Other \nOther \n\n Reserved for future use\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendfunctionality-1.html","title":"BackendFunctionality\u003C\u0027T\u003E","content":"BackendFunctionality\u003C\u0027T\u003E \n \nBackendFunctionality\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackendFunctionality\u003C\u0027T\u003E.Get \nGet \nBackendFunctionality\u003C\u0027T\u003E.Backends \nBackends"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendfunctionality-1.html#\u0060\u0060.ctor\u0060\u0060","title":"BackendFunctionality\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"BackendFunctionality\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendfunctionality-1.html#Get","title":"BackendFunctionality\u003C\u0027T\u003E.Get","content":"BackendFunctionality\u003C\u0027T\u003E.Get \nGet \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backendfunctionality-1.html#Backends","title":"BackendFunctionality\u003C\u0027T\u003E.Backends","content":"BackendFunctionality\u003C\u0027T\u003E.Backends \nBackends \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html","title":"BinaryOp","content":"BinaryOp \nDefines a new op implementing a binary function and its derivatives. Instances of this class are used with the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-tensor.html#Op\u0022\u003ETensor.Op\u003C/a\u003E method to define a new differentiable tensor function that supports forward, reverse, and nested differentiation. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EThis type represents the most generic definition of a new op representing a binary function, allowing the specification of: (1) the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html\u0022\u003ERawTensor\u003C/a\u003E operation, (2) the derivative propagation rule for the forward differentiation mode and (3) the derivative propagation rule for the reverse differentiation mode.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EIn general, if you are implementing a simple elementwise op, you should prefer using the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-binaryopelementwise.html\u0022\u003EBinaryOpElementwise\u003C/a\u003E type, which is much simpler to use.\u003C/p\u003E \nBinaryOp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBinaryOp.ad_dfda \nad_dfda \nBinaryOp.bd_dfdb \nbd_dfdb \nBinaryOp.fRaw \nfRaw \nBinaryOp.fd_dfda \nfd_dfda \nBinaryOp.fd_dfdb \nfd_dfdb \nBinaryOp.name \nname"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#\u0060\u0060.ctor\u0060\u0060","title":"BinaryOp.\u0060\u0060.ctor\u0060\u0060","content":"BinaryOp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#ad_dfda","title":"BinaryOp.ad_dfda","content":"BinaryOp.ad_dfda \nad_dfda \nDerivative propagation rule for forward differentiation mode for the partial derivative with respect to the first argument of the function. This represents the contribution of the function\u0027s first argument \\( a \\) to the derivative of \\( f(a, b) \\) with respect a value \\( x \\) earlier in the computation graph than the function\u0027s arguments. In other words, it computes the first term in the right-hand side of the equation \\( \\frac{\\partial f(a, b)}{\\partial x} = \\frac{\\partial a}{\\partial x} \\frac{\\partial f(a, b)}{\\partial a} \u002B \\frac{\\partial b}{\\partial x} \\frac{\\partial f(a, b)}{\\partial b} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#bd_dfdb","title":"BinaryOp.bd_dfdb","content":"BinaryOp.bd_dfdb \nbd_dfdb \nDerivative propagation rule for forward differentiation mode for the partial derivative with respect to the second argument of the function. This represents the contribution of the function\u0027s second argument \\( b \\) to the derivative of \\( f(a, b) \\) with respect a value \\( x \\) earlier in the computation graph than the function\u0027s arguments. In other words, it computes the second term in the right-hand side of the equation \\( \\frac{\\partial f(a, b)}{\\partial x} = \\frac{\\partial a}{\\partial x} \\frac{\\partial f(a, b)}{\\partial a} \u002B \\frac{\\partial b}{\\partial x} \\frac{\\partial f(a, b)}{\\partial b} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#fRaw","title":"BinaryOp.fRaw","content":"BinaryOp.fRaw \nfRaw \nRawTensor operation \\( f(a, b) \\) performing the op."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#fd_dfda","title":"BinaryOp.fd_dfda","content":"BinaryOp.fd_dfda \nfd_dfda \nDerivative propagation rule for reverse differentiation mode for the partial derivative with respect to the first argument of the function. This represents the derivative of a value \\( y \\), which comes later in the computation graph than the function\u0027s value \\( f(a, b) \\), with respect to the function\u0027s first argument \\( a \\). In other words, it computes \\( \\frac{\\partial y}{\\partial a} = \\frac{\\partial y}{\\partial f(a, b)} \\frac{\\partial f(a, b)}{\\partial a} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#fd_dfdb","title":"BinaryOp.fd_dfdb","content":"BinaryOp.fd_dfdb \nfd_dfdb \nDerivative propagation rule for reverse differentiation mode for the partial derivative with respect to the second argument of the function. This represents the derivative of a value \\( y \\), which comes later in the computation graph than the function\u0027s value \\( f(a, b) \\), with respect to the function\u0027s second argument \\( b \\). In other words, it computes \\( \\frac{\\partial y}{\\partial b} = \\frac{\\partial y}{\\partial f(a, b)} \\frac{\\partial f(a, b)}{\\partial b} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryop.html#name","title":"BinaryOp.name","content":"BinaryOp.name \nname \n\n Name of the op.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryopelementwise.html","title":"BinaryOpElementwise","content":"BinaryOpElementwise \nDefines a new op implementing an elementwise binary function and its derivatives. Instances of this class are used with the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-tensor.html#Op\u0022\u003ETensor.Op\u003C/a\u003E method to define a new differentiable tensor function that supports forward, reverse, and nested differentiation. \n\n This type is specialized to elementwise ops. It requires the user to specify only (1) the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html\u0022\u003ERawTensor\u003C/a\u003E operation and (2) the derivative of the function with respect to each argument. The corresponding derivative propagation rules for the forward and reverse differentiation modes are automatically generated.\n \u003Cp class=\u0027fsdocs-para\u0027\u003EIf you are implementing a complex op that is not elementwise, you can use the generic type \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-binaryop.html\u0022\u003EBinaryOp\u003C/a\u003E, which allows you to define the full derivative propagation rules.\u003C/p\u003E \nBinaryOpElementwise.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBinaryOpElementwise.dfda \ndfda \nBinaryOpElementwise.dfdb \ndfdb"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryopelementwise.html#\u0060\u0060.ctor\u0060\u0060","title":"BinaryOpElementwise.\u0060\u0060.ctor\u0060\u0060","content":"BinaryOpElementwise.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryopelementwise.html#dfda","title":"BinaryOpElementwise.dfda","content":"BinaryOpElementwise.dfda \ndfda \nDerivative of the function with respect to its first argument, \\( \\frac{\\partial f(a, b)}{\\partial a} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-binaryopelementwise.html#dfdb","title":"BinaryOpElementwise.dfdb","content":"BinaryOpElementwise.dfdb \ndfdb \nDerivative of the function with respect to its second argument, \\( \\frac{\\partial f(a, b)}{\\partial b} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html","title":"Device","content":"Device \n\n Represents a device specification.\n \nDevice.DeviceType \nDeviceType \nDevice.DeviceIndex \nDeviceIndex \nDevice.CPU \nCPU \nDevice.GPU \nGPU \nDevice.Device \nDevice"},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html#DeviceType","title":"Device.DeviceType","content":"Device.DeviceType \nDeviceType \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html#DeviceIndex","title":"Device.DeviceIndex","content":"Device.DeviceIndex \nDeviceIndex \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html#CPU","title":"Device.CPU","content":"Device.CPU \nCPU \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html#GPU","title":"Device.GPU","content":"Device.GPU \nGPU \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-device.html#Device","title":"Device.Device","content":"Device.Device \nDevice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html","title":"DeviceType","content":"DeviceType \n\n   Represents the type of a device. \n  \n\n   The numeric values used are as for LibTorch.\n  \nDeviceType.CPU \nCPU \nDeviceType.CUDA \nCUDA \nDeviceType.MKLDNN \nMKLDNN \nDeviceType.OPENGL \nOPENGL \nDeviceType.OPENCL \nOPENCL \nDeviceType.IDEEP \nIDEEP \nDeviceType.HIP \nHIP \nDeviceType.FPGA \nFPGA \nDeviceType.MSNPU \nMSNPU \nDeviceType.XLA \nXLA"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#CPU","title":"DeviceType.CPU","content":"DeviceType.CPU \nCPU \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#CUDA","title":"DeviceType.CUDA","content":"DeviceType.CUDA \nCUDA \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#MKLDNN","title":"DeviceType.MKLDNN","content":"DeviceType.MKLDNN \nMKLDNN \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#OPENGL","title":"DeviceType.OPENGL","content":"DeviceType.OPENGL \nOPENGL \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#OPENCL","title":"DeviceType.OPENCL","content":"DeviceType.OPENCL \nOPENCL \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#IDEEP","title":"DeviceType.IDEEP","content":"DeviceType.IDEEP \nIDEEP \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#HIP","title":"DeviceType.HIP","content":"DeviceType.HIP \nHIP \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#FPGA","title":"DeviceType.FPGA","content":"DeviceType.FPGA \nFPGA \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#MSNPU","title":"DeviceType.MSNPU","content":"DeviceType.MSNPU \nMSNPU \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-devicetype.html#XLA","title":"DeviceType.XLA","content":"DeviceType.XLA \nXLA \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html","title":"Dtype","content":"Dtype \n\n Represents a storage type for elements of a tensor\n \nDtype.SummationType \nSummationType \nDtype.BFloat16 \nBFloat16 \nDtype.Float16 \nFloat16 \nDtype.Float32 \nFloat32 \nDtype.Float64 \nFloat64 \nDtype.Int8 \nInt8 \nDtype.Byte \nByte \nDtype.Int16 \nInt16 \nDtype.Int32 \nInt32 \nDtype.Int64 \nInt64 \nDtype.Bool \nBool"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#SummationType","title":"Dtype.SummationType","content":"Dtype.SummationType \nSummationType \n\n Gets the natural result of the Sum(), SumToSize() and Sum(dim) operation on this dtype\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#BFloat16","title":"Dtype.BFloat16","content":"Dtype.BFloat16 \nBFloat16 \n\n Store elements as 16-bit floating point numbers (bfloat16 variation)\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Float16","title":"Dtype.Float16","content":"Dtype.Float16 \nFloat16 \n\n Store elements as 16-bit floating point numbers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Float32","title":"Dtype.Float32","content":"Dtype.Float32 \nFloat32 \n\n Store elements as 32-bit floating point numbers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Float64","title":"Dtype.Float64","content":"Dtype.Float64 \nFloat64 \n\n Store elements as 64-bit floating point numbers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Int8","title":"Dtype.Int8","content":"Dtype.Int8 \nInt8 \n\n Store elements as 8-bit integers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Byte","title":"Dtype.Byte","content":"Dtype.Byte \nByte \n\n Store elements as 8-bit unsigned integers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Int16","title":"Dtype.Int16","content":"Dtype.Int16 \nInt16 \n\n Store elements as 16-bit signed integers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Int32","title":"Dtype.Int32","content":"Dtype.Int32 \nInt32 \n\n Store elements as 32-bit signed integers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Int64","title":"Dtype.Int64","content":"Dtype.Int64 \nInt64 \n\n Store elements as 64-bit signed integers\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dtype.html#Bool","title":"Dtype.Bool","content":"Dtype.Bool \nBool \n\n Store elements as booleans\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html","title":"Printer","content":"Printer \n \nPrinter.precision \nprecision \nPrinter.threshold \nthreshold \nPrinter.edgeItems \nedgeItems \nPrinter.Default \nDefault \nPrinter.Short \nShort \nPrinter.Full \nFull \nPrinter.Custom \nCustom"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#precision","title":"Printer.precision","content":"Printer.precision \nprecision \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#threshold","title":"Printer.threshold","content":"Printer.threshold \nthreshold \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#edgeItems","title":"Printer.edgeItems","content":"Printer.edgeItems \nedgeItems \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#Default","title":"Printer.Default","content":"Printer.Default \nDefault \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#Short","title":"Printer.Short","content":"Printer.Short \nShort \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#Full","title":"Printer.Full","content":"Printer.Full \nFull \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-printer.html#Custom","title":"Printer.Custom","content":"Printer.Custom \nCustom \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-shape.html","title":"Shape","content":"Shape \n\n Represents the shape of a tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html","title":"Tensor","content":"Tensor \n\n   Represents a multi-dimensional data type containing elements of a single data type.\n  \nTensor.GetSlice \nGetSlice \nTensor.abs \nabs \nTensor.acos \nacos \nTensor.add \nadd \nTensor.add \nadd \nTensor.addSlice \naddSlice \nTensor.allclose \nallclose \nTensor.ancestors \nancestors \nTensor.arangeLike \narangeLike \nTensor.arangeLike \narangeLike \nTensor.argmax \nargmax \nTensor.argmax \nargmax \nTensor.argmin \nargmin \nTensor.argmin \nargmin \nTensor.asin \nasin \nTensor.atan \natan \nTensor.backward \nbackward \nTensor.bceLoss \nbceLoss \nTensor.bernoulli \nbernoulli \nTensor.bfloat16 \nbfloat16 \nTensor.bool \nbool \nTensor.byte \nbyte \nTensor.cast \ncast \nTensor.cast \ncast \nTensor.ceil \nceil \nTensor.clamp \nclamp \nTensor.clone \nclone \nTensor.conv1d \nconv1d \nTensor.conv2d \nconv2d \nTensor.conv3d \nconv3d \nTensor.convTranspose1d \nconvTranspose1d \nTensor.convTranspose2d \nconvTranspose2d \nTensor.convTranspose3d \nconvTranspose3d \nTensor.corrcoef \ncorrcoef \nTensor.cos \ncos \nTensor.cosh \ncosh \nTensor.cov \ncov \nTensor.cpu \ncpu \nTensor.crossEntropyLoss \ncrossEntropyLoss \nTensor.diagonal \ndiagonal \nTensor.dilate \ndilate \nTensor.div \ndiv \nTensor.div \ndiv \nTensor.dot \ndot \nTensor.double \ndouble \nTensor.dropout \ndropout \nTensor.dropout2d \ndropout2d \nTensor.dropout3d \ndropout3d \nTensor.eq \neq \nTensor.exp \nexp \nTensor.expand \nexpand \nTensor.expandAs \nexpandAs \nTensor.flatten \nflatten \nTensor.flip \nflip \nTensor.float \nfloat \nTensor.float16 \nfloat16 \nTensor.float32 \nfloat32 \nTensor.float64 \nfloat64 \nTensor.floor \nfloor \nTensor.forwardDiff \nforwardDiff \nTensor.fullLike \nfullLike \nTensor.gather \ngather \nTensor.ge \nge \nTensor.gpu \ngpu \nTensor.gt \ngt \nTensor.hasinf \nhasinf \nTensor.hasinfnan \nhasinfnan \nTensor.hasnan \nhasnan \nTensor.int \nint \nTensor.int16 \nint16 \nTensor.int32 \nint32 \nTensor.int64 \nint64 \nTensor.int8 \nint8 \nTensor.isSameDiffType \nisSameDiffType \nTensor.isinf \nisinf \nTensor.isnan \nisnan \nTensor.le \nle \nTensor.leakyRelu \nleakyRelu \nTensor.like \nlike \nTensor.linspaceLike \nlinspaceLike \nTensor.linspaceLike \nlinspaceLike \nTensor.log \nlog \nTensor.log10 \nlog10 \nTensor.logsoftmax \nlogsoftmax \nTensor.logspaceLike \nlogspaceLike \nTensor.logspaceLike \nlogspaceLike \nTensor.logsumexp \nlogsumexp \nTensor.lt \nlt \nTensor.matmul \nmatmul \nTensor.max \nmax \nTensor.max \nmax \nTensor.max \nmax \nTensor.maxpool1d \nmaxpool1d \nTensor.maxpool1di \nmaxpool1di \nTensor.maxpool2d \nmaxpool2d \nTensor.maxpool2di \nmaxpool2di \nTensor.maxpool3d \nmaxpool3d \nTensor.maxpool3di \nmaxpool3di \nTensor.maxunpool1d \nmaxunpool1d \nTensor.maxunpool2d \nmaxunpool2d \nTensor.maxunpool3d \nmaxunpool3d \nTensor.mean \nmean \nTensor.mean \nmean \nTensor.min \nmin \nTensor.min \nmin \nTensor.min \nmin \nTensor.move \nmove \nTensor.move \nmove \nTensor.move \nmove \nTensor.mseLoss \nmseLoss \nTensor.mul \nmul \nTensor.mul \nmul \nTensor.multinomial \nmultinomial \nTensor.ne \nne \nTensor.neg \nneg \nTensor.nllLoss \nnllLoss \nTensor.noDiff \nnoDiff \nTensor.normalize \nnormalize \nTensor.oneLike \noneLike \nTensor.onehotLike \nonehotLike \nTensor.onesLike \nonesLike \nTensor.pad \npad \nTensor.permute \npermute \nTensor.pow \npow \nTensor.pow \npow \nTensor.randLike \nrandLike \nTensor.randintLike \nrandintLike \nTensor.randnLike \nrandnLike \nTensor.relu \nrelu \nTensor.repeat \nrepeat \nTensor.reverse \nreverse \nTensor.reverseDiff \nreverseDiff \nTensor.reversePush \nreversePush \nTensor.reverseReset \nreverseReset \nTensor.round \nround \nTensor.safelog \nsafelog \nTensor.save \nsave \nTensor.scalarLike \nscalarLike \nTensor.scatter \nscatter \nTensor.sigmoid \nsigmoid \nTensor.sign \nsign \nTensor.sin \nsin \nTensor.sinh \nsinh \nTensor.softmax \nsoftmax \nTensor.softplus \nsoftplus \nTensor.split \nsplit \nTensor.sqrt \nsqrt \nTensor.squeeze \nsqueeze \nTensor.standardize \nstandardize \nTensor.std \nstd \nTensor.std \nstd \nTensor.sub \nsub \nTensor.sub \nsub \nTensor.sum \nsum \nTensor.sum \nsum \nTensor.sumToSize \nsumToSize \nTensor.summary \nsummary \nTensor.tan \ntan \nTensor.tanh \ntanh \nTensor.toArray \ntoArray \nTensor.toArray1D \ntoArray1D \nTensor.toArray2D \ntoArray2D \nTensor.toArray3D \ntoArray3D \nTensor.toArray4D \ntoArray4D \nTensor.toArray5D \ntoArray5D \nTensor.toArray6D \ntoArray6D \nTensor.toBool \ntoBool \nTensor.toByte \ntoByte \nTensor.toDouble \ntoDouble \nTensor.toImage \ntoImage \nTensor.toImageString \ntoImageString \nTensor.toInt16 \ntoInt16 \nTensor.toInt32 \ntoInt32 \nTensor.toInt64 \ntoInt64 \nTensor.toSByte \ntoSByte \nTensor.toScalar \ntoScalar \nTensor.toSingle \ntoSingle \nTensor.trace \ntrace \nTensor.transpose \ntranspose \nTensor.transpose \ntranspose \nTensor.undilate \nundilate \nTensor.unflatten \nunflatten \nTensor.unsqueeze \nunsqueeze \nTensor.unsqueezeAs \nunsqueezeAs \nTensor.unstack \nunstack \nTensor.var \nvar \nTensor.var \nvar \nTensor.view \nview \nTensor.view \nview \nTensor.viewAs \nviewAs \nTensor.zeroLike \nzeroLike \nTensor.zerosLike \nzerosLike \nTensor.derivative \nderivative \nTensor.parentOp \nparentOp \nTensor.shape \nshape \nTensor.primalRaw \nprimalRaw \nTensor.primal \nprimal \nTensor.elementSize \nelementSize \nTensor.isNoDiff \nisNoDiff \nTensor.backend \nbackend \nTensor.isForwardDiff \nisForwardDiff \nTensor.fanout \nfanout \nTensor.depth \ndepth \nTensor.primalDeep \nprimalDeep \nTensor.derivativeDeep \nderivativeDeep \nTensor.nestingTag \nnestingTag \nTensor.deviceType \ndeviceType \nTensor.memorySize \nmemorySize \nTensor.nelement \nnelement \nTensor.Item \nItem \nTensor.isReverseDiff \nisReverseDiff \nTensor.device \ndevice \nTensor.dim \ndim \nTensor.dtype \ndtype \nTensor.Abs \nAbs \nTensor.Acos \nAcos \nTensor.Asin \nAsin \nTensor.Atan \nAtan \nTensor.Ceiling \nCeiling \nTensor.Cos \nCos \nTensor.Cosh \nCosh \nTensor.Exp \nExp \nTensor.Floor \nFloor \nTensor.Log \nLog \nTensor.Log10 \nLog10 \nTensor.Op \nOp \nTensor.Op \nOp \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Pow \nPow \nTensor.Round \nRound \nTensor.Sin \nSin \nTensor.Sinh \nSinh \nTensor.Sqrt \nSqrt \nTensor.Tan \nTan \nTensor.Tanh \nTanh \nTensor.cat \ncat \nTensor.create \ncreate \nTensor.eye \neye \nTensor.load \nload \nTensor.ofRawTensor \nofRawTensor \nTensor.(\u002B) \n(\u002B) \nTensor.(\u002B) \n(\u002B) \nTensor.(\u002B) \n(\u002B) \nTensor.(/) \n(/) \nTensor.(/) \n(/) \nTensor.(/) \n(/) \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.op_Explicit \nop_Explicit \nTensor.(--\u003E) \n(--\u003E) \nTensor.(*) \n(*) \nTensor.(*) \n(*) \nTensor.(*) \n(*) \nTensor.(-) \n(-) \nTensor.(-) \n(-) \nTensor.(-) \n(-) \nTensor.(~-) \n(~-) \nTensor.stack \nstack \nTensor.Zero \nZero \nTensor.One \nOne"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#GetSlice","title":"Tensor.GetSlice","content":"Tensor.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#abs","title":"Tensor.abs","content":"Tensor.abs \nabs \nComputes the element-wise absolute value of the given input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#acos","title":"Tensor.acos","content":"Tensor.acos \nacos \nReturns a new tensor with the arccosine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#add","title":"Tensor.add","content":"Tensor.add \nadd \nEach element of the object tensor is added to the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#add","title":"Tensor.add","content":"Tensor.add \nadd \nEach element of the object tensor is added to each corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#addSlice","title":"Tensor.addSlice","content":"Tensor.addSlice \naddSlice \nAdd the given tensor as a slice at the given location."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#allclose","title":"Tensor.allclose","content":"Tensor.allclose \nallclose \n\n Indicates if two tensors have the same shape and all corresponding elements are equal within the\n given tolerances.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#ancestors","title":"Tensor.ancestors","content":"Tensor.ancestors \nancestors \n\n A debugging routine that returns the ancestors of a tensor involved in reverse-mode automatic differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#arangeLike","title":"Tensor.arangeLike","content":"Tensor.arangeLike \narangeLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.arange\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#arangeLike","title":"Tensor.arangeLike","content":"Tensor.arangeLike \narangeLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.arange\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#argmax","title":"Tensor.argmax","content":"Tensor.argmax \nargmax \nReturns the indexes of maximum values of the primal of the tensor, reducing the given dimension. \nThe resulting tensor does not participate in reverse or forward differentiation. It can be used as input to another operation such as \u003Ccode\u003Edsharp.gather\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#argmax","title":"Tensor.argmax","content":"Tensor.argmax \nargmax \n\n Gets the index of a maximum value in the tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#argmin","title":"Tensor.argmin","content":"Tensor.argmin \nargmin \nReturns the indexes of minimum values of the primal of the tensor, reducing the given dimension. \nThe resulting tensor does not participate in reverse or forward differentiation. It can be used as input to another operation such as \u003Ccode\u003Edsharp.gather\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#argmin","title":"Tensor.argmin","content":"Tensor.argmin \nargmin \n\n Gets the index of a minimum value in the tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#asin","title":"Tensor.asin","content":"Tensor.asin \nasin \nReturns a new tensor with the arcsine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#atan","title":"Tensor.atan","content":"Tensor.atan \natan \nReturns a new tensor with the arctangent of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#backward","title":"Tensor.backward","content":"Tensor.backward \nbackward \nSee \u003Ccode\u003Ereverse\u003C/code\u003E"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#bceLoss","title":"Tensor.bceLoss","content":"Tensor.bceLoss \nbceLoss \nCreates a criterion that measures the Binary Cross Entropy between the target and the output"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#bernoulli","title":"Tensor.bernoulli","content":"Tensor.bernoulli \nbernoulli \nDraws binary random numbers (0 or 1) from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#bfloat16","title":"Tensor.bfloat16","content":"Tensor.bfloat16 \nbfloat16 \n\n Returns a new tensor with each element converted to type bfloat16\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#bool","title":"Tensor.bool","content":"Tensor.bool \nbool \n\n Returns a new tensor with each element converted to type bool\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#byte","title":"Tensor.byte","content":"Tensor.byte \nbyte \n\n Returns a new tensor with each element converted to type float64\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cast","title":"Tensor.cast","content":"Tensor.cast \ncast \n\n Converts the tensor to a new tensor with the given system type\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cast","title":"Tensor.cast","content":"Tensor.cast \ncast \n\n Converts the tensor to a new tensor with the given \u003Csee cref=\u0022T:DiffSharp.Dtype\u0022/\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#ceil","title":"Tensor.ceil","content":"Tensor.ceil \nceil \nReturns a new tensor with the ceil of the elements of input, the smallest integer greater than or equal to each element. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#clamp","title":"Tensor.clamp","content":"Tensor.clamp \nclamp \nClamp all elements in input into the range [ low..high] and return a resulting tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#clone","title":"Tensor.clone","content":"Tensor.clone \nclone \nReturns a new tensor with underlying storage copied. \n\n   This method discards differentiability and returns a constant tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#conv1d","title":"Tensor.conv1d","content":"Tensor.conv1d \nconv1d \nApplies a 1D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#conv2d","title":"Tensor.conv2d","content":"Tensor.conv2d \nconv2d \nApplies a 2D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#conv3d","title":"Tensor.conv3d","content":"Tensor.conv3d \nconv3d \nApplies a 3D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#convTranspose1d","title":"Tensor.convTranspose1d","content":"Tensor.convTranspose1d \nconvTranspose1d \nApplies a 1D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#convTranspose2d","title":"Tensor.convTranspose2d","content":"Tensor.convTranspose2d \nconvTranspose2d \nApplies a 2D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#convTranspose3d","title":"Tensor.convTranspose3d","content":"Tensor.convTranspose3d \nconvTranspose3d \nApplies a 3D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#corrcoef","title":"Tensor.corrcoef","content":"Tensor.corrcoef \ncorrcoef \n\n Estimates the Pearson correlation coefficient matrix for the given tensor. The tensor\u0027s first\n dimension should index variables and the second dimension should\n index observations for each variable.\n  \n\n The correlation between variables \\(x\\) and \\(y\\) is\n  \\[cor(x,y)= \\frac{\\sum^{N}_{i = 1}(x_{i} - \\mu_x)(y_{i} - \\mu_y)}{\\sigma_x \\sigma_y (N ~-~1)}\\]\n where \\(\\mu_x\\) and \\(\\mu_y\\) are the sample means and \\(\\sigma_x\\) and \\(\\sigma_x\\) are \n the sample standard deviations.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cos","title":"Tensor.cos","content":"Tensor.cos \ncos \nReturns a new tensor with the cosine of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cosh","title":"Tensor.cosh","content":"Tensor.cosh \ncosh \nReturns a new tensor with the hyperbolic cosine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cov","title":"Tensor.cov","content":"Tensor.cov \ncov \n\n Estimates the covariance matrix of the given tensor. The tensor\u0027s first\n dimension should index variables and the second dimension should\n index observations for each variable.\n  \n\n If no weights are given, the covariance between variables \\(x\\) and \\(y\\) is\n  \\[cov(x,y)= \\frac{\\sum^{N}_{i = 1}(x_{i} - \\mu_x)(y_{i} - \\mu_y)}{N~-~\\text{correction}}\\]\n where \\(\\mu_x\\) and \\(\\mu_y\\) are the sample means.\n \n If there are fweights or aweights then the covariance is\n \\[cov(x,y)=\\frac{\\sum^{N}_{i = 1}w_i(x_{i} - \\mu_x^*)(y_{i} - \\mu_y^*)}{\\text{normalization factor}}\\]\n where \\(w\\) is either fweights or aweights if one weight type is provided.\n If both weight types are provided \\(w=\\text{fweights}\\times\\text{aweights}\\). \n \\(\\mu_x^* = \\frac{\\sum^{N}_{i = 1}w_ix_{i} }{\\sum^{N}_{i = 1}w_i}\\)\n is the weighted mean of variables.\n The normalization factor is \\(\\sum^{N}_{i=1} w_i\\) if only fweights are provided or if aweights are provided and \u003Ccode\u003Ecorrection=0\u003C/code\u003E. \n Otherwise if aweights \\(aw\\) are provided the normalization factor is\n  \\(\\sum^N_{i=1} w_i - \\text{correction}\\times\\frac{\\sum^N_{i=1} w_i aw_i}{\\sum^N_{i=1} w_i}\\) \n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cpu","title":"Tensor.cpu","content":"Tensor.cpu \ncpu \n\n Returns a new tensor with the same contents moved to the CPU\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#crossEntropyLoss","title":"Tensor.crossEntropyLoss","content":"Tensor.crossEntropyLoss \ncrossEntropyLoss \nThis criterion combines logsoftmax and nllLoss in a single function"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#diagonal","title":"Tensor.diagonal","content":"Tensor.diagonal \ndiagonal \n\n  Returns a tensor with the diagonal elements with respect to \u003Ccode\u003Edim1\u003C/code\u003E and \u003Ccode\u003Edim2\u003C/code\u003E.\n  The argument offset controls which diagonal to consider.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dilate","title":"Tensor.dilate","content":"Tensor.dilate \ndilate \nDilate the tensor in using the given dilations in each corresponding dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#div","title":"Tensor.div","content":"Tensor.div \ndiv \nDivides each element of the object tensor by the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#div","title":"Tensor.div","content":"Tensor.div \ndiv \nDivides each element of the object tensor by the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dot","title":"Tensor.dot","content":"Tensor.dot \ndot \nComputes the dot product (inner product) of two vector (1d-tensors). \nThis function does not broadcast and expects this tensor to be a vector (1d-tensor).   \n The tensors must have the same number of elements.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#double","title":"Tensor.double","content":"Tensor.double \ndouble \n\n Returns a new tensor with each element converted to type float64\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dropout","title":"Tensor.dropout","content":"Tensor.dropout \ndropout \nRandomly zeroes some of the elements of the input tensor with probability p using samples from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dropout2d","title":"Tensor.dropout2d","content":"Tensor.dropout2d \ndropout2d \nRandomly zero out entire channels (a channel is a 2D feature map, e.g., the jj -th channel of the ii -th sample in the batched input is a 2D tensor \\text{input}[i, j]input[i,j] ). Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dropout3d","title":"Tensor.dropout3d","content":"Tensor.dropout3d \ndropout3d \nRandomly zero out entire channels (a channel is a 3D feature map, e.g., the jj -th channel of the ii -th sample in the batched input is a 3D tensor \\text{input}[i, j]input[i,j] ). Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#eq","title":"Tensor.eq","content":"Tensor.eq \neq \nComputes element-wise \\(a = b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#exp","title":"Tensor.exp","content":"Tensor.exp \nexp \nApplies the exp function element-wise."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#expand","title":"Tensor.expand","content":"Tensor.expand \nexpand \nReturns a new view of the object tensor with singleton dimensions expanded to a larger size. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EPassing -1 as the size for a dimension means not changing the size of that dimension.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EThe tensor can be also expanded to a larger number of dimensions, and the new ones will be appended \n         at the front. For the new dimensions, the size cannot be set to -1.\n   \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n      Expanding a tensor does not allocate new memory, but only creates a new view on the existing tensor\n      where a dimension of size one is expanded to a larger size by setting the stride to 0. Any dimension\n      of size 1 can be expanded to an arbitrary value without allocating new memory.\n   \u003C/p\u003E"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#expandAs","title":"Tensor.expandAs","content":"Tensor.expandAs \nexpandAs \nExpand this tensor to the same size as the other."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#flatten","title":"Tensor.flatten","content":"Tensor.flatten \nflatten \nFlattens a contiguous range of dims in a tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#flip","title":"Tensor.flip","content":"Tensor.flip \nflip \nReverse the order of a n-D tensor along given axis in dims"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#float","title":"Tensor.float","content":"Tensor.float \nfloat \n\n Returns a new tensor with each element converted to type float64\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#float16","title":"Tensor.float16","content":"Tensor.float16 \nfloat16 \n\n Returns a new tensor with each element converted to type float16\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#float32","title":"Tensor.float32","content":"Tensor.float32 \nfloat32 \n\n Returns a new tensor with each element converted to type float32\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#float64","title":"Tensor.float64","content":"Tensor.float64 \nfloat64 \n\n Returns a new tensor with each element converted to type float64\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#floor","title":"Tensor.floor","content":"Tensor.floor \nfloor \nReturns a new tensor with the floor of the elements of input, the largest integer less than or equal to each element. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#forwardDiff","title":"Tensor.forwardDiff","content":"Tensor.forwardDiff \nforwardDiff \n\n  Returns the input tensor with added support for forward-mode automatic differentiation.\n  \n\n  Any tensors produced using this tensor will have attached derivatives for forward mode propagation.\n  The current global nesting level is used for nested differentiation.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#fullLike","title":"Tensor.fullLike","content":"Tensor.fullLike \nfullLike \n\n Returns a new tensor filled with the given scalar value for the given shape, element type and configuration, defaulting to the \n shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#gather","title":"Tensor.gather","content":"Tensor.gather \ngather \nGathers values along an axis specified by dim."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#ge","title":"Tensor.ge","content":"Tensor.ge \nge \nComputes element-wise \\(a \\geq b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#gpu","title":"Tensor.gpu","content":"Tensor.gpu \ngpu \n\n Returns a new tensor with the same contents moved to the primary GPU device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#gt","title":"Tensor.gt","content":"Tensor.gt \ngt \nComputes element-wise \\(a \u003E b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#hasinf","title":"Tensor.hasinf","content":"Tensor.hasinf \nhasinf \n\n Gets if any value in the tensor is \u002B/- INF.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#hasinfnan","title":"Tensor.hasinfnan","content":"Tensor.hasinfnan \nhasinfnan \n\n Gets if any value in the tensor is NaN or \u002B/- INF.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#hasnan","title":"Tensor.hasnan","content":"Tensor.hasnan \nhasnan \n\n Gets if any value in the tensor is NaN.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#int","title":"Tensor.int","content":"Tensor.int \nint \n\n Returns a new tensor with each element converted to type int32\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#int16","title":"Tensor.int16","content":"Tensor.int16 \nint16 \n\n Returns a new tensor with each element converted to type int16\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#int32","title":"Tensor.int32","content":"Tensor.int32 \nint32 \n\n Returns a new tensor with each element converted to type int32\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#int64","title":"Tensor.int64","content":"Tensor.int64 \nint64 \n\n Returns a new tensor with each element converted to type int64\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#int8","title":"Tensor.int8","content":"Tensor.int8 \nint8 \n\n Returns a new tensor with each element converted to type int8\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isSameDiffType","title":"Tensor.isSameDiffType","content":"Tensor.isSameDiffType \nisSameDiffType \n\n Indicates if two tensors have the same differentiation type\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isinf","title":"Tensor.isinf","content":"Tensor.isinf \nisinf \nReturns a new tensor with boolean elements representing if each element is \u002B/-INF or not."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isnan","title":"Tensor.isnan","content":"Tensor.isnan \nisnan \nReturns a new tensor with boolean elements representing if each element is NaN or not. Complex values are considered NaN when either their real and/or imaginary part is NaN."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#le","title":"Tensor.le","content":"Tensor.le \nle \nComputes element-wise \\(a \\leq b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#leakyRelu","title":"Tensor.leakyRelu","content":"Tensor.leakyRelu \nleakyRelu \nApplies the leaky rectified linear unit function element-wise \n\\[\\text{leakyRelu}(x) = \\max(0, x) \u002B \\text{negativeSlope} * \\min(0, x)\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#like","title":"Tensor.like","content":"Tensor.like \nlike \n\n  Returns a tensor from the .NET data in \u003Ccode\u003Evalue\u003C/code\u003E for the given element type and configuration, defaulting to\n  the element type and configuration of the input tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#linspaceLike","title":"Tensor.linspaceLike","content":"Tensor.linspaceLike \nlinspaceLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.linspace\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#linspaceLike","title":"Tensor.linspaceLike","content":"Tensor.linspaceLike \nlinspaceLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.linspace\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#log","title":"Tensor.log","content":"Tensor.log \nlog \nReturns a new tensor with the natural logarithm of the elements of input. \n \\[y_{i} = \\log_{e} (x_{i})\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#log10","title":"Tensor.log10","content":"Tensor.log10 \nlog10 \nReturns a new tensor with the logarithm to the base 10 of the elements of input. \n\\[y_{i} = \\log_{10} (x_{i})\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#logsoftmax","title":"Tensor.logsoftmax","content":"Tensor.logsoftmax \nlogsoftmax \nApplies a softmax followed by a logarithm."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#logspaceLike","title":"Tensor.logspaceLike","content":"Tensor.logspaceLike \nlogspaceLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.logspace\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#logspaceLike","title":"Tensor.logspaceLike","content":"Tensor.logspaceLike \nlogspaceLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.logspace\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#logsumexp","title":"Tensor.logsumexp","content":"Tensor.logsumexp \nlogsumexp \nApplies a logsumexp."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#lt","title":"Tensor.lt","content":"Tensor.lt \nlt \nComputes element-wise \\(a \u003C b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#matmul","title":"Tensor.matmul","content":"Tensor.matmul \nmatmul \nMatrix product of two tensors. \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n The behavior depends on the dimensionality of the tensors as follows:\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n If both tensors are 1-dimensional, the dot product (scalar) is returned.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n If both arguments are 2-dimensional, the matrix-matrix product is returned.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n If the first argument is 1-dimensional and the second argument is 2-dimensional, a 1 is prepended to its dimension for the purpose of the matrix multiply. After the matrix multiply, the prepended dimension is removed.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n  If the first argument is 2-dimensional and the second argument is 1-dimensional, the matrix-vector product is returned.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n  If both arguments are at least 1-dimensional and at least one argument is N-dimensional (where N \u003E 2), then a \n  batched matrix multiply is returned. If the first argument is 1-dimensional, a 1 is prepended to its dimension for the\n  purpose of the batched matrix multiply and removed after. If the second argument is 1-dimensional, a 1 is appended to\n  its dimension for the purpose of the batched matrix multiple and removed after. The non-matrix (i.e. batch) dimensions\n  are broadcasted (and thus must be broadcastable). For example, if input is a (j \\times 1 \\times n \\times m)(j\u00D71\u00D7n\u00D7m)\n  tensor and other is a (k \\times m \\times p)(k\u00D7m\u00D7p) tensor, out will be an (j \\times k \\times n \\times p)(j\u00D7k\u00D7n\u00D7p)\n  tensor.\n \u003C/p\u003E"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#max","title":"Tensor.max","content":"Tensor.max \nmax \n\n Returns the element-wise maximum of the elements in the two tensors.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#max","title":"Tensor.max","content":"Tensor.max \nmax \n\n Returns the maximum value of all elements in the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#max","title":"Tensor.max","content":"Tensor.max \nmax \n\n Returns the maximum value along the given dimension of all elements in the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool1d","title":"Tensor.maxpool1d","content":"Tensor.maxpool1d \nmaxpool1d \nApplies a 1D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool1di","title":"Tensor.maxpool1di","content":"Tensor.maxpool1di \nmaxpool1di \nApplies a 1D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool2d","title":"Tensor.maxpool2d","content":"Tensor.maxpool2d \nmaxpool2d \nApplies a 2D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool2di","title":"Tensor.maxpool2di","content":"Tensor.maxpool2di \nmaxpool2di \nApplies a 2D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool3d","title":"Tensor.maxpool3d","content":"Tensor.maxpool3d \nmaxpool3d \nApplies a 3D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxpool3di","title":"Tensor.maxpool3di","content":"Tensor.maxpool3di \nmaxpool3di \nApplies a 3D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxunpool1d","title":"Tensor.maxunpool1d","content":"Tensor.maxunpool1d \nmaxunpool1d \nComputes a partial inverse of maxpool1di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxunpool2d","title":"Tensor.maxunpool2d","content":"Tensor.maxunpool2d \nmaxunpool2d \nComputes a partial inverse of maxpool2di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#maxunpool3d","title":"Tensor.maxunpool3d","content":"Tensor.maxunpool3d \nmaxunpool3d \nComputes a partial inverse of maxpool3di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#mean","title":"Tensor.mean","content":"Tensor.mean \nmean \nReturns the mean value of each row of the input tensor in the given dimension dim. \nIf keepdim is True, the output tensor is of the same size as input except in the dimension dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 fewer dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#mean","title":"Tensor.mean","content":"Tensor.mean \nmean \nReturns the mean value of all elements in the input tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#min","title":"Tensor.min","content":"Tensor.min \nmin \n\n Returns the element-wise minimum of the elements in the two tensors.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#min","title":"Tensor.min","content":"Tensor.min \nmin \n\n Returns the minimum value of all elements in the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#min","title":"Tensor.min","content":"Tensor.min \nmin \n\n Returns the minimum value along the given dimension of all elements in the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#move","title":"Tensor.move","content":"Tensor.move \nmove \n\n Returns a new tensor with the same contents moved to the given configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#move","title":"Tensor.move","content":"Tensor.move \nmove \n\n Returns a new tensor with the same contents moved to the given device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#move","title":"Tensor.move","content":"Tensor.move \nmove \n\n Returns a new tensor with the same contents moved to the given backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#mseLoss","title":"Tensor.mseLoss","content":"Tensor.mseLoss \nmseLoss \nCreates a criterion that measures the mean squared error (squared L2 norm) between each element in the input and the target."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#mul","title":"Tensor.mul","content":"Tensor.mul \nmul \nMultiplies each element of the object tensor by the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#mul","title":"Tensor.mul","content":"Tensor.mul \nmul \nMultiplies each element of the object tensor by the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#multinomial","title":"Tensor.multinomial","content":"Tensor.multinomial \nmultinomial \nReturns a tensor where each row contains numSamples indices sampled from the multinomial probability distribution located in the corresponding row of tensor input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#ne","title":"Tensor.ne","content":"Tensor.ne \nne \nComputes element-wise \\(a \\neq b\\), returning a boolean tensor containing a \u003Ccode\u003Etrue\u003C/code\u003E at each location where the comparison is true"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#neg","title":"Tensor.neg","content":"Tensor.neg \nneg \nReturns a new tensor with the negative of the elements of the object tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#nllLoss","title":"Tensor.nllLoss","content":"Tensor.nllLoss \nnllLoss \nThe negative log likelihood loss."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#noDiff","title":"Tensor.noDiff","content":"Tensor.noDiff \nnoDiff \n\n  Returns the input tensor but with any support for automatic differentiation removed.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#normalize","title":"Tensor.normalize","content":"Tensor.normalize \nnormalize \n\n Returns the tensor after min-max scaling\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#oneLike","title":"Tensor.oneLike","content":"Tensor.oneLike \noneLike \n\n Returns a scalar \u00271\u0027 tensor for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#onehotLike","title":"Tensor.onehotLike","content":"Tensor.onehotLike \nonehotLike \n\n Returns a tensor in the manner of \u003Csee cref=\u0022M:DiffSharp.dsharp.onehot\u0022/\u003E for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#onesLike","title":"Tensor.onesLike","content":"Tensor.onesLike \nonesLike \n\n Returns a new tensor filled with \u00271\u0027 values for the given shape, element type and configuration, defaulting to the \n shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#pad","title":"Tensor.pad","content":"Tensor.pad \npad \nAdd zero padding to each side of a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#permute","title":"Tensor.permute","content":"Tensor.permute \npermute \nReturns the original tensor with its dimensions permuted."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#pow","title":"Tensor.pow","content":"Tensor.pow \npow \nRaises each element of the self tensor to the power of the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#pow","title":"Tensor.pow","content":"Tensor.pow \npow \nRaises each element of the self tensor to the power of each corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#randLike","title":"Tensor.randLike","content":"Tensor.randLike \nrandLike \n\n Returns a new tensor with random values drawn from the uniform distribution [0,1) for the\n given shape, element type and configuration, defaulting to the shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#randintLike","title":"Tensor.randintLike","content":"Tensor.randintLike \nrandintLike \n\n Returns a new tensor with random integer values drawn from the given range, for the\n given shape, element type and configuration, defaulting to the shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#randnLike","title":"Tensor.randnLike","content":"Tensor.randnLike \nrandnLike \n\n Returns a new tensor with random values drawn from the standard normal distribution, for the\n given shape, element type and configuration, defaulting to the shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#relu","title":"Tensor.relu","content":"Tensor.relu \nrelu \nApplies the rectified linear unit function element-wise."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#repeat","title":"Tensor.repeat","content":"Tensor.repeat \nrepeat \nRepeat elements of a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#reverse","title":"Tensor.reverse","content":"Tensor.reverse \nreverse \nPropagate the reverse-mode derivative backwards in the computation graph, starting from this tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#reverseDiff","title":"Tensor.reverseDiff","content":"Tensor.reverseDiff \nreverseDiff \n\n  Returns the input tensor with added support for reverse-mode automatic differentiation.\n  \n\n  Any tensors produced using this tensor will also support reverse-mode propagation. After the completion\n  of the corresponding \u003Ccode\u003Ereverse\u003C/code\u003E operation on the overall result tensor, the computed derivative\n  will be available. \n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#reversePush","title":"Tensor.reversePush","content":"Tensor.reversePush \nreversePush \nPush the given value as part of the reverse-mode computation at the given output tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#reverseReset","title":"Tensor.reverseReset","content":"Tensor.reverseReset \nreverseReset \nReset the reverse mode computation graph associated with the given output tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#round","title":"Tensor.round","content":"Tensor.round \nround \nReturns a new tensor with each of the elements of input rounded to the closest integer. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#safelog","title":"Tensor.safelog","content":"Tensor.safelog \nsafelog \nReturns the logarithm of the tensor after clamping the tensor so that all its elements are greater than epsilon. This is to avoid a -inf result for elements equal to zero."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#save","title":"Tensor.save","content":"Tensor.save \nsave \nSaves the tensor to the given file using a bespoke binary format. \n\n   The binary format records the elements, backend, element type and shape. It does not record the device.\n   The format used may change from version to version of DiffSharp.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#scalarLike","title":"Tensor.scalarLike","content":"Tensor.scalarLike \nscalarLike \n\n Returns a new scalar tensor for the given shape, element type and configuration, defaulting to the \n shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#scatter","title":"Tensor.scatter","content":"Tensor.scatter \nscatter \nScatter values along an axis specified by dim."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sigmoid","title":"Tensor.sigmoid","content":"Tensor.sigmoid \nsigmoid \nApplies the sigmoid element-wise function \n\\[\\text{sigmoid}(x) = \\frac{1}{1 \u002B \\exp(-x)}\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sign","title":"Tensor.sign","content":"Tensor.sign \nsign \nReturns a new tensor with the signs of the elements of input. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sin","title":"Tensor.sin","content":"Tensor.sin \nsin \nReturns a new tensor with the sine of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sinh","title":"Tensor.sinh","content":"Tensor.sinh \nsinh \nReturns a new tensor with the hyperbolic sine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#softmax","title":"Tensor.softmax","content":"Tensor.softmax \nsoftmax \nApplies a softmax function. \nSoftmax is defined as: \\text{softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#softplus","title":"Tensor.softplus","content":"Tensor.softplus \nsoftplus \nApplies the softplus function element-wise. \n\\[\\text{softplus}(x) = \\frac{1}{\\beta} * \\log(1 \u002B \\exp(\\beta * x))\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#split","title":"Tensor.split","content":"Tensor.split \nsplit \nSplits the tensor into chunks. Each chunk is a view of the original tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sqrt","title":"Tensor.sqrt","content":"Tensor.sqrt \nsqrt \nReturns a new tensor with the square-root of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#squeeze","title":"Tensor.squeeze","content":"Tensor.squeeze \nsqueeze \nReturns a tensor with all the dimensions of input of size 1 removed. \nIf the tensor has a batch dimension of size 1, then squeeze(input) will also remove the batch dimension, which can lead to unexpected errors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#standardize","title":"Tensor.standardize","content":"Tensor.standardize \nstandardize \n\n Returns the tensor after standardization (z-score normalization)\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#std","title":"Tensor.std","content":"Tensor.std \nstd \nReturns the standard deviation of all elements in the input tensor. \nIf unbiased is False, then the standard deviation will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#std","title":"Tensor.std","content":"Tensor.std \nstd \nReturns the standard deviation of each row of the input tensor in the given dimension dim. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EIf keepdim is True, the output tensor is of the same size as input except in the dimension dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 fewer dimension(s).\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EIf unbiased is False, then the standard deviation will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\u003C/p\u003E"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sub","title":"Tensor.sub","content":"Tensor.sub \nsub \nSubtracts the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E from the corresponding element of the object tensor. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sub","title":"Tensor.sub","content":"Tensor.sub \nsub \nSubtracts each element of the object tensor from the corresponding element of the self tensor. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sum","title":"Tensor.sum","content":"Tensor.sum \nsum \nReturns the sum of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. \nIf keepdim is \u003Ccode\u003Etrue\u003C/code\u003E, the output tensor is of the same size as input except in the dimension dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 fewer dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sum","title":"Tensor.sum","content":"Tensor.sum \nsum \nReturns the sum of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#sumToSize","title":"Tensor.sumToSize","content":"Tensor.sumToSize \nsumToSize \nSum this tensor to size \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EnewShape\u003C/span\u003E, which must be broadcastable to this tensor size."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#summary","title":"Tensor.summary","content":"Tensor.summary \nsummary \n\n Returns a string summarising the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#tan","title":"Tensor.tan","content":"Tensor.tan \ntan \nReturns a new tensor with the tangent of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#tanh","title":"Tensor.tanh","content":"Tensor.tanh \ntanh \nReturns a new tensor with the hyperbolic tangent of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray","title":"Tensor.toArray","content":"Tensor.toArray \ntoArray \n\n Returns the value of a (non-scalar) tensor as an array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray1D","title":"Tensor.toArray1D","content":"Tensor.toArray1D \ntoArray1D \n\n Returns the value of a 1D tensor as a 1D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray2D","title":"Tensor.toArray2D","content":"Tensor.toArray2D \ntoArray2D \n\n Returns the value of a 2D tensor as a 2D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray3D","title":"Tensor.toArray3D","content":"Tensor.toArray3D \ntoArray3D \n\n Returns the value of a 3D tensor as a 3D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray4D","title":"Tensor.toArray4D","content":"Tensor.toArray4D \ntoArray4D \n\n Returns the value of a 4D tensor as a 4D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray5D","title":"Tensor.toArray5D","content":"Tensor.toArray5D \ntoArray5D \n\n Returns the value of a 5D tensor as a 5D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toArray6D","title":"Tensor.toArray6D","content":"Tensor.toArray6D \ntoArray6D \n\n Returns the value of a 6D tensor as a 6D array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toBool","title":"Tensor.toBool","content":"Tensor.toBool \ntoBool \n\n Convert a scalar tensor to a boolean value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toByte","title":"Tensor.toByte","content":"Tensor.toByte \ntoByte \n\n Convert a scalar tensor to a byte value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toDouble","title":"Tensor.toDouble","content":"Tensor.toDouble \ntoDouble \n\n Convert a scalar tensor to a float64 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toImage","title":"Tensor.toImage","content":"Tensor.toImage \ntoImage \nConvert tensor to an image tensor with shape Channels x Height x Width"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toImageString","title":"Tensor.toImageString","content":"Tensor.toImageString \ntoImageString \nConvert tensor to a grayscale image tensor and return a string representation approximating grayscale values"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toInt16","title":"Tensor.toInt16","content":"Tensor.toInt16 \ntoInt16 \n\n Convert a scalar tensor to an int16 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toInt32","title":"Tensor.toInt32","content":"Tensor.toInt32 \ntoInt32 \n\n Convert a scalar tensor to an int32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toInt64","title":"Tensor.toInt64","content":"Tensor.toInt64 \ntoInt64 \n\n Convert a scalar tensor to an int64 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toSByte","title":"Tensor.toSByte","content":"Tensor.toSByte \ntoSByte \n\n Convert a scalar tensor to a signed byte value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toScalar","title":"Tensor.toScalar","content":"Tensor.toScalar \ntoScalar \n\n Returns the value of a scalar tensor as an object\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#toSingle","title":"Tensor.toSingle","content":"Tensor.toSingle \ntoSingle \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#trace","title":"Tensor.trace","content":"Tensor.trace \ntrace \nReturns the sum of the elements of the diagonal of the input 2-D matrix."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#transpose","title":"Tensor.transpose","content":"Tensor.transpose \ntranspose \nReturns a tensor that is a transposed version of input with dimensions 0 and 1 swapped."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#transpose","title":"Tensor.transpose","content":"Tensor.transpose \ntranspose \nReturns a tensor that is a transposed version of input. The given dimensions dim0 and dim1 are swapped."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#undilate","title":"Tensor.undilate","content":"Tensor.undilate \nundilate \nReverse the dilation of the tensor in using the given dilations in each corresponding dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#unflatten","title":"Tensor.unflatten","content":"Tensor.unflatten \nunflatten \nUnflattens a tensor dimension by expanding it to the given shape."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#unsqueeze","title":"Tensor.unsqueeze","content":"Tensor.unsqueeze \nunsqueeze \nReturns a new tensor with a dimension of size one inserted at the specified position"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#unsqueezeAs","title":"Tensor.unsqueezeAs","content":"Tensor.unsqueezeAs \nunsqueezeAs \nReturns a new tensor with dimensions of size one appended to the end until the number of dimensions is the same as the other tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#unstack","title":"Tensor.unstack","content":"Tensor.unstack \nunstack \nRemoves a tensor dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#var","title":"Tensor.var","content":"Tensor.var \nvar \nReturns the variance of each row of the input tensor in the given dimension dim. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EIf keepdim is True, the output tensor is of the same size as input except in the dimension dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 fewer dimension(s).\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EIf unbiased is False, then the variance will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\u003C/p\u003E"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#var","title":"Tensor.var","content":"Tensor.var \nvar \nReturns the variance of all elements in the input tensor. \nIf unbiased is False, then the variance will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#view","title":"Tensor.view","content":"Tensor.view \nview \nReturns a new tensor with the same data as the object tensor but of a different shape. \n\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#view","title":"Tensor.view","content":"Tensor.view \nview \nReturns a new tensor with the same data as the self tensor but of a different shape. \n\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#viewAs","title":"Tensor.viewAs","content":"Tensor.viewAs \nviewAs \nView this tensor as the same size as other. \nThe returned tensor shares the same data and must have the same number of elements, but may have a different size. For a tensor to be viewed, the new view size must be compatible with its original size.\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#zeroLike","title":"Tensor.zeroLike","content":"Tensor.zeroLike \nzeroLike \n\n Returns a scalar \u00270\u0027 tensor for the given element type and configuration, defaulting to\n the element type and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#zerosLike","title":"Tensor.zerosLike","content":"Tensor.zerosLike \nzerosLike \n\n Returns a new tensor filled with \u00270\u0027 values for the given shape, element type and configuration, defaulting to the \n shape and configuration of the input tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#derivative","title":"Tensor.derivative","content":"Tensor.derivative \nderivative \n\n Gets or sets the derivative of a tensor used in differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#parentOp","title":"Tensor.parentOp","content":"Tensor.parentOp \nparentOp \n\n Gets the parent operation of a tensor used in reverse-mode differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#shape","title":"Tensor.shape","content":"Tensor.shape \nshape \n\n Gets the shape of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#primalRaw","title":"Tensor.primalRaw","content":"Tensor.primalRaw \nprimalRaw \n\n Gets the raw value of the tensor ignoring all its derivatives\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#primal","title":"Tensor.primal","content":"Tensor.primal \nprimal \n\n Gets the value of the tensor ignoring its first derivative\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#elementSize","title":"Tensor.elementSize","content":"Tensor.elementSize \nelementSize \n\n Returns the size in bytes of an individual element in this tensor. Depending on dtype, backend configuration, this is not guaranteed to be correct and can behave differently in different runtime environments.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isNoDiff","title":"Tensor.isNoDiff","content":"Tensor.isNoDiff \nisNoDiff \n\n Indicates if a tensor is a constant, meaning that it is not taking part in forward or reverse-mode differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#backend","title":"Tensor.backend","content":"Tensor.backend \nbackend \n\n Gets the backend of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isForwardDiff","title":"Tensor.isForwardDiff","content":"Tensor.isForwardDiff \nisForwardDiff \n\n Indicates if a tensor is taking part in forward-mode differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#fanout","title":"Tensor.fanout","content":"Tensor.fanout \nfanout \n\n Gets the fanout of a tensor used in reverse-mode differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#depth","title":"Tensor.depth","content":"Tensor.depth \ndepth \n\n Gets the differentiation depth of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#primalDeep","title":"Tensor.primalDeep","content":"Tensor.primalDeep \nprimalDeep \n\n Gets the value of the tensor ignoring all its derivatives\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#derivativeDeep","title":"Tensor.derivativeDeep","content":"Tensor.derivativeDeep \nderivativeDeep \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#nestingTag","title":"Tensor.nestingTag","content":"Tensor.nestingTag \nnestingTag \n\n Gets the differentiation nesting tag of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#deviceType","title":"Tensor.deviceType","content":"Tensor.deviceType \ndeviceType \n\n Gets the device type of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#memorySize","title":"Tensor.memorySize","content":"Tensor.memorySize \nmemorySize \n\n Returns the size in bytes of the total memory used by this tensor. Depending on dtype, backend configuration, this is not guaranteed to be correct and can behave differently in different runtime environments.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#nelement","title":"Tensor.nelement","content":"Tensor.nelement \nnelement \n\n Gets the number of elements in the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Item","title":"Tensor.Item","content":"Tensor.Item \nItem \nGet the item at the given index as a scalar tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#isReverseDiff","title":"Tensor.isReverseDiff","content":"Tensor.isReverseDiff \nisReverseDiff \n\n Indicates if a tensor is taking part in reverse-mode differentiation\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#device","title":"Tensor.device","content":"Tensor.device \ndevice \n\n Gets the device of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dim","title":"Tensor.dim","content":"Tensor.dim \ndim \n\n Gets the number of dimensions of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#dtype","title":"Tensor.dtype","content":"Tensor.dtype \ndtype \n\n Gets the element type of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Abs","title":"Tensor.Abs","content":"Tensor.Abs \nAbs \nA method to enable the use of the F# function \u003Ccode\u003Eabs\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Acos","title":"Tensor.Acos","content":"Tensor.Acos \nAcos \nA method to enable the use of the F# function \u003Ccode\u003Eacos\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Asin","title":"Tensor.Asin","content":"Tensor.Asin \nAsin \nA method to enable the use of the F# function \u003Ccode\u003Easin\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Atan","title":"Tensor.Atan","content":"Tensor.Atan \nAtan \nA method to enable the use of the F# function \u003Ccode\u003Eatan\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Ceiling","title":"Tensor.Ceiling","content":"Tensor.Ceiling \nCeiling \nA method to enable the use of the F# function \u003Ccode\u003Eceil\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Cos","title":"Tensor.Cos","content":"Tensor.Cos \nCos \nA method to enable the use of the F# function \u003Ccode\u003Ecos\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Cosh","title":"Tensor.Cosh","content":"Tensor.Cosh \nCosh \nA method to enable the use of the F# function \u003Ccode\u003Ecosh\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Exp","title":"Tensor.Exp","content":"Tensor.Exp \nExp \nA method to enable the use of the F# function \u003Ccode\u003Eexp\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Floor","title":"Tensor.Floor","content":"Tensor.Floor \nFloor \nA method to enable the use of the F# function \u003Ccode\u003Efloor\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Log","title":"Tensor.Log","content":"Tensor.Log \nLog \nA method to enable the use of the F# function \u003Ccode\u003Elog\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Log10","title":"Tensor.Log10","content":"Tensor.Log10 \nLog10 \nA method to enable the use of the F# function \u003Ccode\u003Elog10\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Op","title":"Tensor.Op","content":"Tensor.Op \nOp \nAllows the definition of a new binary tensor op."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Op","title":"Tensor.Op","content":"Tensor.Op \nOp \nAllows the definition of a new unary tensor op."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Pow","title":"Tensor.Pow","content":"Tensor.Pow \nPow \nRaises each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E to the power of the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Round","title":"Tensor.Round","content":"Tensor.Round \nRound \nA method to enable the use of the F# function \u003Ccode\u003Eround\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Sin","title":"Tensor.Sin","content":"Tensor.Sin \nSin \nA method to enable the use of the F# function \u003Ccode\u003Esin\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Sinh","title":"Tensor.Sinh","content":"Tensor.Sinh \nSinh \nA method to enable the use of the F# function \u003Ccode\u003Esinh\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Sqrt","title":"Tensor.Sqrt","content":"Tensor.Sqrt \nSqrt \nA method to enable the use of the F# function \u003Ccode\u003Esqrt\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Tan","title":"Tensor.Tan","content":"Tensor.Tan \nTan \nA method to enable the use of the F# function \u003Ccode\u003Etan\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Tanh","title":"Tensor.Tanh","content":"Tensor.Tanh \nTanh \nA method to enable the use of the F# function \u003Ccode\u003Etanh\u003C/code\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#cat","title":"Tensor.cat","content":"Tensor.cat \ncat \nConcatenates the given sequence of seq tensors in the given dimension. \nAll tensors must either have the same shape (except in the concatenating dimension) or be empty."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#create","title":"Tensor.create","content":"Tensor.create \ncreate \n\n Creates a new tensor from the given data, using the given element type and configuration.\n  \nThe fastest creation technique is a one dimensional array matching the desired dtype. Then use \u0027view\u0027 to reshape."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#eye","title":"Tensor.eye","content":"Tensor.eye \neye \nReturns a 2-D tensor with ones on the diagonal and zeros elsewhere."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#load","title":"Tensor.load","content":"Tensor.load \nload \nLoads the tensor from the given file using the given element type and configuration. \n\n    The backend at the time of saving the tensor must be available when the tensor is reloaded.\n    The tensor is first loaded into that backend and then moved. As a result, intermediate tensors may be created\n    in the process of reloading.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#ofRawTensor","title":"Tensor.ofRawTensor","content":"Tensor.ofRawTensor \nofRawTensor \n\n Creates a new tensor from the raw tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(\u002B)","title":"Tensor.(\u002B)","content":"Tensor.(\u002B) \n(\u002B) \nThe scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E is added to each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(\u002B)","title":"Tensor.(\u002B)","content":"Tensor.(\u002B) \n(\u002B) \nEach element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E is added to the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(\u002B)","title":"Tensor.(\u002B)","content":"Tensor.(\u002B) \n(\u002B) \nEach element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E is added to each corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(/)","title":"Tensor.(/)","content":"Tensor.(/) \n(/) \nDivides the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by the each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(/)","title":"Tensor.(/)","content":"Tensor.(/) \n(/) \nDivides each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(/)","title":"Tensor.(/)","content":"Tensor.(/) \n(/) \nDivides each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#op_Explicit","title":"Tensor.op_Explicit","content":"Tensor.op_Explicit \nop_Explicit \n\n Convert a scalar tensor to a float32 value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(--\u003E)","title":"Tensor.(--\u003E)","content":"Tensor.(--\u003E) \n(--\u003E) \nPipeline the tensor into a function."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(*)","title":"Tensor.(*)","content":"Tensor.(*) \n(*) \nMultiplies the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(*)","title":"Tensor.(*)","content":"Tensor.(*) \n(*) \nMultiplies each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(*)","title":"Tensor.(*)","content":"Tensor.(*) \n(*) \nMultiplies each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E by the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(-)","title":"Tensor.(-)","content":"Tensor.(-) \n(-) \nSubtracts each element of the tensore \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E from the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(-)","title":"Tensor.(-)","content":"Tensor.(-) \n(-) \nSubtracts the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E from the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E. The resulting tensor is returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(-)","title":"Tensor.(-)","content":"Tensor.(-) \n(-) \nSubtracts each element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Eb\u003C/span\u003E from the corresponding element of the tensor \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E. The resulting tensor is returned. \nThe shapes of the two tensors must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#(~-)","title":"Tensor.(~-)","content":"Tensor.(~-) \n(~-) \nReturns a new tensor with the negative of the elements of \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Ea\u003C/span\u003E."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#stack","title":"Tensor.stack","content":"Tensor.stack \nstack \nConcatenates sequence of tensors along a new dimension. \nAll tensors need to be of the same shape."},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#Zero","title":"Tensor.Zero","content":"Tensor.Zero \nZero \n\n Get the scalar zero tensor for the current configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensor.html#One","title":"Tensor.One","content":"Tensor.One \nOne \n\n Get the scalar one tensor for the current configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html","title":"TensorOp","content":"TensorOp \n \nTensorOp.AddTT \nAddTT \nTensorOp.AddTTConst \nAddTTConst \nTensorOp.AddTT0 \nAddTT0 \nTensorOp.AddTT0Const \nAddTT0Const \nTensorOp.SubTT \nSubTT \nTensorOp.SubTTConst \nSubTTConst \nTensorOp.SubTConstT \nSubTConstT \nTensorOp.SubTT0 \nSubTT0 \nTensorOp.SubTT0Const \nSubTT0Const \nTensorOp.SubT0ConstT \nSubT0ConstT \nTensorOp.MulTT \nMulTT \nTensorOp.MulTTConst \nMulTTConst \nTensorOp.MulTT0 \nMulTT0 \nTensorOp.MulTT0Const \nMulTT0Const \nTensorOp.MulTConstT0 \nMulTConstT0 \nTensorOp.DivTT \nDivTT \nTensorOp.DivTTConst \nDivTTConst \nTensorOp.DivTConstT \nDivTConstT \nTensorOp.DivT0T \nDivT0T \nTensorOp.DivT0ConstT \nDivT0ConstT \nTensorOp.DivTT0 \nDivTT0 \nTensorOp.DivTT0Const \nDivTT0Const \nTensorOp.PowTT \nPowTT \nTensorOp.PowTTConst \nPowTTConst \nTensorOp.PowTConstT \nPowTConstT \nTensorOp.PowT0ConstT \nPowT0ConstT \nTensorOp.PowTT0Const \nPowTT0Const \nTensorOp.MatMulTT \nMatMulTT \nTensorOp.MatMulTTConst \nMatMulTTConst \nTensorOp.MatMulTConstT \nMatMulTConstT \nTensorOp.MaxPool1DT \nMaxPool1DT \nTensorOp.MaxUnpool1DT \nMaxUnpool1DT \nTensorOp.MaxPool2DT \nMaxPool2DT \nTensorOp.MaxUnpool2DT \nMaxUnpool2DT \nTensorOp.MaxPool3DT \nMaxPool3DT \nTensorOp.MaxUnpool3DT \nMaxUnpool3DT \nTensorOp.Conv1DTT \nConv1DTT \nTensorOp.Conv1DTTConst \nConv1DTTConst \nTensorOp.Conv1DTConstT \nConv1DTConstT \nTensorOp.Conv2DTT \nConv2DTT \nTensorOp.Conv2DTTConst \nConv2DTTConst \nTensorOp.Conv2DTConstT \nConv2DTConstT \nTensorOp.Conv3DTT \nConv3DTT \nTensorOp.Conv3DTTConst \nConv3DTTConst \nTensorOp.Conv3DTConstT \nConv3DTConstT \nTensorOp.AddTTSlice \nAddTTSlice \nTensorOp.AddTTConstSlice \nAddTTConstSlice \nTensorOp.AddTConstTSlice \nAddTConstTSlice \nTensorOp.NegT \nNegT \nTensorOp.SumT \nSumT \nTensorOp.SumTDim \nSumTDim \nTensorOp.ExpandT \nExpandT \nTensorOp.StackTs \nStackTs \nTensorOp.UnstackT \nUnstackT \nTensorOp.CatTs \nCatTs \nTensorOp.SplitT \nSplitT \nTensorOp.SliceT \nSliceT \nTensorOp.GatherT \nGatherT \nTensorOp.ScatterT \nScatterT \nTensorOp.PermuteT \nPermuteT \nTensorOp.TransposeT \nTransposeT \nTensorOp.TransposeT2 \nTransposeT2 \nTensorOp.SqueezeT \nSqueezeT \nTensorOp.UnsqueezeT \nUnsqueezeT \nTensorOp.FlipT \nFlipT \nTensorOp.DilateT \nDilateT \nTensorOp.UndilateT \nUndilateT \nTensorOp.ViewT \nViewT \nTensorOp.ClampT \nClampT \nTensorOp.SignT \nSignT \nTensorOp.FloorT \nFloorT \nTensorOp.CeilT \nCeilT \nTensorOp.RoundT \nRoundT \nTensorOp.AbsT \nAbsT \nTensorOp.ReluT \nReluT \nTensorOp.SoftplusT \nSoftplusT \nTensorOp.SigmoidT \nSigmoidT \nTensorOp.ExpT \nExpT \nTensorOp.LogT \nLogT \nTensorOp.Log10T \nLog10T \nTensorOp.SqrtT \nSqrtT \nTensorOp.SinT \nSinT \nTensorOp.CosT \nCosT \nTensorOp.TanT \nTanT \nTensorOp.SinhT \nSinhT \nTensorOp.CoshT \nCoshT \nTensorOp.TanhT \nTanhT \nTensorOp.AsinT \nAsinT \nTensorOp.AcosT \nAcosT \nTensorOp.AtanT \nAtanT \nTensorOp.NewT \nNewT \nTensorOp.OpUnaryT \nOpUnaryT \nTensorOp.OpBinaryTT \nOpBinaryTT \nTensorOp.OpBinaryTC \nOpBinaryTC \nTensorOp.OpBinaryCT \nOpBinaryCT"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTT","title":"TensorOp.AddTT","content":"TensorOp.AddTT \nAddTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTTConst","title":"TensorOp.AddTTConst","content":"TensorOp.AddTTConst \nAddTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTT0","title":"TensorOp.AddTT0","content":"TensorOp.AddTT0 \nAddTT0 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTT0Const","title":"TensorOp.AddTT0Const","content":"TensorOp.AddTT0Const \nAddTT0Const \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubTT","title":"TensorOp.SubTT","content":"TensorOp.SubTT \nSubTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubTTConst","title":"TensorOp.SubTTConst","content":"TensorOp.SubTTConst \nSubTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubTConstT","title":"TensorOp.SubTConstT","content":"TensorOp.SubTConstT \nSubTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubTT0","title":"TensorOp.SubTT0","content":"TensorOp.SubTT0 \nSubTT0 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubTT0Const","title":"TensorOp.SubTT0Const","content":"TensorOp.SubTT0Const \nSubTT0Const \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SubT0ConstT","title":"TensorOp.SubT0ConstT","content":"TensorOp.SubT0ConstT \nSubT0ConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MulTT","title":"TensorOp.MulTT","content":"TensorOp.MulTT \nMulTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MulTTConst","title":"TensorOp.MulTTConst","content":"TensorOp.MulTTConst \nMulTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MulTT0","title":"TensorOp.MulTT0","content":"TensorOp.MulTT0 \nMulTT0 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MulTT0Const","title":"TensorOp.MulTT0Const","content":"TensorOp.MulTT0Const \nMulTT0Const \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MulTConstT0","title":"TensorOp.MulTConstT0","content":"TensorOp.MulTConstT0 \nMulTConstT0 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivTT","title":"TensorOp.DivTT","content":"TensorOp.DivTT \nDivTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivTTConst","title":"TensorOp.DivTTConst","content":"TensorOp.DivTTConst \nDivTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivTConstT","title":"TensorOp.DivTConstT","content":"TensorOp.DivTConstT \nDivTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivT0T","title":"TensorOp.DivT0T","content":"TensorOp.DivT0T \nDivT0T \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivT0ConstT","title":"TensorOp.DivT0ConstT","content":"TensorOp.DivT0ConstT \nDivT0ConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivTT0","title":"TensorOp.DivTT0","content":"TensorOp.DivTT0 \nDivTT0 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DivTT0Const","title":"TensorOp.DivTT0Const","content":"TensorOp.DivTT0Const \nDivTT0Const \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PowTT","title":"TensorOp.PowTT","content":"TensorOp.PowTT \nPowTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PowTTConst","title":"TensorOp.PowTTConst","content":"TensorOp.PowTTConst \nPowTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PowTConstT","title":"TensorOp.PowTConstT","content":"TensorOp.PowTConstT \nPowTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PowT0ConstT","title":"TensorOp.PowT0ConstT","content":"TensorOp.PowT0ConstT \nPowT0ConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PowTT0Const","title":"TensorOp.PowTT0Const","content":"TensorOp.PowTT0Const \nPowTT0Const \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MatMulTT","title":"TensorOp.MatMulTT","content":"TensorOp.MatMulTT \nMatMulTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MatMulTTConst","title":"TensorOp.MatMulTTConst","content":"TensorOp.MatMulTTConst \nMatMulTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MatMulTConstT","title":"TensorOp.MatMulTConstT","content":"TensorOp.MatMulTConstT \nMatMulTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxPool1DT","title":"TensorOp.MaxPool1DT","content":"TensorOp.MaxPool1DT \nMaxPool1DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxUnpool1DT","title":"TensorOp.MaxUnpool1DT","content":"TensorOp.MaxUnpool1DT \nMaxUnpool1DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxPool2DT","title":"TensorOp.MaxPool2DT","content":"TensorOp.MaxPool2DT \nMaxPool2DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxUnpool2DT","title":"TensorOp.MaxUnpool2DT","content":"TensorOp.MaxUnpool2DT \nMaxUnpool2DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxPool3DT","title":"TensorOp.MaxPool3DT","content":"TensorOp.MaxPool3DT \nMaxPool3DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#MaxUnpool3DT","title":"TensorOp.MaxUnpool3DT","content":"TensorOp.MaxUnpool3DT \nMaxUnpool3DT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv1DTT","title":"TensorOp.Conv1DTT","content":"TensorOp.Conv1DTT \nConv1DTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv1DTTConst","title":"TensorOp.Conv1DTTConst","content":"TensorOp.Conv1DTTConst \nConv1DTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv1DTConstT","title":"TensorOp.Conv1DTConstT","content":"TensorOp.Conv1DTConstT \nConv1DTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv2DTT","title":"TensorOp.Conv2DTT","content":"TensorOp.Conv2DTT \nConv2DTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv2DTTConst","title":"TensorOp.Conv2DTTConst","content":"TensorOp.Conv2DTTConst \nConv2DTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv2DTConstT","title":"TensorOp.Conv2DTConstT","content":"TensorOp.Conv2DTConstT \nConv2DTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv3DTT","title":"TensorOp.Conv3DTT","content":"TensorOp.Conv3DTT \nConv3DTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv3DTTConst","title":"TensorOp.Conv3DTTConst","content":"TensorOp.Conv3DTTConst \nConv3DTTConst \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Conv3DTConstT","title":"TensorOp.Conv3DTConstT","content":"TensorOp.Conv3DTConstT \nConv3DTConstT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTTSlice","title":"TensorOp.AddTTSlice","content":"TensorOp.AddTTSlice \nAddTTSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTTConstSlice","title":"TensorOp.AddTTConstSlice","content":"TensorOp.AddTTConstSlice \nAddTTConstSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AddTConstTSlice","title":"TensorOp.AddTConstTSlice","content":"TensorOp.AddTConstTSlice \nAddTConstTSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#NegT","title":"TensorOp.NegT","content":"TensorOp.NegT \nNegT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SumT","title":"TensorOp.SumT","content":"TensorOp.SumT \nSumT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SumTDim","title":"TensorOp.SumTDim","content":"TensorOp.SumTDim \nSumTDim \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ExpandT","title":"TensorOp.ExpandT","content":"TensorOp.ExpandT \nExpandT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#StackTs","title":"TensorOp.StackTs","content":"TensorOp.StackTs \nStackTs \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#UnstackT","title":"TensorOp.UnstackT","content":"TensorOp.UnstackT \nUnstackT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#CatTs","title":"TensorOp.CatTs","content":"TensorOp.CatTs \nCatTs \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SplitT","title":"TensorOp.SplitT","content":"TensorOp.SplitT \nSplitT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SliceT","title":"TensorOp.SliceT","content":"TensorOp.SliceT \nSliceT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#GatherT","title":"TensorOp.GatherT","content":"TensorOp.GatherT \nGatherT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ScatterT","title":"TensorOp.ScatterT","content":"TensorOp.ScatterT \nScatterT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#PermuteT","title":"TensorOp.PermuteT","content":"TensorOp.PermuteT \nPermuteT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#TransposeT","title":"TensorOp.TransposeT","content":"TensorOp.TransposeT \nTransposeT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#TransposeT2","title":"TensorOp.TransposeT2","content":"TensorOp.TransposeT2 \nTransposeT2 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SqueezeT","title":"TensorOp.SqueezeT","content":"TensorOp.SqueezeT \nSqueezeT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#UnsqueezeT","title":"TensorOp.UnsqueezeT","content":"TensorOp.UnsqueezeT \nUnsqueezeT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#FlipT","title":"TensorOp.FlipT","content":"TensorOp.FlipT \nFlipT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#DilateT","title":"TensorOp.DilateT","content":"TensorOp.DilateT \nDilateT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#UndilateT","title":"TensorOp.UndilateT","content":"TensorOp.UndilateT \nUndilateT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ViewT","title":"TensorOp.ViewT","content":"TensorOp.ViewT \nViewT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ClampT","title":"TensorOp.ClampT","content":"TensorOp.ClampT \nClampT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SignT","title":"TensorOp.SignT","content":"TensorOp.SignT \nSignT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#FloorT","title":"TensorOp.FloorT","content":"TensorOp.FloorT \nFloorT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#CeilT","title":"TensorOp.CeilT","content":"TensorOp.CeilT \nCeilT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#RoundT","title":"TensorOp.RoundT","content":"TensorOp.RoundT \nRoundT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AbsT","title":"TensorOp.AbsT","content":"TensorOp.AbsT \nAbsT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ReluT","title":"TensorOp.ReluT","content":"TensorOp.ReluT \nReluT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SoftplusT","title":"TensorOp.SoftplusT","content":"TensorOp.SoftplusT \nSoftplusT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SigmoidT","title":"TensorOp.SigmoidT","content":"TensorOp.SigmoidT \nSigmoidT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#ExpT","title":"TensorOp.ExpT","content":"TensorOp.ExpT \nExpT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#LogT","title":"TensorOp.LogT","content":"TensorOp.LogT \nLogT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#Log10T","title":"TensorOp.Log10T","content":"TensorOp.Log10T \nLog10T \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SqrtT","title":"TensorOp.SqrtT","content":"TensorOp.SqrtT \nSqrtT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SinT","title":"TensorOp.SinT","content":"TensorOp.SinT \nSinT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#CosT","title":"TensorOp.CosT","content":"TensorOp.CosT \nCosT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#TanT","title":"TensorOp.TanT","content":"TensorOp.TanT \nTanT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#SinhT","title":"TensorOp.SinhT","content":"TensorOp.SinhT \nSinhT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#CoshT","title":"TensorOp.CoshT","content":"TensorOp.CoshT \nCoshT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#TanhT","title":"TensorOp.TanhT","content":"TensorOp.TanhT \nTanhT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AsinT","title":"TensorOp.AsinT","content":"TensorOp.AsinT \nAsinT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AcosT","title":"TensorOp.AcosT","content":"TensorOp.AcosT \nAcosT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#AtanT","title":"TensorOp.AtanT","content":"TensorOp.AtanT \nAtanT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#NewT","title":"TensorOp.NewT","content":"TensorOp.NewT \nNewT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#OpUnaryT","title":"TensorOp.OpUnaryT","content":"TensorOp.OpUnaryT \nOpUnaryT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#OpBinaryTT","title":"TensorOp.OpBinaryTT","content":"TensorOp.OpBinaryTT \nOpBinaryTT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#OpBinaryTC","title":"TensorOp.OpBinaryTC","content":"TensorOp.OpBinaryTC \nOpBinaryTC \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-tensorop.html#OpBinaryCT","title":"TensorOp.OpBinaryCT","content":"TensorOp.OpBinaryCT \nOpBinaryCT \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html","title":"UnaryOp","content":"UnaryOp \nDefines a new op implementing a unary function and its derivatives. Instances of this class are used with the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-tensor.html#Op\u0022\u003ETensor.Op\u003C/a\u003E method to define a new differentiable tensor function that supports forward, reverse, and nested differentiation. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EThis type represents the most generic definition of a new op representing a unary function, allowing the specification of: (1) the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html\u0022\u003ERawTensor\u003C/a\u003E operation, (2) the derivative propagation rule for the forward differentiation mode and (3) the derivative propagation rule for the reverse differentiation mode.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EIn general, if you are implementing a simple elementwise op, you should prefer using the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-unaryopelementwise.html\u0022\u003EUnaryOpElementwise\u003C/a\u003E type, which is much simpler to use.\u003C/p\u003E \nUnaryOp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUnaryOp.ad_dfda \nad_dfda \nUnaryOp.fRaw \nfRaw \nUnaryOp.fd_dfda \nfd_dfda \nUnaryOp.name \nname"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html#\u0060\u0060.ctor\u0060\u0060","title":"UnaryOp.\u0060\u0060.ctor\u0060\u0060","content":"UnaryOp.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html#ad_dfda","title":"UnaryOp.ad_dfda","content":"UnaryOp.ad_dfda \nad_dfda \nDerivative propagation rule for forward differentiation mode. This represents the derivative of \\( f(a) \\) with respect a value \\( x \\) earlier in the computation graph than the function\u0027s argument \\( a \\). In other words, it computes \\( \\frac{\\partial f(a)}{\\partial x} = \\frac{\\partial a}{\\partial x} \\frac{\\partial f(a)}{\\partial a} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html#fRaw","title":"UnaryOp.fRaw","content":"UnaryOp.fRaw \nfRaw \nRawTensor operation \\( f(a) \\) performing the op."},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html#fd_dfda","title":"UnaryOp.fd_dfda","content":"UnaryOp.fd_dfda \nfd_dfda \nDerivative propagation rule for reverse differentiation mode. This represents the derivative of a value \\( y \\), which comes later in the computation graph than the function\u0027s value \\( f(a) \\), with respect to the function\u0027s argument \\( a \\). In other words, it computes \\( \\frac{\\partial y}{\\partial a} = \\frac{\\partial y}{\\partial f(a)} \\frac{\\partial f(a)}{\\partial a} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryop.html#name","title":"UnaryOp.name","content":"UnaryOp.name \nname \n\n Name of the op.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryopelementwise.html","title":"UnaryOpElementwise","content":"UnaryOpElementwise \nDefines a new op implementing an elementwise unary function and its derivatives. Instances of this class are used with the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-tensor.html#Op\u0022\u003ETensor.Op\u003C/a\u003E method to define a new differentiable tensor function that supports forward, reverse, and nested differentiation. \n\u003Cp class=\u0027fsdocs-para\u0027\u003EThis type is specialized to elementwise ops. It requires the user to specify only (1) the \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html\u0022\u003ERawTensor\u003C/a\u003E operation and (2) the derivative of the function with respect to its argument. The corresponding derivative propagation rules for the forward and reverse differentiation modes are automatically generated.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EIf you are implementing a complex op that is not elementwise, you can use the generic type \u003Ca href=\u0022https://diffsharp.github.io/reference/diffsharp-unaryop.html\u0022\u003EUnaryOp\u003C/a\u003E, which allows you to define the full derivative propagation rules.\u003C/p\u003E \nUnaryOpElementwise.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUnaryOpElementwise.dfda \ndfda"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryopelementwise.html#\u0060\u0060.ctor\u0060\u0060","title":"UnaryOpElementwise.\u0060\u0060.ctor\u0060\u0060","content":"UnaryOpElementwise.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-unaryopelementwise.html#dfda","title":"UnaryOpElementwise.dfda","content":"UnaryOpElementwise.dfda \ndfda \nDerivative of the function with respect to its argument, \\( \\frac{\\partial f(a)}{\\partial a} \\)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html","title":"dsharp","content":"dsharp \n\n Tensor operations\n \ndsharp.abs \nabs \ndsharp.acos \nacos \ndsharp.add \nadd \ndsharp.arange \narange \ndsharp.arange \narange \ndsharp.arangeLike \narangeLike \ndsharp.arangeLike \narangeLike \ndsharp.argmax \nargmax \ndsharp.argmax \nargmax \ndsharp.argmin \nargmin \ndsharp.argmin \nargmin \ndsharp.asin \nasin \ndsharp.atan \natan \ndsharp.backends \nbackends \ndsharp.backendsAndDevices \nbackendsAndDevices \ndsharp.bceLoss \nbceLoss \ndsharp.bernoulli \nbernoulli \ndsharp.cast \ncast \ndsharp.cat \ncat \ndsharp.ceil \nceil \ndsharp.clamp \nclamp \ndsharp.clone \nclone \ndsharp.config \nconfig \ndsharp.config \nconfig \ndsharp.config \nconfig \ndsharp.conv1d \nconv1d \ndsharp.conv2d \nconv2d \ndsharp.conv3d \nconv3d \ndsharp.convTranspose1d \nconvTranspose1d \ndsharp.convTranspose2d \nconvTranspose2d \ndsharp.convTranspose3d \nconvTranspose3d \ndsharp.corrcoef \ncorrcoef \ndsharp.cos \ncos \ndsharp.cosh \ncosh \ndsharp.cov \ncov \ndsharp.create \ncreate \ndsharp.crossEntropyLoss \ncrossEntropyLoss \ndsharp.curl \ncurl \ndsharp.curldivergence \ncurldivergence \ndsharp.derivative \nderivative \ndsharp.devices \ndevices \ndsharp.diagonal \ndiagonal \ndsharp.diff \ndiff \ndsharp.diff2 \ndiff2 \ndsharp.diffn \ndiffn \ndsharp.dilate \ndilate \ndsharp.div \ndiv \ndsharp.divergence \ndivergence \ndsharp.dot \ndot \ndsharp.dropout \ndropout \ndsharp.dropout2d \ndropout2d \ndsharp.dropout3d \ndropout3d \ndsharp.empty \nempty \ndsharp.empty \nempty \ndsharp.empty \nempty \ndsharp.eq \neq \ndsharp.evalForwardDiff \nevalForwardDiff \ndsharp.evalForwardDiffs \nevalForwardDiffs \ndsharp.evalReverseDiff \nevalReverseDiff \ndsharp.exp \nexp \ndsharp.expand \nexpand \ndsharp.expandAs \nexpandAs \ndsharp.eye \neye \ndsharp.fcurl \nfcurl \ndsharp.fcurldivergence \nfcurldivergence \ndsharp.fdiff \nfdiff \ndsharp.fdiff2 \nfdiff2 \ndsharp.fdiffn \nfdiffn \ndsharp.fdivergence \nfdivergence \ndsharp.ffdiffn \nffdiffn \ndsharp.fgrad \nfgrad \ndsharp.fgradhessian \nfgradhessian \ndsharp.fgradhessianv \nfgradhessianv \ndsharp.fgradv \nfgradv \ndsharp.fhessian \nfhessian \ndsharp.fhessianv \nfhessianv \ndsharp.fjacobian \nfjacobian \ndsharp.fjacobianTv \nfjacobianTv \ndsharp.fjacobianv \nfjacobianv \ndsharp.flaplacian \nflaplacian \ndsharp.flatten \nflatten \ndsharp.flip \nflip \ndsharp.floor \nfloor \ndsharp.forwardDiff \nforwardDiff \ndsharp.full \nfull \ndsharp.full \nfull \ndsharp.fullLike \nfullLike \ndsharp.gather \ngather \ndsharp.ge \nge \ndsharp.grad \ngrad \ndsharp.gradhessian \ngradhessian \ndsharp.gradhessianv \ngradhessianv \ndsharp.gradv \ngradv \ndsharp.gt \ngt \ndsharp.hasinf \nhasinf \ndsharp.hasnan \nhasnan \ndsharp.hessian \nhessian \ndsharp.hessianv \nhessianv \ndsharp.init \ninit \ndsharp.init2d \ninit2d \ndsharp.init3d \ninit3d \ndsharp.init4d \ninit4d \ndsharp.isBackendAvailable \nisBackendAvailable \ndsharp.isCudaAvailable \nisCudaAvailable \ndsharp.isDeviceAvailable \nisDeviceAvailable \ndsharp.isDeviceTypeAvailable \nisDeviceTypeAvailable \ndsharp.isTensor \nisTensor \ndsharp.isinf \nisinf \ndsharp.isnan \nisnan \ndsharp.jacobian \njacobian \ndsharp.jacobianTv \njacobianTv \ndsharp.jacobianv \njacobianv \ndsharp.laplacian \nlaplacian \ndsharp.le \nle \ndsharp.leakyRelu \nleakyRelu \ndsharp.like \nlike \ndsharp.linspace \nlinspace \ndsharp.linspace \nlinspace \ndsharp.load \nload \ndsharp.log \nlog \ndsharp.log10 \nlog10 \ndsharp.logsoftmax \nlogsoftmax \ndsharp.logspace \nlogspace \ndsharp.logspace \nlogspace \ndsharp.logsumexp \nlogsumexp \ndsharp.lt \nlt \ndsharp.map \nmap \ndsharp.map2 \nmap2 \ndsharp.map3 \nmap3 \ndsharp.mapi \nmapi \ndsharp.mapi2 \nmapi2 \ndsharp.mapi3 \nmapi3 \ndsharp.matmul \nmatmul \ndsharp.max \nmax \ndsharp.max \nmax \ndsharp.max \nmax \ndsharp.maxpool1d \nmaxpool1d \ndsharp.maxpool1di \nmaxpool1di \ndsharp.maxpool2d \nmaxpool2d \ndsharp.maxpool2di \nmaxpool2di \ndsharp.maxpool3d \nmaxpool3d \ndsharp.maxpool3di \nmaxpool3di \ndsharp.maxunpool1d \nmaxunpool1d \ndsharp.maxunpool2d \nmaxunpool2d \ndsharp.maxunpool3d \nmaxunpool3d \ndsharp.mean \nmean \ndsharp.mean \nmean \ndsharp.min \nmin \ndsharp.min \nmin \ndsharp.min \nmin \ndsharp.move \nmove \ndsharp.mseLoss \nmseLoss \ndsharp.mul \nmul \ndsharp.multinomial \nmultinomial \ndsharp.ne \nne \ndsharp.neg \nneg \ndsharp.nelement \nnelement \ndsharp.nest \nnest \ndsharp.nest \nnest \ndsharp.nestLevel \nnestLevel \ndsharp.nestReset \nnestReset \ndsharp.nllLoss \nnllLoss \ndsharp.noDiff \nnoDiff \ndsharp.normalize \nnormalize \ndsharp.one \none \ndsharp.oneLike \noneLike \ndsharp.onehot \nonehot \ndsharp.onehotLike \nonehotLike \ndsharp.ones \nones \ndsharp.ones \nones \ndsharp.onesLike \nonesLike \ndsharp.pad \npad \ndsharp.permute \npermute \ndsharp.pow \npow \ndsharp.primal \nprimal \ndsharp.primalDerivative \nprimalDerivative \ndsharp.rand \nrand \ndsharp.rand \nrand \ndsharp.randLike \nrandLike \ndsharp.randint \nrandint \ndsharp.randint \nrandint \ndsharp.randintLike \nrandintLike \ndsharp.randn \nrandn \ndsharp.randn \nrandn \ndsharp.randnLike \nrandnLike \ndsharp.relu \nrelu \ndsharp.repeat \nrepeat \ndsharp.reverse \nreverse \ndsharp.reverseDiff \nreverseDiff \ndsharp.reversePush \nreversePush \ndsharp.reverseReset \nreverseReset \ndsharp.round \nround \ndsharp.safelog \nsafelog \ndsharp.save \nsave \ndsharp.scalar \nscalar \ndsharp.scatter \nscatter \ndsharp.seed \nseed \ndsharp.sigmoid \nsigmoid \ndsharp.sign \nsign \ndsharp.sin \nsin \ndsharp.sinh \nsinh \ndsharp.slice \nslice \ndsharp.softmax \nsoftmax \ndsharp.softplus \nsoftplus \ndsharp.split \nsplit \ndsharp.sqrt \nsqrt \ndsharp.squeeze \nsqueeze \ndsharp.stack \nstack \ndsharp.standardize \nstandardize \ndsharp.std \nstd \ndsharp.std \nstd \ndsharp.sub \nsub \ndsharp.sum \nsum \ndsharp.sum \nsum \ndsharp.tan \ntan \ndsharp.tanh \ntanh \ndsharp.tensor \ntensor \ndsharp.toImage \ntoImage \ndsharp.toImageString \ntoImageString \ndsharp.trace \ntrace \ndsharp.transpose \ntranspose \ndsharp.transpose \ntranspose \ndsharp.undilate \nundilate \ndsharp.unflatten \nunflatten \ndsharp.unsqueeze \nunsqueeze \ndsharp.unsqueezeAs \nunsqueezeAs \ndsharp.unstack \nunstack \ndsharp.var \nvar \ndsharp.var \nvar \ndsharp.view \nview \ndsharp.view \nview \ndsharp.viewAs \nviewAs \ndsharp.zero \nzero \ndsharp.zeroCreate \nzeroCreate \ndsharp.zeroLike \nzeroLike \ndsharp.zeros \nzeros \ndsharp.zeros \nzeros \ndsharp.zerosLike \nzerosLike \ndsharp.version \nversion"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#abs","title":"dsharp.abs","content":"dsharp.abs \nabs \nComputes the element-wise absolute value of the given input tensor. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#acos","title":"dsharp.acos","content":"dsharp.acos \nacos \nReturns a new tensor with the arccosine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#add","title":"dsharp.add","content":"dsharp.add \nadd \nReturn the element-wise addition of the two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#arange","title":"dsharp.arange","content":"dsharp.arange \narange \n\n Returns a 1-D tensor of size \\(\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil\\)\n with values from the interval [start, end) taken with common difference step beginning from start.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#arange","title":"dsharp.arange","content":"dsharp.arange \narange \n\n Returns a 1-D tensor of size \\(\\left\\lceil \\frac{\\text{end} - \\text{start}}{\\text{step}} \\right\\rceil\\)\n with values from the interval [start, end) taken with common difference step beginning from start.\n  \n\n  Non-integer steps may be subject to floating point rounding errors when comparing against end.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#arangeLike","title":"dsharp.arangeLike","content":"dsharp.arangeLike \narangeLike \n\n A version of dsharp.arange with characteristics based on the input tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#arangeLike","title":"dsharp.arangeLike","content":"dsharp.arangeLike \narangeLike \n\n A version of dsharp.arange with characteristics based on the input tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#argmax","title":"dsharp.argmax","content":"dsharp.argmax \nargmax \nReturns the indices of the maximum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#argmax","title":"dsharp.argmax","content":"dsharp.argmax \nargmax \nReturns the indices of the maximum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#argmin","title":"dsharp.argmin","content":"dsharp.argmin \nargmin \nReturns the indices of the minimum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#argmin","title":"dsharp.argmin","content":"dsharp.argmin \nargmin \nReturns the indices of the minimum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#asin","title":"dsharp.asin","content":"dsharp.asin \nasin \nReturns a new tensor with the arcsine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#atan","title":"dsharp.atan","content":"dsharp.atan \natan \nReturns a new tensor with the arctangent of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#backends","title":"dsharp.backends","content":"dsharp.backends \nbackends \nReturns the list of available backends."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#backendsAndDevices","title":"dsharp.backendsAndDevices","content":"dsharp.backendsAndDevices \nbackendsAndDevices \nReturns the list of available backends and devices available for each backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#bceLoss","title":"dsharp.bceLoss","content":"dsharp.bceLoss \nbceLoss \nCreates a criterion that measures the Binary Cross Entropy between the target and the output"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#bernoulli","title":"dsharp.bernoulli","content":"dsharp.bernoulli \nbernoulli \nDraws binary random numbers (0 or 1) from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#cast","title":"dsharp.cast","content":"dsharp.cast \ncast \nConvert the tensor to one with the given element type. \nIf the element type is unchanged the input tensor will be returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#cat","title":"dsharp.cat","content":"dsharp.cat \ncat \nConcatenates the given sequence of seq tensors in the given dimension. All tensors must either have the same shape (except in the concatenating dimension) or be empty."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ceil","title":"dsharp.ceil","content":"dsharp.ceil \nceil \nReturns a new tensor with the ceil of the elements of input, the smallest integer greater than or equal to each element. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#clamp","title":"dsharp.clamp","content":"dsharp.clamp \nclamp \nClamp all elements in input into the range [ low..high] and return a resulting tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#clone","title":"dsharp.clone","content":"dsharp.clone \nclone \nReturns a new tensor with the same characteristics and storage cloned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#config","title":"dsharp.config","content":"dsharp.config \nconfig \nConfigure the default device, element type, backend, printer. Only floating point dtypes are supported as the default."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#config","title":"dsharp.config","content":"dsharp.config \nconfig \nReturn the current default device, element type, backend, and printer."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#config","title":"dsharp.config","content":"dsharp.config \nconfig \nConfigure the default device, dtype, and/or backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#conv1d","title":"dsharp.conv1d","content":"dsharp.conv1d \nconv1d \nApplies a 1D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#conv2d","title":"dsharp.conv2d","content":"dsharp.conv2d \nconv2d \nApplies a 2D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#conv3d","title":"dsharp.conv3d","content":"dsharp.conv3d \nconv3d \nApplies a 3D convolution over an input signal composed of several input planes"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#convTranspose1d","title":"dsharp.convTranspose1d","content":"dsharp.convTranspose1d \nconvTranspose1d \nApplies a 1D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#convTranspose2d","title":"dsharp.convTranspose2d","content":"dsharp.convTranspose2d \nconvTranspose2d \nApplies a 2D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#convTranspose3d","title":"dsharp.convTranspose3d","content":"dsharp.convTranspose3d \nconvTranspose3d \nApplies a 3D transposed convolution operator over an input signal composed of several input planes, sometimes also called \u0027deconvolution\u0027."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#corrcoef","title":"dsharp.corrcoef","content":"dsharp.corrcoef \ncorrcoef \n\n Estimates the Pearson correlation coefficient matrix for the given tensor. The tensor\u0027s first\n dimension should index variables and the second dimension should\n index observations for each variable.\n  \n\n The correlation between variables \\(x\\) and \\(y\\) is\n  \\[cor(x,y)= \\frac{\\sum^{N}_{i = 1}(x_{i} - \\mu_x)(y_{i} - \\mu_y)}{\\sigma_x \\sigma_y (N ~-~1)}\\]\n where \\(\\mu_x\\) and \\(\\mu_y\\) are the sample means and \\(\\sigma_x\\) and \\(\\sigma_x\\) are \n the sample standard deviations.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#cos","title":"dsharp.cos","content":"dsharp.cos \ncos \nReturns a new tensor with the cosine of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#cosh","title":"dsharp.cosh","content":"dsharp.cosh \ncosh \nReturns a new tensor with the hyperbolic cosine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#cov","title":"dsharp.cov","content":"dsharp.cov \ncov \n\n Estimates the covariance matrix of the given tensor. The tensor\u0027s first\n dimension should index variables and the second dimension should\n index observations for each variable.\n  \n\n If no weights are given, the covariance between variables \\(x\\) and \\(y\\) is\n  \\[cov(x,y)= \\frac{\\sum^{N}_{i = 1}(x_{i} - \\mu_x)(y_{i} - \\mu_y)}{N~-~\\text{correction}}\\]\n where \\(\\mu_x\\) and \\(\\mu_y\\) are the sample means.\n \n If there are fweights or aweights then the covariance is\n \\[cov(x,y)=\\frac{\\sum^{N}_{i = 1}w_i(x_{i} - \\mu_x^*)(y_{i} - \\mu_y^*)}{\\text{normalization factor}}\\]\n where \\(w\\) is either fweights or aweights if one weight type is provided.\n If both weight types are provided \\(w=\\text{fweights}\\times\\text{aweights}\\). \n \\(\\mu_x^* = \\frac{\\sum^{N}_{i = 1}w_ix_{i} }{\\sum^{N}_{i = 1}w_i}\\)\n is the weighted mean of variables.\n The normalization factor is \\(\\sum^{N}_{i=1} w_i\\) if only fweights are provided or if aweights are provided and \u003Ccode\u003Ecorrection=0\u003C/code\u003E. \n Otherwise if aweights \\(aw\\) are provided the normalization factor is\n  \\(\\sum^N_{i=1} w_i - \\text{correction}\\times\\frac{\\sum^N_{i=1} w_i aw_i}{\\sum^N_{i=1} w_i}\\) \n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#create","title":"dsharp.create","content":"dsharp.create \ncreate \nCreate a new 1D tensor using the given value for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#crossEntropyLoss","title":"dsharp.crossEntropyLoss","content":"dsharp.crossEntropyLoss \ncrossEntropyLoss \nThis criterion combines logsoftmax and nllLoss in a single function"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#curl","title":"dsharp.curl","content":"dsharp.curl \ncurl \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#curldivergence","title":"dsharp.curldivergence","content":"dsharp.curldivergence \ncurldivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#derivative","title":"dsharp.derivative","content":"dsharp.derivative \nderivative \nGet the derivative value of the tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#devices","title":"dsharp.devices","content":"dsharp.devices \ndevices \nReturns the list of available devices for a given backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#diagonal","title":"dsharp.diagonal","content":"dsharp.diagonal \ndiagonal \n\n  Returns a tensor with the diagonal elements with respect to \u003Ccode\u003Edim1\u003C/code\u003E and \u003Ccode\u003Edim2\u003C/code\u003E.\n  The argument offset controls which diagonal to consider.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#diff","title":"dsharp.diff","content":"dsharp.diff \ndiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#diff2","title":"dsharp.diff2","content":"dsharp.diff2 \ndiff2 \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#diffn","title":"dsharp.diffn","content":"dsharp.diffn \ndiffn \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#dilate","title":"dsharp.dilate","content":"dsharp.dilate \ndilate \nDilate the tensor in using the given dilations in each corresponding dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#div","title":"dsharp.div","content":"dsharp.div \ndiv \nReturn the element-wise division of the two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#divergence","title":"dsharp.divergence","content":"dsharp.divergence \ndivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#dot","title":"dsharp.dot","content":"dsharp.dot \ndot \nComputes the dot product (inner product) of two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#dropout","title":"dsharp.dropout","content":"dsharp.dropout \ndropout \nRandomly zeroes some of the elements of the input tensor with probability p using samples from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#dropout2d","title":"dsharp.dropout2d","content":"dsharp.dropout2d \ndropout2d \nRandomly zero out entire channels (a channel is a 2D feature map, e.g., the jj -th channel of the ii -th sample in the batched input is a 2D tensor \\text{input}[i, j]input[i,j] ). Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#dropout3d","title":"dsharp.dropout3d","content":"dsharp.dropout3d \ndropout3d \nRandomly zero out entire channels (a channel is a 3D feature map, e.g., the jj -th channel of the ii -th sample in the batched input is a 3D tensor \\text{input}[i, j]input[i,j] ). Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#empty","title":"dsharp.empty","content":"dsharp.empty \nempty \nReturns a new empty tensor holding no data, for the given element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#empty","title":"dsharp.empty","content":"dsharp.empty \nempty \nReturns a new uninitialized tensor filled with arbitrary values for the given length, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#empty","title":"dsharp.empty","content":"dsharp.empty \nempty \nReturns a new uninitialized tensor filled with arbitrary values for the given shape, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#eq","title":"dsharp.eq","content":"dsharp.eq \neq \nReturns a boolean tensor for the element-wise equality comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#evalForwardDiff","title":"dsharp.evalForwardDiff","content":"dsharp.evalForwardDiff \nevalForwardDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#evalForwardDiffs","title":"dsharp.evalForwardDiffs","content":"dsharp.evalForwardDiffs \nevalForwardDiffs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#evalReverseDiff","title":"dsharp.evalReverseDiff","content":"dsharp.evalReverseDiff \nevalReverseDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#exp","title":"dsharp.exp","content":"dsharp.exp \nexp \nApplies the exp function element-wise."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#expand","title":"dsharp.expand","content":"dsharp.expand \nexpand \nReturns a new view of the input tensor with singleton dimensions expanded to a larger size"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#expandAs","title":"dsharp.expandAs","content":"dsharp.expandAs \nexpandAs \nExpand the input tensor to the same size as other tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#eye","title":"dsharp.eye","content":"dsharp.eye \neye \nReturns a 2-D tensor with ones on the diagonal and zeros elsewhere."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fcurl","title":"dsharp.fcurl","content":"dsharp.fcurl \nfcurl \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fcurldivergence","title":"dsharp.fcurldivergence","content":"dsharp.fcurldivergence \nfcurldivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fdiff","title":"dsharp.fdiff","content":"dsharp.fdiff \nfdiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fdiff2","title":"dsharp.fdiff2","content":"dsharp.fdiff2 \nfdiff2 \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fdiffn","title":"dsharp.fdiffn","content":"dsharp.fdiffn \nfdiffn \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fdivergence","title":"dsharp.fdivergence","content":"dsharp.fdivergence \nfdivergence \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ffdiffn","title":"dsharp.ffdiffn","content":"dsharp.ffdiffn \nffdiffn \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fgrad","title":"dsharp.fgrad","content":"dsharp.fgrad \nfgrad \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fgradhessian","title":"dsharp.fgradhessian","content":"dsharp.fgradhessian \nfgradhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fgradhessianv","title":"dsharp.fgradhessianv","content":"dsharp.fgradhessianv \nfgradhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fgradv","title":"dsharp.fgradv","content":"dsharp.fgradv \nfgradv \nTBD \nThe \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ev\u003C/code\u003E tensors should have the same number of elements."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fhessian","title":"dsharp.fhessian","content":"dsharp.fhessian \nfhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fhessianv","title":"dsharp.fhessianv","content":"dsharp.fhessianv \nfhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fjacobian","title":"dsharp.fjacobian","content":"dsharp.fjacobian \nfjacobian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fjacobianTv","title":"dsharp.fjacobianTv","content":"dsharp.fjacobianTv \nfjacobianTv \nOriginal value and transposed Jacobian-vector product of a vector-to-vector function \u0060f\u0060, at point \u0060x\u0060, along vector \u0060v\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fjacobianv","title":"dsharp.fjacobianv","content":"dsharp.fjacobianv \nfjacobianv \nTBD \nThe \u003Ccode\u003Ex\u003C/code\u003E and \u003Ccode\u003Ev\u003C/code\u003E tensors should have the same number of elements."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#flaplacian","title":"dsharp.flaplacian","content":"dsharp.flaplacian \nflaplacian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#flatten","title":"dsharp.flatten","content":"dsharp.flatten \nflatten \nFlattens a contiguous range of dims in a tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#flip","title":"dsharp.flip","content":"dsharp.flip \nflip \nReverse the order of a n-D tensor along given axis in dims"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#floor","title":"dsharp.floor","content":"dsharp.floor \nfloor \nReturns a new tensor with the floor of the elements of input, the largest integer less than or equal to each element. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#forwardDiff","title":"dsharp.forwardDiff","content":"dsharp.forwardDiff \nforwardDiff \nProduce a new tensor suitable for calculating the forward-mode derivative at the given level tag."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#full","title":"dsharp.full","content":"dsharp.full \nfull \nReturns a new tensor of the given length filled with \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Evalue\u003C/span\u003E, for the given element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#full","title":"dsharp.full","content":"dsharp.full \nfull \nReturns a new tensor filled with the scalar \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Evalue\u003C/span\u003E, for the given shape, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#fullLike","title":"dsharp.fullLike","content":"dsharp.fullLike \nfullLike \nReturns a new tensor filled with the given scalar value with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#gather","title":"dsharp.gather","content":"dsharp.gather \ngather \nGathers values along an axis specified by dim."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ge","title":"dsharp.ge","content":"dsharp.ge \nge \nReturns a boolean tensor for the element-wise greater-than-or-equal comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#grad","title":"dsharp.grad","content":"dsharp.grad \ngrad \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#gradhessian","title":"dsharp.gradhessian","content":"dsharp.gradhessian \ngradhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#gradhessianv","title":"dsharp.gradhessianv","content":"dsharp.gradhessianv \ngradhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#gradv","title":"dsharp.gradv","content":"dsharp.gradv \ngradv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#gt","title":"dsharp.gt","content":"dsharp.gt \ngt \nReturns a boolean tensor for the element-wise greater-than comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#hasinf","title":"dsharp.hasinf","content":"dsharp.hasinf \nhasinf \nReturns a boolean indicating if any element of the tensor is infinite."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#hasnan","title":"dsharp.hasnan","content":"dsharp.hasnan \nhasnan \nReturns a boolean indicating if any element of the tensor is a not-a-number (NaN) value."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#hessian","title":"dsharp.hessian","content":"dsharp.hessian \nhessian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#hessianv","title":"dsharp.hessianv","content":"dsharp.hessianv \nhessianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#init","title":"dsharp.init","content":"dsharp.init \ninit \nCreate a new 1D tensor using the given initializer for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#init2d","title":"dsharp.init2d","content":"dsharp.init2d \ninit2d \nCreate a new 2D tensor using the given initializer for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#init3d","title":"dsharp.init3d","content":"dsharp.init3d \ninit3d \nCreate a new 3D tensor using the given initializer for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#init4d","title":"dsharp.init4d","content":"dsharp.init4d \ninit4d \nCreate a new 4D tensor using the given initializer for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isBackendAvailable","title":"dsharp.isBackendAvailable","content":"dsharp.isBackendAvailable \nisBackendAvailable \nIndicates if a given backend is available."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isCudaAvailable","title":"dsharp.isCudaAvailable","content":"dsharp.isCudaAvailable \nisCudaAvailable \nIndicates if CUDA is available for a given backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isDeviceAvailable","title":"dsharp.isDeviceAvailable","content":"dsharp.isDeviceAvailable \nisDeviceAvailable \nIndicates if a given device is available for a given backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isDeviceTypeAvailable","title":"dsharp.isDeviceTypeAvailable","content":"dsharp.isDeviceTypeAvailable \nisDeviceTypeAvailable \nIndicates if a given device type is available for a given backend."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isTensor","title":"dsharp.isTensor","content":"dsharp.isTensor \nisTensor \nIndicates if an object is a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isinf","title":"dsharp.isinf","content":"dsharp.isinf \nisinf \nReturns a boolean tensor where each element indicates if the corresponding element in the input tensor is an infinity value."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#isnan","title":"dsharp.isnan","content":"dsharp.isnan \nisnan \nReturns a boolean tensor where each element indicates if the corresponding element in the input tensor is a NaN (not-a-number) value."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#jacobian","title":"dsharp.jacobian","content":"dsharp.jacobian \njacobian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#jacobianTv","title":"dsharp.jacobianTv","content":"dsharp.jacobianTv \njacobianTv \nTransposed Jacobian-vector product of a vector-to-vector function \u0060f\u0060, at point \u0060x\u0060, along vector \u0060v\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#jacobianv","title":"dsharp.jacobianv","content":"dsharp.jacobianv \njacobianv \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#laplacian","title":"dsharp.laplacian","content":"dsharp.laplacian \nlaplacian \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#le","title":"dsharp.le","content":"dsharp.le \nle \nReturn a boolean tensor for the element-wise less-than-or-equal comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#leakyRelu","title":"dsharp.leakyRelu","content":"dsharp.leakyRelu \nleakyRelu \nApplies the leaky rectified linear unit function element-wise \n\\[\\text{LeakyReLU}(x) = \\max(0, x) \u002B \\text{negative\\_slope} * \\min(0, x)\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#like","title":"dsharp.like","content":"dsharp.like \nlike \nReturns a new tensor based on the given .NET value with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#linspace","title":"dsharp.linspace","content":"dsharp.linspace \nlinspace \n\n Returns a 1-D tensor of size \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Esteps\u003C/span\u003E whose values are evenly spaced from \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EstartVal\u003C/span\u003E to \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EendVal\u003C/span\u003E. The values are going to be: \\(\n (\\text{startVal},\n \\text{startVal} \u002B \\frac{\\text{endVal} - \\text{startVal}}{\\text{steps} - 1},\n \\ldots,\n \\text{startVal} \u002B (\\text{steps} - 2) * \\frac{\\text{endVal} - \\text{startVal}}{\\text{steps} - 1},\n \\text{endVal}) \n \\)\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#linspace","title":"dsharp.linspace","content":"dsharp.linspace \nlinspace \n\n Returns a 1-D tensor of size \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Esteps\u003C/span\u003E whose values are evenly spaced from \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EstartVal\u003C/span\u003E to \u003Cspan class=\u0022fsdocs-param-name\u0022\u003EendVal\u003C/span\u003E. The values are going to be: \\(\n (\\text{startVal},\n \\text{startVal} \u002B \\frac{\\text{endVal} - \\text{startVal}}{\\text{steps} - 1},\n \\ldots,\n \\text{startVal} \u002B (\\text{steps} - 2) * \\frac{\\text{endVal} - \\text{startVal}}{\\text{steps} - 1},\n \\text{endVal}) \n \\)\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#load","title":"dsharp.load","content":"dsharp.load \nload \nLoads an object from the given file using a bespoke binary format. \n\n   The format used may change from version to version of DiffSharp.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#log","title":"dsharp.log","content":"dsharp.log \nlog \nReturns a new tensor with the natural logarithm of the elements of input. \n \\[y_{i} = \\log_{e} (x_{i})\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#log10","title":"dsharp.log10","content":"dsharp.log10 \nlog10 \nReturns a new tensor with the logarithm to the base 10 of the elements of input. \n\\[y_{i} = \\log_{10} (x_{i})\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#logsoftmax","title":"dsharp.logsoftmax","content":"dsharp.logsoftmax \nlogsoftmax \nApplies a softmax followed by a logarithm."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#logspace","title":"dsharp.logspace","content":"dsharp.logspace \nlogspace \n\n Returns a 1-D tensor of size \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Esteps\u003C/span\u003E whose values are evenly spaced logarithmically from \\(\\text{baseVal}^{\\text{startVal}}\\) to \\(\\text{baseVal}^{\\text{endVal}}\\). The values are going to be: \\(\n (\\text{baseVal}^{\\text{startVal}},\n \\text{baseVal}^{(\\text{startVal} \u002B \\frac{\\text{endVal} - \\text{startVal}}{ \\text{steps} - 1})},\n \\ldots,\n \\text{baseVal}^{(\\text{startVal} \u002B (\\text{steps} - 2) * \\frac{\\text{endVal} - \\text{startVal}}{ \\text{steps} - 1})},\n \\text{baseVal}^{\\text{endVal}})\n \\)\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#logspace","title":"dsharp.logspace","content":"dsharp.logspace \nlogspace \n\n Returns a 1-D tensor of size \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Esteps\u003C/span\u003E whose values are evenly spaced logarithmically from \\(\\text{baseVal}^{\\text{startVal}}\\) to \\(\\text{baseVal}^{\\text{endVal}}\\). The values are going to be: \\(\n (\\text{baseVal}^{\\text{startVal}},\n \\text{baseVal}^{(\\text{startVal} \u002B \\frac{\\text{endVal} - \\text{startVal}}{ \\text{steps} - 1})},\n \\ldots,\n \\text{baseVal}^{(\\text{startVal} \u002B (\\text{steps} - 2) * \\frac{\\text{endVal} - \\text{startVal}}{ \\text{steps} - 1})},\n \\text{baseVal}^{\\text{endVal}})\n \\)\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#logsumexp","title":"dsharp.logsumexp","content":"dsharp.logsumexp \nlogsumexp \nApplies a logsumexp followed by a logarithm."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#lt","title":"dsharp.lt","content":"dsharp.lt \nlt \nReturns a boolean tensor for the element-wise less-than comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#map","title":"dsharp.map","content":"dsharp.map \nmap \nProduce a new tensor by mapping a function over all elements of the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#map2","title":"dsharp.map2","content":"dsharp.map2 \nmap2 \nProduce a new tensor by mapping a function over all corresponding elements of two input tensors. \nThe shapes of the two tensors must be identical."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#map3","title":"dsharp.map3","content":"dsharp.map3 \nmap3 \nProduce a new tensor by mapping a function over all corresponding elements of three input tensors. \nThe shapes of the three tensors must be identical."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mapi","title":"dsharp.mapi","content":"dsharp.mapi \nmapi \nProduce a new tensor by mapping a function over all elements of the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mapi2","title":"dsharp.mapi2","content":"dsharp.mapi2 \nmapi2 \nProduce a new tensor by mapping a function over all corresponding elements of two input tensors. \nThe function is passed the index of each element. The shapes of the two tensors must be identical."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mapi3","title":"dsharp.mapi3","content":"dsharp.mapi3 \nmapi3 \nProduce a new tensor by mapping a function over all corresponding elements of three input tensors. \nThe function is passed the index of each element. The shapes of the three tensors must be identical."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#matmul","title":"dsharp.matmul","content":"dsharp.matmul \nmatmul \nMatrix product of two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#max","title":"dsharp.max","content":"dsharp.max \nmax \nReturns the maximum value of all elements in the input tensor along the given dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#max","title":"dsharp.max","content":"dsharp.max \nmax \nEach element of the tensor input is compared with the corresponding element of the tensor other and an element-wise maximum is taken. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#max","title":"dsharp.max","content":"dsharp.max \nmax \nReturns the maximum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool1d","title":"dsharp.maxpool1d","content":"dsharp.maxpool1d \nmaxpool1d \nApplies a 1D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool1di","title":"dsharp.maxpool1di","content":"dsharp.maxpool1di \nmaxpool1di \nApplies a 1D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool2d","title":"dsharp.maxpool2d","content":"dsharp.maxpool2d \nmaxpool2d \nApplies a 2D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool2di","title":"dsharp.maxpool2di","content":"dsharp.maxpool2di \nmaxpool2di \nApplies a 2D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool3d","title":"dsharp.maxpool3d","content":"dsharp.maxpool3d \nmaxpool3d \nApplies a 3D max pooling over an input signal composed of several input planes."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxpool3di","title":"dsharp.maxpool3di","content":"dsharp.maxpool3di \nmaxpool3di \nApplies a 3D max pooling over an input signal composed of several input planes, returning the max indices along with the outputs."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxunpool1d","title":"dsharp.maxunpool1d","content":"dsharp.maxunpool1d \nmaxunpool1d \nComputes a partial inverse of maxpool1di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxunpool2d","title":"dsharp.maxunpool2d","content":"dsharp.maxunpool2d \nmaxunpool2d \nComputes a partial inverse of maxpool2di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#maxunpool3d","title":"dsharp.maxunpool3d","content":"dsharp.maxunpool3d \nmaxunpool3d \nComputes a partial inverse of maxpool3di"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mean","title":"dsharp.mean","content":"dsharp.mean \nmean \nReturns the mean value of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. \n\n  If keepdim is true, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mean","title":"dsharp.mean","content":"dsharp.mean \nmean \nReturns the mean value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#min","title":"dsharp.min","content":"dsharp.min \nmin \nReturns the minimum value of all elements in the input tensor along the given dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#min","title":"dsharp.min","content":"dsharp.min \nmin \nEach element of the tensor input is compared with the corresponding element of the tensor other and an element-wise minimum is taken. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#min","title":"dsharp.min","content":"dsharp.min \nmin \nReturns the minimum value of all elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#move","title":"dsharp.move","content":"dsharp.move \nmove \nMove the tensor to a difference device, backend and/or change its element type. \nIf the characteristics are unchanged the input tensor will be returned."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mseLoss","title":"dsharp.mseLoss","content":"dsharp.mseLoss \nmseLoss \nCreates a criterion that measures the mean squared error (squared L2 norm) between each element in the input and the target."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#mul","title":"dsharp.mul","content":"dsharp.mul \nmul \nReturn the element-wise multiplication of the two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#multinomial","title":"dsharp.multinomial","content":"dsharp.multinomial \nmultinomial \nReturns a tensor where each row contains numSamples indices sampled from the multinomial probability distribution located in the corresponding row of tensor input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ne","title":"dsharp.ne","content":"dsharp.ne \nne \nReturns a boolean tensor for the element-wise non-equality comparison of the elements in the two tensors. \nThe shapes of input and other don\u2019t need to match, but they must be broadcastable."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#neg","title":"dsharp.neg","content":"dsharp.neg \nneg \nReturn the element-wise negation of the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nelement","title":"dsharp.nelement","content":"dsharp.nelement \nnelement \nReturns the total number of elements in the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nest","title":"dsharp.nest","content":"dsharp.nest \nnest \nSet the global nesting level for automatic differentiation."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nest","title":"dsharp.nest","content":"dsharp.nest \nnest \nIncrease the global nesting level for automatic differentiation."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nestLevel","title":"dsharp.nestLevel","content":"dsharp.nestLevel \nnestLevel \nGet the global nesting level for automatic differentiation."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nestReset","title":"dsharp.nestReset","content":"dsharp.nestReset \nnestReset \nReset the global nesting level for automatic differentiation to zero."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#nllLoss","title":"dsharp.nllLoss","content":"dsharp.nllLoss \nnllLoss \nThe negative log likelihood loss."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#noDiff","title":"dsharp.noDiff","content":"dsharp.noDiff \nnoDiff \nProduce a new constant (non-differentiated) tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#normalize","title":"dsharp.normalize","content":"dsharp.normalize \nnormalize \nNormalizes a vector so all the values are between zero and one (min-max scaling to 0..1)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#one","title":"dsharp.one","content":"dsharp.one \none \nGet the scalar \u00271\u0027 tensor for the given configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#oneLike","title":"dsharp.oneLike","content":"dsharp.oneLike \noneLike \nReturns the \u00270\u0027 scalar tensor with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#onehot","title":"dsharp.onehot","content":"dsharp.onehot \nonehot \nReturns a one-hot tensor, with one location set to 1, and all others 0."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#onehotLike","title":"dsharp.onehotLike","content":"dsharp.onehotLike \nonehotLike \n\n A version of dsharp.onehot with characteristics based on the input tensor.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ones","title":"dsharp.ones","content":"dsharp.ones \nones \nReturns a new tensor of the given length filled with \u00271\u0027 values for the given element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#ones","title":"dsharp.ones","content":"dsharp.ones \nones \nReturns a new tensor filled with \u00271\u0027 values for the given shape, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#onesLike","title":"dsharp.onesLike","content":"dsharp.onesLike \nonesLike \nReturns a new tensor filled with \u00271\u0027 values with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#pad","title":"dsharp.pad","content":"dsharp.pad \npad \nAdd zero padding to each side of a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#permute","title":"dsharp.permute","content":"dsharp.permute \npermute \nReturns the original tensor with its dimensions permuted."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#pow","title":"dsharp.pow","content":"dsharp.pow \npow \nReturn the element-wise exponentiation of the two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#primal","title":"dsharp.primal","content":"dsharp.primal \nprimal \nGet the primal value of the tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#primalDerivative","title":"dsharp.primalDerivative","content":"dsharp.primalDerivative \nprimalDerivative \nGet the primal and derivative values of the tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#rand","title":"dsharp.rand","content":"dsharp.rand \nrand \nReturns a tensor filled with random numbers from a uniform distribution on the interval [0, 1)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#rand","title":"dsharp.rand","content":"dsharp.rand \nrand \nReturns a tensor filled with random numbers from a uniform distribution on the interval [0, 1)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randLike","title":"dsharp.randLike","content":"dsharp.randLike \nrandLike \nReturns a tensor filled with random numbers from a uniform distribution on the interval [0, 1) with characteristics based on the input tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randint","title":"dsharp.randint","content":"dsharp.randint \nrandint \nReturns a tensor filled with random integers generated uniformly between low (inclusive) and high (exclusive)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randint","title":"dsharp.randint","content":"dsharp.randint \nrandint \nReturns a tensor filled with random integers generated uniformly between low (inclusive) and high (exclusive)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randintLike","title":"dsharp.randintLike","content":"dsharp.randintLike \nrandintLike \nReturns a tensor with the same shape as Tensor input filled with random integers generated uniformly between low (inclusive) and high (exclusive) with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randn","title":"dsharp.randn","content":"dsharp.randn \nrandn \nReturns a tensor filled with random numbers from a normal distribution with mean 0 and variance 1 (also called the standard normal distribution)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randn","title":"dsharp.randn","content":"dsharp.randn \nrandn \nReturns a tensor filled with random numbers from a normal distribution with mean 0 and variance 1 (also called the standard normal distribution)."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#randnLike","title":"dsharp.randnLike","content":"dsharp.randnLike \nrandnLike \nReturns a tensor filled with random numbers from a normal distribution with mean 0 and variance 1 (also called the standard normal distribution) with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#relu","title":"dsharp.relu","content":"dsharp.relu \nrelu \nApplies the rectified linear unit function element-wise."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#repeat","title":"dsharp.repeat","content":"dsharp.repeat \nrepeat \nRepeat elements of a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#reverse","title":"dsharp.reverse","content":"dsharp.reverse \nreverse \nCompute the reverse-mode derivative at the given output tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#reverseDiff","title":"dsharp.reverseDiff","content":"dsharp.reverseDiff \nreverseDiff \nProduce a new tensor suitable for calculating the reverse-mode derivative at the given level tag."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#reversePush","title":"dsharp.reversePush","content":"dsharp.reversePush \nreversePush \nPush the given value as part of the reverse-mode computation at the given output tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#reverseReset","title":"dsharp.reverseReset","content":"dsharp.reverseReset \nreverseReset \nReset the reverse mode computation associated with the given output tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#round","title":"dsharp.round","content":"dsharp.round \nround \nReturns a new tensor with each of the elements of input rounded to the closest integer. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#safelog","title":"dsharp.safelog","content":"dsharp.safelog \nsafelog \nReturns the logarithm of the tensor after clamping the tensor so that all its elements are greater than epsilon. This is to avoid a -inf result for elements equal to zero."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#save","title":"dsharp.save","content":"dsharp.save \nsave \nSaves the object to the given file using a bespoke binary format. \n\n   The format used may change from version to version of DiffSharp.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#scalar","title":"dsharp.scalar","content":"dsharp.scalar \nscalar \nReturns a new scalar tensor with the value \u003Cspan class=\u0022fsdocs-param-name\u0022\u003Evalue\u003C/span\u003E, for the given element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#scatter","title":"dsharp.scatter","content":"dsharp.scatter \nscatter \nGathers values along an axis specified by dim."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#seed","title":"dsharp.seed","content":"dsharp.seed \nseed \nSeeds all backends with the given random seed, or a new seed based on the current time if no seed is specified."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sigmoid","title":"dsharp.sigmoid","content":"dsharp.sigmoid \nsigmoid \nApplies the sigmoid element-wise function \n\\[\\text{Sigmoid}(x) = \\frac{1}{1 \u002B \\exp(-x)}\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sign","title":"dsharp.sign","content":"dsharp.sign \nsign \nReturns a new tensor with the signs of the elements of input. \nThe tensor will have the same element type as the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sin","title":"dsharp.sin","content":"dsharp.sin \nsin \nReturns a new tensor with the sine of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sinh","title":"dsharp.sinh","content":"dsharp.sinh \nsinh \nReturns a new tensor with the hyperbolic sine of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#slice","title":"dsharp.slice","content":"dsharp.slice \nslice \nGet a slice of a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#softmax","title":"dsharp.softmax","content":"dsharp.softmax \nsoftmax \nApplies a softmax function. \nSoftmax is defined as: \\text{Softmax}(x_{i}) = \\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#softplus","title":"dsharp.softplus","content":"dsharp.softplus \nsoftplus \nApplies the softplus function element-wise. \n\\[\\text{Softplus}(x) = \\frac{1}{\\beta} * \\log(1 \u002B \\exp(\\beta * x))\\]"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#split","title":"dsharp.split","content":"dsharp.split \nsplit \nSplits the tensor into chunks. The tensor will be split into sizes.Length chunks each with a corresponding size in the given dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sqrt","title":"dsharp.sqrt","content":"dsharp.sqrt \nsqrt \nReturns a new tensor with the square-root of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#squeeze","title":"dsharp.squeeze","content":"dsharp.squeeze \nsqueeze \nReturns a tensor with all the dimensions of input of size 1 removed. \nIf the tensor has a batch dimension of size 1, then squeeze(input) will also remove the batch dimension, which can lead to unexpected errors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#stack","title":"dsharp.stack","content":"dsharp.stack \nstack \nConcatenates sequence of tensors along a new dimension \nAll tensors need to be of the same size."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#standardize","title":"dsharp.standardize","content":"dsharp.standardize \nstandardize \nReturns the tensor after standardization (z-score normalization)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#std","title":"dsharp.std","content":"dsharp.std \nstd \nReturns the standard deviation of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. \n\n  If keepdim is true, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\n  If unbiased is False, then the standard deviation will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#std","title":"dsharp.std","content":"dsharp.std \nstd \nReturns the standard deviation of all elements in the input tensor. \n\n  If unbiased is False, then the standard deviation will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sub","title":"dsharp.sub","content":"dsharp.sub \nsub \nReturn the element-wise subtraction of the two tensors."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sum","title":"dsharp.sum","content":"dsharp.sum \nsum \nReturns the sum of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. \n\n  If keepdim is true, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#sum","title":"dsharp.sum","content":"dsharp.sum \nsum \nReturns the sum of all elements in the input tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#tan","title":"dsharp.tan","content":"dsharp.tan \ntan \nReturns a new tensor with the tangent of the elements of input"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#tanh","title":"dsharp.tanh","content":"dsharp.tanh \ntanh \nReturns a new tensor with the hyperbolic tangent of the elements of input."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#tensor","title":"dsharp.tensor","content":"dsharp.tensor \ntensor \n\n Creates a new tensor from the given data, using the given element type and configuration.\n  \n\n  The data is converted from arrays, sequences, lists and tuples of primitive values to a tensor whose shape is inferred from the data.\n The fastest creation technique is a one dimensional array matching the desired dtype. Then use \u0027view\u0027 to reshape."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#toImage","title":"dsharp.toImage","content":"dsharp.toImage \ntoImage \nConvert tensor to an image tensor with shape Channels x Height x Width \nIf the input tensor has 4 dimensions, then make a single image grid."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#toImageString","title":"dsharp.toImageString","content":"dsharp.toImageString \ntoImageString \nConvert tensor to a grayscale image tensor and return a string representation approximating grayscale values"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#trace","title":"dsharp.trace","content":"dsharp.trace \ntrace \nReturns the sum of the elements of the diagonal of the input 2-D matrix"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#transpose","title":"dsharp.transpose","content":"dsharp.transpose \ntranspose \nReturns a tensor that is a transposed version of input with dimensions 0 and 1 swapped."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#transpose","title":"dsharp.transpose","content":"dsharp.transpose \ntranspose \nReturns a tensor that is a transposed version of input. The given dimensions dim0 and dim1 are swapped."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#undilate","title":"dsharp.undilate","content":"dsharp.undilate \nundilate \nReverse the dilation of the tensor in using the given dilations in each corresponding dimension."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#unflatten","title":"dsharp.unflatten","content":"dsharp.unflatten \nunflatten \nUnflattens a tensor dimension by expanding it to the given shape."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#unsqueeze","title":"dsharp.unsqueeze","content":"dsharp.unsqueeze \nunsqueeze \nReturns a new tensor with a dimension of size one inserted at the specified position"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#unsqueezeAs","title":"dsharp.unsqueezeAs","content":"dsharp.unsqueezeAs \nunsqueezeAs \nReturns a new tensor with dimensions of size one appended to the end until the number of dimensions is the same as the other tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#unstack","title":"dsharp.unstack","content":"dsharp.unstack \nunstack \nRemoves a tensor dimension"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#var","title":"dsharp.var","content":"dsharp.var \nvar \nReturns the variance of each row of the input tensor in the given dimension dim. If dim is a list of dimensions, reduce over all of them. \n\n  If keepdim is true, the output tensor is of the same size as input except in the dimension(s) dim where it is of size 1. Otherwise, dim is squeezed, resulting in the output tensor having 1 (or len(dim)) fewer dimension(s).\n  If unbiased is False, then the variance will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#var","title":"dsharp.var","content":"dsharp.var \nvar \nReturns the variance of all elements in the input tensor. \n\n  If unbiased is False, then the variance will be calculated via the biased estimator. Otherwise, Bessel\u2019s correction will be used.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#view","title":"dsharp.view","content":"dsharp.view \nview \nReturns a new tensor with the same data as the self tensor but of a different shape. \nThe returned tensor shares the same data and must have the same number of elements, but may have a different size. For a tensor to be viewed, the new view size must be compatible with its original size.\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#view","title":"dsharp.view","content":"dsharp.view \nview \nReturns a new tensor with the same data as the self tensor but of a different shape. \nThe returned tensor shares the same data and must have the same number of elements, but may have a different size. For a tensor to be viewed, the new view size must be compatible with its original size.\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#viewAs","title":"dsharp.viewAs","content":"dsharp.viewAs \nviewAs \nView this tensor as the same size as other. \nThe returned tensor shares the same data and must have the same number of elements, but may have a different size. For a tensor to be viewed, the new view size must be compatible with its original size.\n   The returned tensor shares the same data and must have the same number of elements, but may have a different size. \n   For a tensor to be viewed, the new view size must be compatible with its original size and stride, i.e., each new view dimension must either be a subspace of an original dimension,\n   or only span across original dimensions \\(d, d\u002B1, \\dots, d\u002Bkd,d\u002B1,\u2026,d\u002Bk\\) that satisfy the following contiguity-like condition that\n   \\(\\forall i = d, \\dots, d\u002Bk-1\u2200i=d,\u2026,d\u002Bk\u22121 ,\\) \\[\\text{stride}[i] = \\text{stride}[i\u002B1] \\times \\text{size}[i\u002B1]\\]\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zero","title":"dsharp.zero","content":"dsharp.zero \nzero \nGet the scalar zero tensor for the given configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zeroCreate","title":"dsharp.zeroCreate","content":"dsharp.zeroCreate \nzeroCreate \nCreate a new 1D tensor using \u00270\u0027 as value for each element."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zeroLike","title":"dsharp.zeroLike","content":"dsharp.zeroLike \nzeroLike \nReturns the \u00270\u0027 scalar tensor with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zeros","title":"dsharp.zeros","content":"dsharp.zeros \nzeros \nReturns a new tensor filled with \u00270\u0027 values for the given length, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zeros","title":"dsharp.zeros","content":"dsharp.zeros \nzeros \nReturns a new tensor filled with \u00270\u0027 values for the given shape, element type and configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#zerosLike","title":"dsharp.zerosLike","content":"dsharp.zerosLike \nzerosLike \nReturns a new tensor filled with \u00270\u0027 values with characteristics based on the input tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-dsharp.html#version","title":"dsharp.version","content":"dsharp.version \nversion \nReturns the version of the DiffSharp.Core assembly."},{"uri":"https://diffsharp.github.io/reference/diffsharp-scalar.html","title":"scalar","content":"scalar \n\n Represents a scalar on the DiffSharp programming model\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageextensions.html","title":"ImageExtensions","content":"ImageExtensions \n \nImageExtensions.saveImage \nsaveImage \nImageExtensions.loadImage \nloadImage \nImageExtensions.loadImage \nloadImage \nImageExtensions.saveImage \nsaveImage"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageextensions.html#saveImage","title":"ImageExtensions.saveImage","content":"ImageExtensions.saveImage \nsaveImage \nSave tensor to an image file using png or jpg format"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageextensions.html#loadImage","title":"ImageExtensions.loadImage","content":"ImageExtensions.loadImage \nloadImage \nLoad an image file and return it as a tensor"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageextensions.html#loadImage","title":"ImageExtensions.loadImage","content":"ImageExtensions.loadImage \nloadImage \nLoad an image file as a tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageextensions.html#saveImage","title":"ImageExtensions.saveImage","content":"ImageExtensions.saveImage \nsaveImage \nSave a given Tensor into an image file. \nIf the input tensor has 4 dimensions, then make a single image grid."},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageutil.html","title":"ImageUtil","content":"ImageUtil \n\n Contains auto-opened utilities related to the DiffSharp programming model.\n \nImageUtil.saveImage \nsaveImage \nImageUtil.loadImage \nloadImage"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageutil.html#saveImage","title":"ImageUtil.saveImage","content":"ImageUtil.saveImage \nsaveImage \n\n Saves the given pixel array to a file and optionally resizes it in the process. Resizing uses bicubic interpolation. Supports .png and .jpg formats.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-imageutil.html#loadImage","title":"ImageUtil.loadImage","content":"ImageUtil.loadImage \nloadImage \n\n Loads a pixel array from a file and optionally resizes it in the process. Resizing uses bicubic interpolation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html","title":"BackendTensorStatics","content":"BackendTensorStatics \n\n   Represents the static functionality for tensors implemented by a DiffSharp backend.\n  \nBackendTensorStatics.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBackendTensorStatics.CreateFromFlatArray \nCreateFromFlatArray \nBackendTensorStatics.Empty \nEmpty \nBackendTensorStatics.Full \nFull \nBackendTensorStatics.GetDevices \nGetDevices \nBackendTensorStatics.IsDeviceTypeAvailable \nIsDeviceTypeAvailable \nBackendTensorStatics.One \nOne \nBackendTensorStatics.Ones \nOnes \nBackendTensorStatics.Random \nRandom \nBackendTensorStatics.RandomInt \nRandomInt \nBackendTensorStatics.RandomNormal \nRandomNormal \nBackendTensorStatics.Seed \nSeed \nBackendTensorStatics.Zero \nZero \nBackendTensorStatics.Zeros \nZeros \nBackendTensorStatics.Get \nGet \nBackendTensorStatics.Seed \nSeed"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#\u0060\u0060.ctor\u0060\u0060","title":"BackendTensorStatics.\u0060\u0060.ctor\u0060\u0060","content":"BackendTensorStatics.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#CreateFromFlatArray","title":"BackendTensorStatics.CreateFromFlatArray","content":"BackendTensorStatics.CreateFromFlatArray \nCreateFromFlatArray \n\n Create a tensor of appropriate dtype from a scalar or array of appropriate values.\n A backend type is delivered consistent with in-memory data - a type for dtype Int32 gets int32 data etc.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Empty","title":"BackendTensorStatics.Empty","content":"BackendTensorStatics.Empty \nEmpty \n\n Gets a tensor filled with arbitrary values for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Full","title":"BackendTensorStatics.Full","content":"BackendTensorStatics.Full \nFull \n\n Gets a tensor filled with the given value for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#GetDevices","title":"BackendTensorStatics.GetDevices","content":"BackendTensorStatics.GetDevices \nGetDevices \n\n Gets the devices supported by this backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#IsDeviceTypeAvailable","title":"BackendTensorStatics.IsDeviceTypeAvailable","content":"BackendTensorStatics.IsDeviceTypeAvailable \nIsDeviceTypeAvailable \n\n Indicates if a device type is supported by this backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#One","title":"BackendTensorStatics.One","content":"BackendTensorStatics.One \nOne \n\n Gets the scalar 1 tensor for the given device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Ones","title":"BackendTensorStatics.Ones","content":"BackendTensorStatics.Ones \nOnes \n\n Gets a tensor filled with ones for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Random","title":"BackendTensorStatics.Random","content":"BackendTensorStatics.Random \nRandom \n\n Gets a tensor filled with random values for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#RandomInt","title":"BackendTensorStatics.RandomInt","content":"BackendTensorStatics.RandomInt \nRandomInt \n\n Gets a tensor filled with random integers from the given range for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#RandomNormal","title":"BackendTensorStatics.RandomNormal","content":"BackendTensorStatics.RandomNormal \nRandomNormal \n\n Gets a tensor filled with random values from the normal distribution for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Seed","title":"BackendTensorStatics.Seed","content":"BackendTensorStatics.Seed \nSeed \n\n Sets the seed for the default random number generator of the backend\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Zero","title":"BackendTensorStatics.Zero","content":"BackendTensorStatics.Zero \nZero \n\n Gets the scalar 0 tensor for the given device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Zeros","title":"BackendTensorStatics.Zeros","content":"BackendTensorStatics.Zeros \nZeros \n\n Gets a tensor filled with zeros for the given shape and device\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Get","title":"BackendTensorStatics.Get","content":"BackendTensorStatics.Get \nGet \n\n Get the backend implementation for the given tensor element type and backend.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-backendtensorstatics.html#Seed","title":"BackendTensorStatics.Seed","content":"BackendTensorStatics.Seed \nSeed \n\n Seed all backends with the given random seed, or a new seed based on the current time\n if no seed is specified.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html","title":"RawTensor","content":"RawTensor \n\n   Represents a raw (i.e. non-differentiable immutable) tensor implemented by a DiffSharp backend.\n  \n\n  Each backend will provide one of more .NET implementations of this type, which may in turn\n  wrap handles to native implementations.\n  \nRawTensor.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRawTensor.AbsInPlace \nAbsInPlace \nRawTensor.AbsT \nAbsT \nRawTensor.AcosInPlace \nAcosInPlace \nRawTensor.AcosT \nAcosT \nRawTensor.AddInPlace \nAddInPlace \nRawTensor.AddScalarInPlace \nAddScalarInPlace \nRawTensor.AddSliceInPlace \nAddSliceInPlace \nRawTensor.AddTT \nAddTT \nRawTensor.AddTT0 \nAddTT0 \nRawTensor.AddTTSlice \nAddTTSlice \nRawTensor.AllClose \nAllClose \nRawTensor.AsinInPlace \nAsinInPlace \nRawTensor.AsinT \nAsinT \nRawTensor.AtanInPlace \nAtanInPlace \nRawTensor.AtanT \nAtanT \nRawTensor.AvgPool1D \nAvgPool1D \nRawTensor.AvgPool2D \nAvgPool2D \nRawTensor.AvgPool3D \nAvgPool3D \nRawTensor.AvgPoolReverse1D \nAvgPoolReverse1D \nRawTensor.AvgPoolReverse2D \nAvgPoolReverse2D \nRawTensor.AvgPoolReverse3D \nAvgPoolReverse3D \nRawTensor.BMMTT \nBMMTT \nRawTensor.Cast \nCast \nRawTensor.CatTs \nCatTs \nRawTensor.CeilInPlace \nCeilInPlace \nRawTensor.CeilT \nCeilT \nRawTensor.ClampInPlace \nClampInPlace \nRawTensor.ClampT \nClampT \nRawTensor.Clone \nClone \nRawTensor.ComputeHash \nComputeHash \nRawTensor.Conv1D \nConv1D \nRawTensor.Conv2D \nConv2D \nRawTensor.Conv3D \nConv3D \nRawTensor.CosInPlace \nCosInPlace \nRawTensor.CosT \nCosT \nRawTensor.CoshInPlace \nCoshInPlace \nRawTensor.CoshT \nCoshT \nRawTensor.CreateLike \nCreateLike \nRawTensor.DetT \nDetT \nRawTensor.DilateT \nDilateT \nRawTensor.DivFromT0T \nDivFromT0T \nRawTensor.DivInPlace \nDivInPlace \nRawTensor.DivScalarInPlace \nDivScalarInPlace \nRawTensor.DivTT \nDivTT \nRawTensor.DivTT0 \nDivTT0 \nRawTensor.EmptyLike \nEmptyLike \nRawTensor.EqInPlace \nEqInPlace \nRawTensor.EqTT \nEqTT \nRawTensor.Equals \nEquals \nRawTensor.ExpInPlace \nExpInPlace \nRawTensor.ExpT \nExpT \nRawTensor.Expand \nExpand \nRawTensor.FlipT \nFlipT \nRawTensor.FloorInPlace \nFloorInPlace \nRawTensor.FloorT \nFloorT \nRawTensor.FullLike \nFullLike \nRawTensor.GatherT \nGatherT \nRawTensor.GeInPlace \nGeInPlace \nRawTensor.GeTT \nGeTT \nRawTensor.GetItem \nGetItem \nRawTensor.GetSlice \nGetSlice \nRawTensor.GtInPlace \nGtInPlace \nRawTensor.GtTT \nGtTT \nRawTensor.InverseT \nInverseT \nRawTensor.IsInfT \nIsInfT \nRawTensor.IsNaNT \nIsNaNT \nRawTensor.LeInPlace \nLeInPlace \nRawTensor.LeTT \nLeTT \nRawTensor.Log10InPlace \nLog10InPlace \nRawTensor.Log10T \nLog10T \nRawTensor.LogInPlace \nLogInPlace \nRawTensor.LogT \nLogT \nRawTensor.LtInPlace \nLtInPlace \nRawTensor.LtTT \nLtTT \nRawTensor.MatMulInPlace \nMatMulInPlace \nRawTensor.MatMulTT \nMatMulTT \nRawTensor.MaxIndexT \nMaxIndexT \nRawTensor.MaxPool1D \nMaxPool1D \nRawTensor.MaxPool2D \nMaxPool2D \nRawTensor.MaxPool3D \nMaxPool3D \nRawTensor.MaxReduceT \nMaxReduceT \nRawTensor.MaxUnpool1D \nMaxUnpool1D \nRawTensor.MaxUnpool2D \nMaxUnpool2D \nRawTensor.MaxUnpool3D \nMaxUnpool3D \nRawTensor.MinIndexT \nMinIndexT \nRawTensor.MinReduceT \nMinReduceT \nRawTensor.MoveTo \nMoveTo \nRawTensor.MulInPlace \nMulInPlace \nRawTensor.MulScalarInPlace \nMulScalarInPlace \nRawTensor.MulTT \nMulTT \nRawTensor.MulTT0 \nMulTT0 \nRawTensor.NegInPlace \nNegInPlace \nRawTensor.NegT \nNegT \nRawTensor.NeqInPlace \nNeqInPlace \nRawTensor.NeqTT \nNeqTT \nRawTensor.OneLike \nOneLike \nRawTensor.OnesInPlace \nOnesInPlace \nRawTensor.OnesLike \nOnesLike \nRawTensor.PermuteT \nPermuteT \nRawTensor.PowFromT0T \nPowFromT0T \nRawTensor.PowInPlace \nPowInPlace \nRawTensor.PowScalarInPlace \nPowScalarInPlace \nRawTensor.PowTT \nPowTT \nRawTensor.PowTT0 \nPowTT0 \nRawTensor.Print \nPrint \nRawTensor.RandomInPlace \nRandomInPlace \nRawTensor.RandomIntInPlace \nRandomIntInPlace \nRawTensor.RandomIntLike \nRandomIntLike \nRawTensor.RandomLike \nRandomLike \nRawTensor.RandomNormalInPlace \nRandomNormalInPlace \nRawTensor.RandomNormalLike \nRandomNormalLike \nRawTensor.ReluInPlace \nReluInPlace \nRawTensor.ReluT \nReluT \nRawTensor.RoundInPlace \nRoundInPlace \nRawTensor.RoundT \nRoundT \nRawTensor.ScatterT \nScatterT \nRawTensor.SetMutable \nSetMutable \nRawTensor.SigmoidInPlace \nSigmoidInPlace \nRawTensor.SigmoidT \nSigmoidT \nRawTensor.SignInPlace \nSignInPlace \nRawTensor.SignT \nSignT \nRawTensor.SinInPlace \nSinInPlace \nRawTensor.SinT \nSinT \nRawTensor.SinhInPlace \nSinhInPlace \nRawTensor.SinhT \nSinhT \nRawTensor.SoftplusInPlace \nSoftplusInPlace \nRawTensor.SoftplusT \nSoftplusT \nRawTensor.SolveTT \nSolveTT \nRawTensor.SplitT \nSplitT \nRawTensor.SqrtInPlace \nSqrtInPlace \nRawTensor.SqrtT \nSqrtT \nRawTensor.SqueezeT \nSqueezeT \nRawTensor.StackTs \nStackTs \nRawTensor.SubFromT0T \nSubFromT0T \nRawTensor.SubInPlace \nSubInPlace \nRawTensor.SubScalarInPlace \nSubScalarInPlace \nRawTensor.SubTT \nSubTT \nRawTensor.SubTT0 \nSubTT0 \nRawTensor.SumT \nSumT \nRawTensor.SumTDim \nSumTDim \nRawTensor.TanInPlace \nTanInPlace \nRawTensor.TanT \nTanT \nRawTensor.TanhInPlace \nTanhInPlace \nRawTensor.TanhT \nTanhT \nRawTensor.ToArray \nToArray \nRawTensor.ToScalar \nToScalar \nRawTensor.ToValues \nToValues \nRawTensor.TransposeT \nTransposeT \nRawTensor.TransposeT2 \nTransposeT2 \nRawTensor.UndilateT \nUndilateT \nRawTensor.UnsqueezeT \nUnsqueezeT \nRawTensor.UnstackT \nUnstackT \nRawTensor.ViewT \nViewT \nRawTensor.ZeroLike \nZeroLike \nRawTensor.ZerosInPlace \nZerosInPlace \nRawTensor.ZerosLike \nZerosLike \nRawTensor.DeviceType \nDeviceType \nRawTensor.Backend \nBackend \nRawTensor.Nelement \nNelement \nRawTensor.IsMutable \nIsMutable \nRawTensor.Dtype \nDtype \nRawTensor.Device \nDevice \nRawTensor.Dim \nDim \nRawTensor.Shape \nShape \nRawTensor.Handle \nHandle \nRawTensor.Create \nCreate \nRawTensor.CreateFromFlatArray \nCreateFromFlatArray \nRawTensor.Empty \nEmpty \nRawTensor.Full \nFull \nRawTensor.One \nOne \nRawTensor.Ones \nOnes \nRawTensor.Random \nRandom \nRawTensor.RandomInt \nRandomInt \nRawTensor.RandomNormal \nRandomNormal \nRawTensor.Zero \nZero \nRawTensor.Zeros \nZeros"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#\u0060\u0060.ctor\u0060\u0060","title":"RawTensor.\u0060\u0060.ctor\u0060\u0060","content":"RawTensor.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AbsInPlace","title":"RawTensor.AbsInPlace","content":"RawTensor.AbsInPlace \nAbsInPlace \n\n Modifies the tensor by the element-wise absolute value of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AbsT","title":"RawTensor.AbsT","content":"RawTensor.AbsT \nAbsT \n\n Returns the element-wise absolute value of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AcosInPlace","title":"RawTensor.AcosInPlace","content":"RawTensor.AcosInPlace \nAcosInPlace \n\n Modifies the tensor by the element-wise cos of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AcosT","title":"RawTensor.AcosT","content":"RawTensor.AcosT \nAcosT \n\n Returns the element-wise cos of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddInPlace","title":"RawTensor.AddInPlace","content":"RawTensor.AddInPlace \nAddInPlace \n\n Modifies the tensor by the element-wise addition of the two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddScalarInPlace","title":"RawTensor.AddScalarInPlace","content":"RawTensor.AddScalarInPlace \nAddScalarInPlace \n\n Modifies the tensor by the element-wise addition of two scalars\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddSliceInPlace","title":"RawTensor.AddSliceInPlace","content":"RawTensor.AddSliceInPlace \nAddSliceInPlace \n\n Adds a slice of \u003Cc\u003Et2\u003C/c\u003E at the given location to the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddTT","title":"RawTensor.AddTT","content":"RawTensor.AddTT \nAddTT \n\n Returns the element-wise addition of the two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddTT0","title":"RawTensor.AddTT0","content":"RawTensor.AddTT0 \nAddTT0 \n\n Returns the element-wise addition of a tensor and a scalar\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AddTTSlice","title":"RawTensor.AddTTSlice","content":"RawTensor.AddTTSlice \nAddTTSlice \n\n Adds a slice of \u003Cc\u003Et2\u003C/c\u003E at the given location to the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AllClose","title":"RawTensor.AllClose","content":"RawTensor.AllClose \nAllClose \n\n Indicates if the two tensors have the same shape and element type, and all corresponding values\n are equal up to the given tolerances.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AsinInPlace","title":"RawTensor.AsinInPlace","content":"RawTensor.AsinInPlace \nAsinInPlace \n\n Modifies the tensor by the element-wise asin of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AsinT","title":"RawTensor.AsinT","content":"RawTensor.AsinT \nAsinT \n\n Returns the element-wise asin of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AtanInPlace","title":"RawTensor.AtanInPlace","content":"RawTensor.AtanInPlace \nAtanInPlace \n\n Modifies the tensor by the element-wise atan of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AtanT","title":"RawTensor.AtanT","content":"RawTensor.AtanT \nAtanT \n\n Returns the element-wise atan of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPool1D","title":"RawTensor.AvgPool1D","content":"RawTensor.AvgPool1D \nAvgPool1D \n\n Returns the 1D avgpool of a tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPool2D","title":"RawTensor.AvgPool2D","content":"RawTensor.AvgPool2D \nAvgPool2D \n\n Returns the 2D avgpool of a tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPool3D","title":"RawTensor.AvgPool3D","content":"RawTensor.AvgPool3D \nAvgPool3D \n\n Returns the 2D avgpool of a tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPoolReverse1D","title":"RawTensor.AvgPoolReverse1D","content":"RawTensor.AvgPoolReverse1D \nAvgPoolReverse1D \nReturns the reverse mode of a 1D avgpool of a tensor, apportioning each part of the adjoint equally to each corresponding input \nThe originalInput parameter is only used for shape information"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPoolReverse2D","title":"RawTensor.AvgPoolReverse2D","content":"RawTensor.AvgPoolReverse2D \nAvgPoolReverse2D \nReturns the reverse mode of a 2D avgpool of a tensor, apportioning each part of the adjoint equally to each corresponding input \nThe originalInput parameter is only used for shape information"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#AvgPoolReverse3D","title":"RawTensor.AvgPoolReverse3D","content":"RawTensor.AvgPoolReverse3D \nAvgPoolReverse3D \nReturns the reverse mode of a 3D avgpool of a tensor, apportioning each part of the adjoint equally to each corresponding input \nThe originalInput parameter is only used for shape information"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#BMMTT","title":"RawTensor.BMMTT","content":"RawTensor.BMMTT \nBMMTT \n\n Returns the batched matrix multiplication of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Cast","title":"RawTensor.Cast","content":"RawTensor.Cast \nCast \n\n Returns a tensor where the elements have each been cast to the given tensor element storage type.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CatTs","title":"RawTensor.CatTs","content":"RawTensor.CatTs \nCatTs \n\n Concatenate the given tensors along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CeilInPlace","title":"RawTensor.CeilInPlace","content":"RawTensor.CeilInPlace \nCeilInPlace \n\n Modifies the tensor by the element-wise integer ceiling of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CeilT","title":"RawTensor.CeilT","content":"RawTensor.CeilT \nCeilT \n\n Returns the element-wise integer ceiling of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ClampInPlace","title":"RawTensor.ClampInPlace","content":"RawTensor.ClampInPlace \nClampInPlace \n\n Modifies the tensor by with values constrained by the corresponding elements in the low/high tensors.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ClampT","title":"RawTensor.ClampT","content":"RawTensor.ClampT \nClampT \n\n Returns a tensor with values constrained by the corresponding elements in the low/high tensors.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Clone","title":"RawTensor.Clone","content":"RawTensor.Clone \nClone \n\n Clone the underlying storage of the tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ComputeHash","title":"RawTensor.ComputeHash","content":"RawTensor.ComputeHash \nComputeHash \n\n Returns a hash of the contents of the tensor. This operation may cause the\n tensor to be moved to the CPU, and its entire contents iterated.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Conv1D","title":"RawTensor.Conv1D","content":"RawTensor.Conv1D \nConv1D \n\n Returns the 1D convolution of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Conv2D","title":"RawTensor.Conv2D","content":"RawTensor.Conv2D \nConv2D \n\n Returns the 2D convolution of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Conv3D","title":"RawTensor.Conv3D","content":"RawTensor.Conv3D \nConv3D \n\n Returns the 3D convolution of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CosInPlace","title":"RawTensor.CosInPlace","content":"RawTensor.CosInPlace \nCosInPlace \n\n Modifies the tensor by the element-wise cosine of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CosT","title":"RawTensor.CosT","content":"RawTensor.CosT \nCosT \n\n Returns the element-wise cosine of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CoshInPlace","title":"RawTensor.CoshInPlace","content":"RawTensor.CoshInPlace \nCoshInPlace \n\n Modifies the tensor by the element-wise cosh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CoshT","title":"RawTensor.CoshT","content":"RawTensor.CoshT \nCoshT \n\n Returns the element-wise cosh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CreateLike","title":"RawTensor.CreateLike","content":"RawTensor.CreateLike \nCreateLike \n\n Gets a tensor filled with values drawn from the given .NET object for the\n given configuration settings, defaulting to the configuration settings of the object tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DetT","title":"RawTensor.DetT","content":"RawTensor.DetT \nDetT \n\n Returns the determinant of a square matrix\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DilateT","title":"RawTensor.DilateT","content":"RawTensor.DilateT \nDilateT \n\n Returns the dilation of the tensor using the given dilations parameters\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DivFromT0T","title":"RawTensor.DivFromT0T","content":"RawTensor.DivFromT0T \nDivFromT0T \n\n Returns the element-wise division of a scalar by a tensor, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DivInPlace","title":"RawTensor.DivInPlace","content":"RawTensor.DivInPlace \nDivInPlace \n\n Modifies the tensor by the element-wise division of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DivScalarInPlace","title":"RawTensor.DivScalarInPlace","content":"RawTensor.DivScalarInPlace \nDivScalarInPlace \n\n Modifies the tensor by the element-wise division of a tensor by a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DivTT","title":"RawTensor.DivTT","content":"RawTensor.DivTT \nDivTT \n\n Returns the element-wise division of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DivTT0","title":"RawTensor.DivTT0","content":"RawTensor.DivTT0 \nDivTT0 \n\n Returns the element-wise division of a tensor by a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#EmptyLike","title":"RawTensor.EmptyLike","content":"RawTensor.EmptyLike \nEmptyLike \n\n Gets a tensor filled with arbitrary values for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#EqInPlace","title":"RawTensor.EqInPlace","content":"RawTensor.EqInPlace \nEqInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#EqTT","title":"RawTensor.EqTT","content":"RawTensor.EqTT \nEqTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Equals","title":"RawTensor.Equals","content":"RawTensor.Equals \nEquals \n\n Compare two tensors for equality\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ExpInPlace","title":"RawTensor.ExpInPlace","content":"RawTensor.ExpInPlace \nExpInPlace \n\n Modifies the tensor by the element-wise natural exponentiation of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ExpT","title":"RawTensor.ExpT","content":"RawTensor.ExpT \nExpT \n\n Returns the element-wise natural exponentiation of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Expand","title":"RawTensor.Expand","content":"RawTensor.Expand \nExpand \n\n Expand the shape of the tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#FlipT","title":"RawTensor.FlipT","content":"RawTensor.FlipT \nFlipT \n\n Returns the flip of the tensor along the given dimensions \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#FloorInPlace","title":"RawTensor.FloorInPlace","content":"RawTensor.FloorInPlace \nFloorInPlace \n\n Modifies the tensor by the element-wise integer floor of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#FloorT","title":"RawTensor.FloorT","content":"RawTensor.FloorT \nFloorT \n\n Returns the element-wise integer floor of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#FullLike","title":"RawTensor.FullLike","content":"RawTensor.FullLike \nFullLike \n\n Gets a tensor filled with the given scalar value for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GatherT","title":"RawTensor.GatherT","content":"RawTensor.GatherT \nGatherT \n\n Returns a tensor selecting the given indices from the given dimension and stacking those in the order specified.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GeInPlace","title":"RawTensor.GeInPlace","content":"RawTensor.GeInPlace \nGeInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GeTT","title":"RawTensor.GeTT","content":"RawTensor.GeTT \nGeTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GetItem","title":"RawTensor.GetItem","content":"RawTensor.GetItem \nGetItem \n\n Gets a .NET object representing the value of the tensor at the given indexes\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GetSlice","title":"RawTensor.GetSlice","content":"RawTensor.GetSlice \nGetSlice \n Get a slice of the given tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GtInPlace","title":"RawTensor.GtInPlace","content":"RawTensor.GtInPlace \nGtInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#GtTT","title":"RawTensor.GtTT","content":"RawTensor.GtTT \nGtTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#InverseT","title":"RawTensor.InverseT","content":"RawTensor.InverseT \nInverseT \n\n Returns the inverse of a single square matrix (2d tensor) or a batch of square matrices (3d tensor)\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#IsInfT","title":"RawTensor.IsInfT","content":"RawTensor.IsInfT \nIsInfT \n\n Returns a boolean tensor where each element indicates if the corresponding element in the tensor is an infinity value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#IsNaNT","title":"RawTensor.IsNaNT","content":"RawTensor.IsNaNT \nIsNaNT \n\n Returns a boolean tensor where each element indicates if the corresponding element in the tensor is a NaN value\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LeInPlace","title":"RawTensor.LeInPlace","content":"RawTensor.LeInPlace \nLeInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LeTT","title":"RawTensor.LeTT","content":"RawTensor.LeTT \nLeTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Log10InPlace","title":"RawTensor.Log10InPlace","content":"RawTensor.Log10InPlace \nLog10InPlace \n\n Modifies the tensor by the element-wise base10 logarithm of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Log10T","title":"RawTensor.Log10T","content":"RawTensor.Log10T \nLog10T \n\n Returns the element-wise base10 logarithm of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LogInPlace","title":"RawTensor.LogInPlace","content":"RawTensor.LogInPlace \nLogInPlace \n\n Modifies the tensor by the element-wise natural logarithm of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LogT","title":"RawTensor.LogT","content":"RawTensor.LogT \nLogT \n\n Returns the element-wise natural logarithm of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LtInPlace","title":"RawTensor.LtInPlace","content":"RawTensor.LtInPlace \nLtInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#LtTT","title":"RawTensor.LtTT","content":"RawTensor.LtTT \nLtTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MatMulInPlace","title":"RawTensor.MatMulInPlace","content":"RawTensor.MatMulInPlace \nMatMulInPlace \n\n Modifies the tensor by the matrix multiplication of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MatMulTT","title":"RawTensor.MatMulTT","content":"RawTensor.MatMulTT \nMatMulTT \n\n Returns the matrix multiplication of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxIndexT","title":"RawTensor.MaxIndexT","content":"RawTensor.MaxIndexT \nMaxIndexT \n\n Gets the index of a maximum value of the tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxPool1D","title":"RawTensor.MaxPool1D","content":"RawTensor.MaxPool1D \nMaxPool1D \n\n Returns the 1D maxpool of a tensor and its chosen maximum indices\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxPool2D","title":"RawTensor.MaxPool2D","content":"RawTensor.MaxPool2D \nMaxPool2D \n\n Returns the 2D maxpool of a tensor and its chosen maximum indices\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxPool3D","title":"RawTensor.MaxPool3D","content":"RawTensor.MaxPool3D \nMaxPool3D \n\n Returns the 3D maxpool of a tensor and its chosen maximum indices\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxReduceT","title":"RawTensor.MaxReduceT","content":"RawTensor.MaxReduceT \nMaxReduceT \n\n Gets a tensor containing values and indexes of a maximum value of the tensor reducing along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxUnpool1D","title":"RawTensor.MaxUnpool1D","content":"RawTensor.MaxUnpool1D \nMaxUnpool1D \n\n Returns the 1D maxunpool of a tensor using the given indices for locations of maximums\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxUnpool2D","title":"RawTensor.MaxUnpool2D","content":"RawTensor.MaxUnpool2D \nMaxUnpool2D \n\n Returns the 2D maxunpool of a tensor using the given indices for locations of maximums\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MaxUnpool3D","title":"RawTensor.MaxUnpool3D","content":"RawTensor.MaxUnpool3D \nMaxUnpool3D \n\n Returns the 3D maxunpool of a tensor using the given indices for locations of maximums\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MinIndexT","title":"RawTensor.MinIndexT","content":"RawTensor.MinIndexT \nMinIndexT \n\n Gets the index of a minimum value of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MinReduceT","title":"RawTensor.MinReduceT","content":"RawTensor.MinReduceT \nMinReduceT \n\n Gets a tensor containing values and indexes of a minimum value of the tensor reducing along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MoveTo","title":"RawTensor.MoveTo","content":"RawTensor.MoveTo \nMoveTo \n\n Returns a tensor moved to the given device.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MulInPlace","title":"RawTensor.MulInPlace","content":"RawTensor.MulInPlace \nMulInPlace \n\n Modifies the tensor by the element-wise multiplication of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MulScalarInPlace","title":"RawTensor.MulScalarInPlace","content":"RawTensor.MulScalarInPlace \nMulScalarInPlace \n\n Modifies the tensor by the element-wise multiplication of a tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MulTT","title":"RawTensor.MulTT","content":"RawTensor.MulTT \nMulTT \n\n Returns the element-wise multiplication of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#MulTT0","title":"RawTensor.MulTT0","content":"RawTensor.MulTT0 \nMulTT0 \n\n Returns the element-wise multiplication of a tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#NegInPlace","title":"RawTensor.NegInPlace","content":"RawTensor.NegInPlace \nNegInPlace \n\n Modifies the tensor by the element-wise negation of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#NegT","title":"RawTensor.NegT","content":"RawTensor.NegT \nNegT \n\n Returns the element-wise negation of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#NeqInPlace","title":"RawTensor.NeqInPlace","content":"RawTensor.NeqInPlace \nNeqInPlace \n\n Modifies the tensor by comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#NeqTT","title":"RawTensor.NeqTT","content":"RawTensor.NeqTT \nNeqTT \n\n Returns a boolean tensor comparing each element pairwise with the corresponding element in \u003Cc\u003Et2\u003C/c\u003E\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#OneLike","title":"RawTensor.OneLike","content":"RawTensor.OneLike \nOneLike \n\n Gets a scalar one tensor for the given configuration settings, defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#OnesInPlace","title":"RawTensor.OnesInPlace","content":"RawTensor.OnesInPlace \nOnesInPlace \n\n Modifies the tensor by setting all values to one\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#OnesLike","title":"RawTensor.OnesLike","content":"RawTensor.OnesLike \nOnesLike \n\n Gets a tensor filled with one values for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PermuteT","title":"RawTensor.PermuteT","content":"RawTensor.PermuteT \nPermuteT \n\n Returns a view of the original tensor with its dimensions permuted\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PowFromT0T","title":"RawTensor.PowFromT0T","content":"RawTensor.PowFromT0T \nPowFromT0T \n\n Returns the element-wise exponentiation of a scalar and a tensor, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PowInPlace","title":"RawTensor.PowInPlace","content":"RawTensor.PowInPlace \nPowInPlace \n\n Modifies the tensor by the element-wise exponentiation of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PowScalarInPlace","title":"RawTensor.PowScalarInPlace","content":"RawTensor.PowScalarInPlace \nPowScalarInPlace \n\n Modifies the tensor by the element-wise exponentiation of a tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PowTT","title":"RawTensor.PowTT","content":"RawTensor.PowTT \nPowTT \n\n Returns the element-wise exponentiation of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#PowTT0","title":"RawTensor.PowTT0","content":"RawTensor.PowTT0 \nPowTT0 \n\n Returns the element-wise exponentiation of a tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Print","title":"RawTensor.Print","content":"RawTensor.Print \nPrint \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomInPlace","title":"RawTensor.RandomInPlace","content":"RawTensor.RandomInPlace \nRandomInPlace \n\n Modifies the tensor by setting it to random values taken from a uniform distribution in [0, 1).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomIntInPlace","title":"RawTensor.RandomIntInPlace","content":"RawTensor.RandomIntInPlace \nRandomIntInPlace \n\n Gets a tensor filled with random integers from the given range \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomIntLike","title":"RawTensor.RandomIntLike","content":"RawTensor.RandomIntLike \nRandomIntLike \n\n Gets a tensor filled with random integer values from the given range for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomLike","title":"RawTensor.RandomLike","content":"RawTensor.RandomLike \nRandomLike \n\n Gets a tensor filled with random values for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomNormalInPlace","title":"RawTensor.RandomNormalInPlace","content":"RawTensor.RandomNormalInPlace \nRandomNormalInPlace \n\n Modifies the tensor by setting all values taken from a normal distribution with mean 0 and variance 1.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomNormalLike","title":"RawTensor.RandomNormalLike","content":"RawTensor.RandomNormalLike \nRandomNormalLike \n\n Gets a tensor filled with random values from a normal distribution for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ReluInPlace","title":"RawTensor.ReluInPlace","content":"RawTensor.ReluInPlace \nReluInPlace \n\n Modifies the tensor by the element-wise ReLU of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ReluT","title":"RawTensor.ReluT","content":"RawTensor.ReluT \nReluT \n\n Returns the element-wise ReLU of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RoundInPlace","title":"RawTensor.RoundInPlace","content":"RawTensor.RoundInPlace \nRoundInPlace \n\n Modifies the tensor by the element-wise rounding of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RoundT","title":"RawTensor.RoundT","content":"RawTensor.RoundT \nRoundT \n\n Returns the element-wise rounding of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ScatterT","title":"RawTensor.ScatterT","content":"RawTensor.ScatterT \nScatterT \n\n Returns a tensor with given destination shape where values are copied from the current tensor to locations specified by the dimension and indices.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SetMutable","title":"RawTensor.SetMutable","content":"RawTensor.SetMutable \nSetMutable \n\n A backdoor to switch this tensor to be usable as a mutable tensor. You should have a unique handle to\n this tensor for the entire time it is being used as a mutable tensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SigmoidInPlace","title":"RawTensor.SigmoidInPlace","content":"RawTensor.SigmoidInPlace \nSigmoidInPlace \n\n Modifies the tensor by the element-wise sigmoid of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SigmoidT","title":"RawTensor.SigmoidT","content":"RawTensor.SigmoidT \nSigmoidT \n\n Returns the element-wise sigmoid of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SignInPlace","title":"RawTensor.SignInPlace","content":"RawTensor.SignInPlace \nSignInPlace \n\n Modifies the tensor by the element-wise sign of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SignT","title":"RawTensor.SignT","content":"RawTensor.SignT \nSignT \n\n Returns the element-wise sign of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SinInPlace","title":"RawTensor.SinInPlace","content":"RawTensor.SinInPlace \nSinInPlace \n\n Modifies the tensor by the element-wise sine of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SinT","title":"RawTensor.SinT","content":"RawTensor.SinT \nSinT \n\n Returns the element-wise sine of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SinhInPlace","title":"RawTensor.SinhInPlace","content":"RawTensor.SinhInPlace \nSinhInPlace \n\n Modifies the tensor by the element-wise sinh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SinhT","title":"RawTensor.SinhT","content":"RawTensor.SinhT \nSinhT \n\n Returns the element-wise sinh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SoftplusInPlace","title":"RawTensor.SoftplusInPlace","content":"RawTensor.SoftplusInPlace \nSoftplusInPlace \n\n Modifies the tensor by the element-wise softplus of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SoftplusT","title":"RawTensor.SoftplusT","content":"RawTensor.SoftplusT \nSoftplusT \n\n Returns the element-wise softplus of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SolveTT","title":"RawTensor.SolveTT","content":"RawTensor.SolveTT \nSolveTT \n\n Returns the solution of single a square system of linear equations with a unique solution or a batch of several such systems\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SplitT","title":"RawTensor.SplitT","content":"RawTensor.SplitT \nSplitT \n\n Split the given tensors along the given dimensions\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SqrtInPlace","title":"RawTensor.SqrtInPlace","content":"RawTensor.SqrtInPlace \nSqrtInPlace \n\n Modifies the tensor by the element-wise square root of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SqrtT","title":"RawTensor.SqrtT","content":"RawTensor.SqrtT \nSqrtT \n\n Returns the element-wise square root of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SqueezeT","title":"RawTensor.SqueezeT","content":"RawTensor.SqueezeT \nSqueezeT \n\n Returns the tensor with the same values and the given dimension removed. The given dimension must be of size 1.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#StackTs","title":"RawTensor.StackTs","content":"RawTensor.StackTs \nStackTs \n\n Stack the given tensors along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SubFromT0T","title":"RawTensor.SubFromT0T","content":"RawTensor.SubFromT0T \nSubFromT0T \n\n Returns the element-wise subtraction of the scalar and a tensor, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SubInPlace","title":"RawTensor.SubInPlace","content":"RawTensor.SubInPlace \nSubInPlace \n\n Modifies the tensor by the element-wise subtraction of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SubScalarInPlace","title":"RawTensor.SubScalarInPlace","content":"RawTensor.SubScalarInPlace \nSubScalarInPlace \n\n Modifies the tensor by the element-wise subtraction of the tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SubTT","title":"RawTensor.SubTT","content":"RawTensor.SubTT \nSubTT \n\n Returns the element-wise subtraction of two tensors\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SubTT0","title":"RawTensor.SubTT0","content":"RawTensor.SubTT0 \nSubTT0 \n\n Returns the element-wise subtraction of the tensor and a scalar, where the scalar is logically\n broadcast to the same shape as the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SumT","title":"RawTensor.SumT","content":"RawTensor.SumT \nSumT \n\n Returns the scalar tensor for the summation of all elements in the tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#SumTDim","title":"RawTensor.SumTDim","content":"RawTensor.SumTDim \nSumTDim \n\n Returns the tensor representing the summation of the tensor along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TanInPlace","title":"RawTensor.TanInPlace","content":"RawTensor.TanInPlace \nTanInPlace \n\n Modifies the tensor by the element-wise tangent of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TanT","title":"RawTensor.TanT","content":"RawTensor.TanT \nTanT \n\n Returns the element-wise tangent of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TanhInPlace","title":"RawTensor.TanhInPlace","content":"RawTensor.TanhInPlace \nTanhInPlace \n\n Modifies the tensor by the element-wise tanh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TanhT","title":"RawTensor.TanhT","content":"RawTensor.TanhT \nTanhT \n\n Returns the element-wise tanh of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ToArray","title":"RawTensor.ToArray","content":"RawTensor.ToArray \nToArray \n\n Returns a .NET array object for the values of a non-scalar tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ToScalar","title":"RawTensor.ToScalar","content":"RawTensor.ToScalar \nToScalar \n\n Gets a .NET object representing the value of a scalar tensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ToValues","title":"RawTensor.ToValues","content":"RawTensor.ToValues \nToValues \nGet a .NET object for all the values in the tensor. \nThe runtime type of the returned object is either a .NET scalar\n or array corresponding to the shape and element type of the tensor."},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TransposeT","title":"RawTensor.TransposeT","content":"RawTensor.TransposeT \nTransposeT \n\n Returns the transpose of the tensor between the given dimensions\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#TransposeT2","title":"RawTensor.TransposeT2","content":"RawTensor.TransposeT2 \nTransposeT2 \n\n Returns the transpose of a 2D tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#UndilateT","title":"RawTensor.UndilateT","content":"RawTensor.UndilateT \nUndilateT \n\n Returns the reverse of the dilation of the tensor using the given dilations parameters\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#UnsqueezeT","title":"RawTensor.UnsqueezeT","content":"RawTensor.UnsqueezeT \nUnsqueezeT \n\n Returns the tensor with the same values and a dimension of size 1 inserted before the given dimension.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#UnstackT","title":"RawTensor.UnstackT","content":"RawTensor.UnstackT \nUnstackT \n\n Unstack the given tensors along the given dimension\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ViewT","title":"RawTensor.ViewT","content":"RawTensor.ViewT \nViewT \n\n Returns the tensor with the same values viewed as a different shape\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ZeroLike","title":"RawTensor.ZeroLike","content":"RawTensor.ZeroLike \nZeroLike \n\n Gets a zero tensor for the given configuration settings, defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ZerosInPlace","title":"RawTensor.ZerosInPlace","content":"RawTensor.ZerosInPlace \nZerosInPlace \n\n Modifies the tensor by setting all values to zero\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#ZerosLike","title":"RawTensor.ZerosLike","content":"RawTensor.ZerosLike \nZerosLike \n\n Gets a tensor filled with zero values for the given shape and configuration settings,\n defaulting to the configuration settings of the object tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#DeviceType","title":"RawTensor.DeviceType","content":"RawTensor.DeviceType \nDeviceType \n\n Gets the device type for the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Backend","title":"RawTensor.Backend","content":"RawTensor.Backend \nBackend \n\n Gets the backend for the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Nelement","title":"RawTensor.Nelement","content":"RawTensor.Nelement \nNelement \n\n Gets the number of elements in the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#IsMutable","title":"RawTensor.IsMutable","content":"RawTensor.IsMutable \nIsMutable \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Dtype","title":"RawTensor.Dtype","content":"RawTensor.Dtype \nDtype \n\n Gets the element storage type for the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Device","title":"RawTensor.Device","content":"RawTensor.Device \nDevice \n\n Gets the device for the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Dim","title":"RawTensor.Dim","content":"RawTensor.Dim \nDim \n\n Gets the dimensionality of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Shape","title":"RawTensor.Shape","content":"RawTensor.Shape \nShape \n\n Gets the shape of the tensor\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Handle","title":"RawTensor.Handle","content":"RawTensor.Handle \nHandle \n\n Gets a handle to the underlying representation of the the tensor. For example, if the Torch\n backend is used this will be the corresponding TorchSharp TorchTensor.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Create","title":"RawTensor.Create","content":"RawTensor.Create \nCreate \n\n   Gets a tensor filled with values drawn from the given .NET object.\n  \n\n  The value may be a scalar, an array, or an array of tupled objects. If the \u003Ccode\u003Edtype\u003C/code\u003E is not specified\n  then it is inferred from the .NET type of the object.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#CreateFromFlatArray","title":"RawTensor.CreateFromFlatArray","content":"RawTensor.CreateFromFlatArray \nCreateFromFlatArray \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Empty","title":"RawTensor.Empty","content":"RawTensor.Empty \nEmpty \n\n Gets a tensor containing arbitrary values for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Full","title":"RawTensor.Full","content":"RawTensor.Full \nFull \n\n Gets a tensor filled with the given value for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#One","title":"RawTensor.One","content":"RawTensor.One \nOne \n\n Gets the scalar 1 tensor for the given configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Ones","title":"RawTensor.Ones","content":"RawTensor.Ones \nOnes \n\n Gets a tensor filled with 1 values for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Random","title":"RawTensor.Random","content":"RawTensor.Random \nRandom \n\n Gets a tensor filled with random values for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomInt","title":"RawTensor.RandomInt","content":"RawTensor.RandomInt \nRandomInt \n\n Gets a tensor filled with random integer values from the given range for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#RandomNormal","title":"RawTensor.RandomNormal","content":"RawTensor.RandomNormal \nRandomNormal \n\n Gets a tensor filled with random values from the normal distribution for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Zero","title":"RawTensor.Zero","content":"RawTensor.Zero \nZero \n\n Gets the scalar zero tensor for the given configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-backends-rawtensor.html#Zeros","title":"RawTensor.Zeros","content":"RawTensor.Zeros \nZeros \n\n Gets the zero tensor for the given shape and configuration\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataloader.html","title":"DataLoader","content":"DataLoader \n \nDataLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDataLoader.batch \nbatch \nDataLoader.epoch \nepoch \nDataLoader.length \nlength"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataloader.html#\u0060\u0060.ctor\u0060\u0060","title":"DataLoader.\u0060\u0060.ctor\u0060\u0060","content":"DataLoader.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataloader.html#batch","title":"DataLoader.batch","content":"DataLoader.batch \nbatch \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataloader.html#epoch","title":"DataLoader.epoch","content":"DataLoader.epoch \nepoch \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataloader.html#length","title":"DataLoader.length","content":"DataLoader.length \nlength \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html","title":"Dataset","content":"Dataset \nRepresents a dataset. \nDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDataset.GetSlice \nGetSlice \nDataset.filter \nfilter \nDataset.item \nitem \nDataset.loader \nloader \nDataset.length \nlength \nDataset.Item \nItem"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#\u0060\u0060.ctor\u0060\u0060","title":"Dataset.\u0060\u0060.ctor\u0060\u0060","content":"Dataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#GetSlice","title":"Dataset.GetSlice","content":"Dataset.GetSlice \nGetSlice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#filter","title":"Dataset.filter","content":"Dataset.filter \nfilter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#item","title":"Dataset.item","content":"Dataset.item \nitem \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#loader","title":"Dataset.loader","content":"Dataset.loader \nloader \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#length","title":"Dataset.length","content":"Dataset.length \nlength \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-dataset.html#Item","title":"Dataset.Item","content":"Dataset.Item \nItem \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datasetsubset.html","title":"DatasetSubset","content":"DatasetSubset \n \nDatasetSubset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datasetsubset.html#\u0060\u0060.ctor\u0060\u0060","title":"DatasetSubset.\u0060\u0060.ctor\u0060\u0060","content":"DatasetSubset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-tensordataset.html","title":"TensorDataset","content":"TensorDataset \n \nTensorDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-tensordataset.html#\u0060\u0060.ctor\u0060\u0060","title":"TensorDataset.\u0060\u0060.ctor\u0060\u0060","content":"TensorDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html","title":"TextDataset","content":"TextDataset \n \nTextDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTextDataset.charToIndex \ncharToIndex \nTextDataset.indexToChar \nindexToChar \nTextDataset.tensorToText \ntensorToText \nTextDataset.textToTensor \ntextToTensor \nTextDataset.numChars \nnumChars \nTextDataset.chars \nchars"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#\u0060\u0060.ctor\u0060\u0060","title":"TextDataset.\u0060\u0060.ctor\u0060\u0060","content":"TextDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#charToIndex","title":"TextDataset.charToIndex","content":"TextDataset.charToIndex \ncharToIndex \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#indexToChar","title":"TextDataset.indexToChar","content":"TextDataset.indexToChar \nindexToChar \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#tensorToText","title":"TextDataset.tensorToText","content":"TextDataset.tensorToText \ntensorToText \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#textToTensor","title":"TextDataset.textToTensor","content":"TextDataset.textToTensor \ntextToTensor \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#numChars","title":"TextDataset.numChars","content":"TextDataset.numChars \nnumChars \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-textdataset.html#chars","title":"TextDataset.chars","content":"TextDataset.chars \nchars \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datautil.html","title":"DataUtil","content":"DataUtil \n\n Contains auto-opened utilities related to the DiffSharp programming model.\n \nDataUtil.download \ndownload \nDataUtil.extractTarStream \nextractTarStream \nDataUtil.extractTarGz \nextractTarGz"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datautil.html#download","title":"DataUtil.download","content":"DataUtil.download \ndownload \n\n Synchronously downloads the given URL to the given local file.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datautil.html#extractTarStream","title":"DataUtil.extractTarStream","content":"DataUtil.extractTarStream \nextractTarStream \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-datautil.html#extractTarGz","title":"DataUtil.extractTarGz","content":"DataUtil.extractTarGz \nextractTarGz \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar10.html","title":"CIFAR10","content":"CIFAR10 \n \nCIFAR10.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCIFAR10.classNames \nclassNames \nCIFAR10.classes \nclasses"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar10.html#\u0060\u0060.ctor\u0060\u0060","title":"CIFAR10.\u0060\u0060.ctor\u0060\u0060","content":"CIFAR10.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar10.html#classNames","title":"CIFAR10.classNames","content":"CIFAR10.classNames \nclassNames \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar10.html#classes","title":"CIFAR10.classes","content":"CIFAR10.classes \nclasses \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar100.html","title":"CIFAR100","content":"CIFAR100 \n \nCIFAR100.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCIFAR100.classNames \nclassNames \nCIFAR100.classes \nclasses"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar100.html#\u0060\u0060.ctor\u0060\u0060","title":"CIFAR100.\u0060\u0060.ctor\u0060\u0060","content":"CIFAR100.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar100.html#classNames","title":"CIFAR100.classNames","content":"CIFAR100.classNames \nclassNames \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-cifar100.html#classes","title":"CIFAR100.classes","content":"CIFAR100.classes \nclasses \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-imagedataset.html","title":"ImageDataset","content":"ImageDataset \n \nImageDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nImageDataset.classNames \nclassNames \nImageDataset.classes \nclasses"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-imagedataset.html#\u0060\u0060.ctor\u0060\u0060","title":"ImageDataset.\u0060\u0060.ctor\u0060\u0060","content":"ImageDataset.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-imagedataset.html#classNames","title":"ImageDataset.classNames","content":"ImageDataset.classNames \nclassNames \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-imagedataset.html#classes","title":"ImageDataset.classes","content":"ImageDataset.classes \nclasses \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-mnist.html","title":"MNIST","content":"MNIST \n \nMNIST.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nMNIST.classNames \nclassNames \nMNIST.classes \nclasses"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-mnist.html#\u0060\u0060.ctor\u0060\u0060","title":"MNIST.\u0060\u0060.ctor\u0060\u0060","content":"MNIST.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-mnist.html#classNames","title":"MNIST.classNames","content":"MNIST.classNames \nclassNames \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-data-mnist.html#classes","title":"MNIST.classes","content":"MNIST.classes \nclasses \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-bernoulli.html","title":"Bernoulli","content":"Bernoulli \nRepresents a Bernoulli distribution. \nBernoulli.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBernoulli.logits \nlogits \nBernoulli.probs \nprobs"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-bernoulli.html#\u0060\u0060.ctor\u0060\u0060","title":"Bernoulli.\u0060\u0060.ctor\u0060\u0060","content":"Bernoulli.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-bernoulli.html#logits","title":"Bernoulli.logits","content":"Bernoulli.logits \nlogits \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-bernoulli.html#probs","title":"Bernoulli.probs","content":"Bernoulli.probs \nprobs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-categorical.html","title":"Categorical","content":"Categorical \nRepresents a Categorial distribution. \nCategorical.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCategorical.logits \nlogits \nCategorical.probs \nprobs"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-categorical.html#\u0060\u0060.ctor\u0060\u0060","title":"Categorical.\u0060\u0060.ctor\u0060\u0060","content":"Categorical.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-categorical.html#logits","title":"Categorical.logits","content":"Categorical.logits \nlogits \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-categorical.html#probs","title":"Categorical.probs","content":"Categorical.probs \nprobs \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-distribution-1.html","title":"Distribution\u003C\u0027T\u003E","content":"Distribution\u003C\u0027T\u003E \nRepresents a distribution. \nDistribution\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nDistribution\u003C\u0027T\u003E.logprob \nlogprob \nDistribution\u003C\u0027T\u003E.sample \nsample"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-distribution-1.html#\u0060\u0060.ctor\u0060\u0060","title":"Distribution\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"Distribution\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-distribution-1.html#logprob","title":"Distribution\u003C\u0027T\u003E.logprob","content":"Distribution\u003C\u0027T\u003E.logprob \nlogprob \nReturns the log-probability of the distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-distribution-1.html#sample","title":"Distribution\u003C\u0027T\u003E.sample","content":"Distribution\u003C\u0027T\u003E.sample \nsample \nSamples the distribution"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html","title":"Empirical\u003C\u0027T\u003E","content":"Empirical\u003C\u0027T\u003E \nRepresents an Empirical distribution. \nEmpirical\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nEmpirical\u003C\u0027T\u003E.GetSlice \nGetSlice \nEmpirical\u003C\u0027T\u003E.combineDuplicates \ncombineDuplicates \nEmpirical\u003C\u0027T\u003E.expectation \nexpectation \nEmpirical\u003C\u0027T\u003E.filter \nfilter \nEmpirical\u003C\u0027T\u003E.map \nmap \nEmpirical\u003C\u0027T\u003E.resample \nresample \nEmpirical\u003C\u0027T\u003E.sample \nsample \nEmpirical\u003C\u0027T\u003E.thin \nthin \nEmpirical\u003C\u0027T\u003E.unweighted \nunweighted \nEmpirical\u003C\u0027T\u003E.values \nvalues \nEmpirical\u003C\u0027T\u003E.max \nmax \nEmpirical\u003C\u0027T\u003E.valuesTensor \nvaluesTensor \nEmpirical\u003C\u0027T\u003E.min \nmin \nEmpirical\u003C\u0027T\u003E.isWeighted \nisWeighted \nEmpirical\u003C\u0027T\u003E.weights \nweights \nEmpirical\u003C\u0027T\u003E.mode \nmode \nEmpirical\u003C\u0027T\u003E.effectiveSampleSize \neffectiveSampleSize \nEmpirical\u003C\u0027T\u003E.length \nlength \nEmpirical\u003C\u0027T\u003E.stddev \nstddev \nEmpirical\u003C\u0027T\u003E.Item \nItem \nEmpirical\u003C\u0027T\u003E.variance \nvariance \nEmpirical\u003C\u0027T\u003E.mean \nmean \nEmpirical\u003C\u0027T\u003E.logWeights \nlogWeights"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#\u0060\u0060.ctor\u0060\u0060","title":"Empirical\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060","content":"Empirical\u003C\u0027T\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#GetSlice","title":"Empirical\u003C\u0027T\u003E.GetSlice","content":"Empirical\u003C\u0027T\u003E.GetSlice \nGetSlice \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#combineDuplicates","title":"Empirical\u003C\u0027T\u003E.combineDuplicates","content":"Empirical\u003C\u0027T\u003E.combineDuplicates \ncombineDuplicates \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#expectation","title":"Empirical\u003C\u0027T\u003E.expectation","content":"Empirical\u003C\u0027T\u003E.expectation \nexpectation \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#filter","title":"Empirical\u003C\u0027T\u003E.filter","content":"Empirical\u003C\u0027T\u003E.filter \nfilter \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#map","title":"Empirical\u003C\u0027T\u003E.map","content":"Empirical\u003C\u0027T\u003E.map \nmap \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#resample","title":"Empirical\u003C\u0027T\u003E.resample","content":"Empirical\u003C\u0027T\u003E.resample \nresample \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#sample","title":"Empirical\u003C\u0027T\u003E.sample","content":"Empirical\u003C\u0027T\u003E.sample \nsample \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#thin","title":"Empirical\u003C\u0027T\u003E.thin","content":"Empirical\u003C\u0027T\u003E.thin \nthin \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#unweighted","title":"Empirical\u003C\u0027T\u003E.unweighted","content":"Empirical\u003C\u0027T\u003E.unweighted \nunweighted \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#values","title":"Empirical\u003C\u0027T\u003E.values","content":"Empirical\u003C\u0027T\u003E.values \nvalues \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#max","title":"Empirical\u003C\u0027T\u003E.max","content":"Empirical\u003C\u0027T\u003E.max \nmax \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#valuesTensor","title":"Empirical\u003C\u0027T\u003E.valuesTensor","content":"Empirical\u003C\u0027T\u003E.valuesTensor \nvaluesTensor \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#min","title":"Empirical\u003C\u0027T\u003E.min","content":"Empirical\u003C\u0027T\u003E.min \nmin \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#isWeighted","title":"Empirical\u003C\u0027T\u003E.isWeighted","content":"Empirical\u003C\u0027T\u003E.isWeighted \nisWeighted \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#weights","title":"Empirical\u003C\u0027T\u003E.weights","content":"Empirical\u003C\u0027T\u003E.weights \nweights \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#mode","title":"Empirical\u003C\u0027T\u003E.mode","content":"Empirical\u003C\u0027T\u003E.mode \nmode \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#effectiveSampleSize","title":"Empirical\u003C\u0027T\u003E.effectiveSampleSize","content":"Empirical\u003C\u0027T\u003E.effectiveSampleSize \neffectiveSampleSize \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#length","title":"Empirical\u003C\u0027T\u003E.length","content":"Empirical\u003C\u0027T\u003E.length \nlength \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#stddev","title":"Empirical\u003C\u0027T\u003E.stddev","content":"Empirical\u003C\u0027T\u003E.stddev \nstddev \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#Item","title":"Empirical\u003C\u0027T\u003E.Item","content":"Empirical\u003C\u0027T\u003E.Item \nItem \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#variance","title":"Empirical\u003C\u0027T\u003E.variance","content":"Empirical\u003C\u0027T\u003E.variance \nvariance \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#mean","title":"Empirical\u003C\u0027T\u003E.mean","content":"Empirical\u003C\u0027T\u003E.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-empirical-1.html#logWeights","title":"Empirical\u003C\u0027T\u003E.logWeights","content":"Empirical\u003C\u0027T\u003E.logWeights \nlogWeights \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-normal.html","title":"Normal","content":"Normal \nRepresents a normal distribution with the given mean and standard deviation with the mean and standard deviation drawn fom the given tensors. \nNormal.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-normal.html#\u0060\u0060.ctor\u0060\u0060","title":"Normal.\u0060\u0060.ctor\u0060\u0060","content":"Normal.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html","title":"TensorDistribution","content":"TensorDistribution \n \nTensorDistribution.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nTensorDistribution.prob \nprob \nTensorDistribution.sample \nsample \nTensorDistribution.batchShape \nbatchShape \nTensorDistribution.stddev \nstddev \nTensorDistribution.variance \nvariance \nTensorDistribution.mean \nmean \nTensorDistribution.eventShape \neventShape"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#\u0060\u0060.ctor\u0060\u0060","title":"TensorDistribution.\u0060\u0060.ctor\u0060\u0060","content":"TensorDistribution.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#prob","title":"TensorDistribution.prob","content":"TensorDistribution.prob \nprob \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#sample","title":"TensorDistribution.sample","content":"TensorDistribution.sample \nsample \nSamples the distribution mutliple times"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#batchShape","title":"TensorDistribution.batchShape","content":"TensorDistribution.batchShape \nbatchShape \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#stddev","title":"TensorDistribution.stddev","content":"TensorDistribution.stddev \nstddev \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#variance","title":"TensorDistribution.variance","content":"TensorDistribution.variance \nvariance \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#mean","title":"TensorDistribution.mean","content":"TensorDistribution.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-tensordistribution.html#eventShape","title":"TensorDistribution.eventShape","content":"TensorDistribution.eventShape \neventShape \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-uniform.html","title":"Uniform","content":"Uniform \nRepresents a uniform distribution with low and high values drawn from the given tensors. \nUniform.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nUniform.high \nhigh \nUniform.range \nrange \nUniform.low \nlow"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-uniform.html#\u0060\u0060.ctor\u0060\u0060","title":"Uniform.\u0060\u0060.ctor\u0060\u0060","content":"Uniform.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-uniform.html#high","title":"Uniform.high","content":"Uniform.high \nhigh \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-uniform.html#range","title":"Uniform.range","content":"Uniform.range \nrange \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-distributions-uniform.html#low","title":"Uniform.low","content":"Uniform.low \nlow \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html","title":"RecurrentShape","content":"RecurrentShape \n \nRecurrentShape.RNNCell \nRNNCell \nRecurrentShape.RNNCellSequence \nRNNCellSequence \nRecurrentShape.RNNCellWithHidden \nRNNCellWithHidden \nRecurrentShape.RNNCellSequenceWithHidden \nRNNCellSequenceWithHidden \nRecurrentShape.RNN \nRNN \nRecurrentShape.RNNWithHidden \nRNNWithHidden \nRecurrentShape.LSTMCellWithHidden \nLSTMCellWithHidden \nRecurrentShape.LSTMCellSequenceWithHidden \nLSTMCellSequenceWithHidden \nRecurrentShape.LSTMWithHidden \nLSTMWithHidden"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNNCell","title":"RecurrentShape.RNNCell","content":"RecurrentShape.RNNCell \nRNNCell \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNNCellSequence","title":"RecurrentShape.RNNCellSequence","content":"RecurrentShape.RNNCellSequence \nRNNCellSequence \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNNCellWithHidden","title":"RecurrentShape.RNNCellWithHidden","content":"RecurrentShape.RNNCellWithHidden \nRNNCellWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNNCellSequenceWithHidden","title":"RecurrentShape.RNNCellSequenceWithHidden","content":"RecurrentShape.RNNCellSequenceWithHidden \nRNNCellSequenceWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNN","title":"RecurrentShape.RNN","content":"RecurrentShape.RNN \nRNN \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#RNNWithHidden","title":"RecurrentShape.RNNWithHidden","content":"RecurrentShape.RNNWithHidden \nRNNWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#LSTMCellWithHidden","title":"RecurrentShape.LSTMCellWithHidden","content":"RecurrentShape.LSTMCellWithHidden \nLSTMCellWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#LSTMCellSequenceWithHidden","title":"RecurrentShape.LSTMCellSequenceWithHidden","content":"RecurrentShape.LSTMCellSequenceWithHidden \nLSTMCellSequenceWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-recurrentshape.html#LSTMWithHidden","title":"RecurrentShape.LSTMWithHidden","content":"RecurrentShape.LSTMWithHidden \nLSTMWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html","title":"BatchNorm1d","content":"BatchNorm1d \nApplies Batch Normalization over a 2D or 3D input (a mini-batch of 1D inputs with optional additional channel dimension) \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        The mean and standard-deviation are calculated per-dimension over the mini-batches and\n        \\(\\gamma\\( and \\(\\beta\\) are learnable parameter vectors of size \\(C\\) (where \\(C\\) is the\n        input size). By default, the elements of \\(\\gamma\\) are set to 1 and the elements of \n        \\(\\beta\\) are set to 0. The standard-deviation is calculated via the biased estimator,\n        equivalent to \u003Ccode\u003Edsharp.var(input, unbiased=False)\u003C/code\u003E.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        Also by default, during training this layer keeps running estimates of its computed mean\n        and variance, which are then used for normalization during evaluation. The running estimates\n        are kept with a default momentum of 0.1.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n       If trackRunningStats is set to False, this layer then does not keep running estimates,\n       and batch statistics are instead used during evaluation time as well.\n    \u003C/p\u003E \nBatchNorm1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBatchNorm1d.weight \nweight \nBatchNorm1d.bias \nbias \nBatchNorm1d.stddev \nstddev \nBatchNorm1d.variance \nvariance \nBatchNorm1d.mean \nmean"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#\u0060\u0060.ctor\u0060\u0060","title":"BatchNorm1d.\u0060\u0060.ctor\u0060\u0060","content":"BatchNorm1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#weight","title":"BatchNorm1d.weight","content":"BatchNorm1d.weight \nweight \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#bias","title":"BatchNorm1d.bias","content":"BatchNorm1d.bias \nbias \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#stddev","title":"BatchNorm1d.stddev","content":"BatchNorm1d.stddev \nstddev \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#variance","title":"BatchNorm1d.variance","content":"BatchNorm1d.variance \nvariance \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm1d.html#mean","title":"BatchNorm1d.mean","content":"BatchNorm1d.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html","title":"BatchNorm2d","content":"BatchNorm2d \nApplies Batch Normalization over a 4D input (a mini-batch of 2D inputs with optional additional channel dimension) \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        The mean and standard-deviation are calculated per-dimension over the mini-batches and\n        \\(\\gamma\\( and \\(\\beta\\) are learnable parameter vectors of size \\(C\\) (where \\(C\\) is the\n        input size). By default, the elements of \\(\\gamma\\) are set to 1 and the elements of \n        \\(\\beta\\) are set to 0. The standard-deviation is calculated via the biased estimator,\n        equivalent to \u003Ccode\u003Edsharp.var(input, unbiased=False)\u003C/code\u003E.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        Also by default, during training this layer keeps running estimates of its computed mean\n        and variance, which are then used for normalization during evaluation. The running estimates\n        are kept with a default momentum of 0.1.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n       If trackRunningStats is set to False, this layer then does not keep running estimates,\n       and batch statistics are instead used during evaluation time as well.\n    \u003C/p\u003E \nBatchNorm2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBatchNorm2d.weight \nweight \nBatchNorm2d.bias \nbias \nBatchNorm2d.stddev \nstddev \nBatchNorm2d.variance \nvariance \nBatchNorm2d.mean \nmean"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#\u0060\u0060.ctor\u0060\u0060","title":"BatchNorm2d.\u0060\u0060.ctor\u0060\u0060","content":"BatchNorm2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#weight","title":"BatchNorm2d.weight","content":"BatchNorm2d.weight \nweight \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#bias","title":"BatchNorm2d.bias","content":"BatchNorm2d.bias \nbias \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#stddev","title":"BatchNorm2d.stddev","content":"BatchNorm2d.stddev \nstddev \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#variance","title":"BatchNorm2d.variance","content":"BatchNorm2d.variance \nvariance \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm2d.html#mean","title":"BatchNorm2d.mean","content":"BatchNorm2d.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html","title":"BatchNorm3d","content":"BatchNorm3d \nApplies Batch Normalization over a 5D input (a mini-batch of 3D inputs with optional additional channel dimension) \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        The mean and standard-deviation are calculated per-dimension over the mini-batches and\n        \\(\\gamma\\( and \\(\\beta\\) are learnable parameter vectors of size \\(C\\) (where \\(C\\) is the\n        input size). By default, the elements of \\(\\gamma\\) are set to 1 and the elements of \n        \\(\\beta\\) are set to 0. The standard-deviation is calculated via the biased estimator,\n        equivalent to \u003Ccode\u003Edsharp.var(input, unbiased=False)\u003C/code\u003E.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n        Also by default, during training this layer keeps running estimates of its computed mean\n        and variance, which are then used for normalization during evaluation. The running estimates\n        are kept with a default momentum of 0.1.\n    \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n       If trackRunningStats is set to False, this layer then does not keep running estimates,\n       and batch statistics are instead used during evaluation time as well.\n    \u003C/p\u003E \nBatchNorm3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nBatchNorm3d.weight \nweight \nBatchNorm3d.bias \nbias \nBatchNorm3d.stddev \nstddev \nBatchNorm3d.variance \nvariance \nBatchNorm3d.mean \nmean"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#\u0060\u0060.ctor\u0060\u0060","title":"BatchNorm3d.\u0060\u0060.ctor\u0060\u0060","content":"BatchNorm3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#weight","title":"BatchNorm3d.weight","content":"BatchNorm3d.weight \nweight \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#bias","title":"BatchNorm3d.bias","content":"BatchNorm3d.bias \nbias \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#stddev","title":"BatchNorm3d.stddev","content":"BatchNorm3d.stddev \nstddev \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#variance","title":"BatchNorm3d.variance","content":"BatchNorm3d.variance \nvariance \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-batchnorm3d.html#mean","title":"BatchNorm3d.mean","content":"BatchNorm3d.mean \nmean \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv1d.html","title":"Conv1d","content":"Conv1d \nA model that applies a 1D convolution over an input signal composed of several input planes \nConv1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConv1d.weight \nweight \nConv1d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv1d.html#\u0060\u0060.ctor\u0060\u0060","title":"Conv1d.\u0060\u0060.ctor\u0060\u0060","content":"Conv1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv1d.html#weight","title":"Conv1d.weight","content":"Conv1d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv1d.html#bias","title":"Conv1d.bias","content":"Conv1d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv2d.html","title":"Conv2d","content":"Conv2d \nA model that applies a 2D convolution over an input signal composed of several input planes \nConv2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConv2d.weight \nweight \nConv2d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv2d.html#\u0060\u0060.ctor\u0060\u0060","title":"Conv2d.\u0060\u0060.ctor\u0060\u0060","content":"Conv2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv2d.html#weight","title":"Conv2d.weight","content":"Conv2d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv2d.html#bias","title":"Conv2d.bias","content":"Conv2d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv3d.html","title":"Conv3d","content":"Conv3d \nA model that applies a 3D convolution over an input signal composed of several input planes \nConv3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConv3d.weight \nweight \nConv3d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv3d.html#\u0060\u0060.ctor\u0060\u0060","title":"Conv3d.\u0060\u0060.ctor\u0060\u0060","content":"Conv3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv3d.html#weight","title":"Conv3d.weight","content":"Conv3d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-conv3d.html#bias","title":"Conv3d.bias","content":"Conv3d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose1d.html","title":"ConvTranspose1d","content":"ConvTranspose1d \nA model that applies a 1D transposed convolution operator over an input image composed of several input planes. \nConvTranspose1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConvTranspose1d.weight \nweight \nConvTranspose1d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose1d.html#\u0060\u0060.ctor\u0060\u0060","title":"ConvTranspose1d.\u0060\u0060.ctor\u0060\u0060","content":"ConvTranspose1d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose1d.html#weight","title":"ConvTranspose1d.weight","content":"ConvTranspose1d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose1d.html#bias","title":"ConvTranspose1d.bias","content":"ConvTranspose1d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose2d.html","title":"ConvTranspose2d","content":"ConvTranspose2d \nA model that applies a 2D transposed convolution operator over an input image composed of several input planes. \nConvTranspose2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConvTranspose2d.weight \nweight \nConvTranspose2d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose2d.html#\u0060\u0060.ctor\u0060\u0060","title":"ConvTranspose2d.\u0060\u0060.ctor\u0060\u0060","content":"ConvTranspose2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose2d.html#weight","title":"ConvTranspose2d.weight","content":"ConvTranspose2d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose2d.html#bias","title":"ConvTranspose2d.bias","content":"ConvTranspose2d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose3d.html","title":"ConvTranspose3d","content":"ConvTranspose3d \nA model that applies a 3D transposed convolution operator over an input image composed of several input planes. \nConvTranspose3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nConvTranspose3d.weight \nweight \nConvTranspose3d.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose3d.html#\u0060\u0060.ctor\u0060\u0060","title":"ConvTranspose3d.\u0060\u0060.ctor\u0060\u0060","content":"ConvTranspose3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose3d.html#weight","title":"ConvTranspose3d.weight","content":"ConvTranspose3d.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-convtranspose3d.html#bias","title":"ConvTranspose3d.bias","content":"ConvTranspose3d.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout.html","title":"Dropout","content":"Dropout \nA model which during training, randomly zeroes some of the elements of the input tensor with probability p using samples from a Bernoulli distribution. \nDropout.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout.html#\u0060\u0060.ctor\u0060\u0060","title":"Dropout.\u0060\u0060.ctor\u0060\u0060","content":"Dropout.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout2d.html","title":"Dropout2d","content":"Dropout2d \nA model which during training, randomly zero out entire channels. Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution. \nDropout2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout2d.html#\u0060\u0060.ctor\u0060\u0060","title":"Dropout2d.\u0060\u0060.ctor\u0060\u0060","content":"Dropout2d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout3d.html","title":"Dropout3d","content":"Dropout3d \nA model which during training, randomly zero out entire channels. Each channel will be zeroed out independently on every forward call with probability p using samples from a Bernoulli distribution. \nDropout3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-dropout3d.html#\u0060\u0060.ctor\u0060\u0060","title":"Dropout3d.\u0060\u0060.ctor\u0060\u0060","content":"Dropout3d.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html","title":"LSTM","content":"LSTM \nLong short-term memory (LSTM) recurrent neural network. \nLSTM.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLSTM.forwardWithHidden \nforwardWithHidden \nLSTM.newHidden \nnewHidden \nLSTM.hiddenSize \nhiddenSize \nLSTM.inputSize \ninputSize"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html#\u0060\u0060.ctor\u0060\u0060","title":"LSTM.\u0060\u0060.ctor\u0060\u0060","content":"LSTM.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html#forwardWithHidden","title":"LSTM.forwardWithHidden","content":"LSTM.forwardWithHidden \nforwardWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html#newHidden","title":"LSTM.newHidden","content":"LSTM.newHidden \nnewHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html#hiddenSize","title":"LSTM.hiddenSize","content":"LSTM.hiddenSize \nhiddenSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstm.html#inputSize","title":"LSTM.inputSize","content":"LSTM.inputSize \ninputSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html","title":"LSTMCell","content":"LSTMCell \nUnit cell of a long short-term memory (LSTM) recurrent neural network. Prefer using the RNN class instead, which can combine RNNCells in multiple layers. \nLSTMCell.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLSTMCell.forwardSequence \nforwardSequence \nLSTMCell.forwardSequenceWithHidden \nforwardSequenceWithHidden \nLSTMCell.forwardWithHidden \nforwardWithHidden \nLSTMCell.newHidden \nnewHidden \nLSTMCell.hiddenSize \nhiddenSize \nLSTMCell.inputSize \ninputSize"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#\u0060\u0060.ctor\u0060\u0060","title":"LSTMCell.\u0060\u0060.ctor\u0060\u0060","content":"LSTMCell.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#forwardSequence","title":"LSTMCell.forwardSequence","content":"LSTMCell.forwardSequence \nforwardSequence \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#forwardSequenceWithHidden","title":"LSTMCell.forwardSequenceWithHidden","content":"LSTMCell.forwardSequenceWithHidden \nforwardSequenceWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#forwardWithHidden","title":"LSTMCell.forwardWithHidden","content":"LSTMCell.forwardWithHidden \nforwardWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#newHidden","title":"LSTMCell.newHidden","content":"LSTMCell.newHidden \nnewHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#hiddenSize","title":"LSTMCell.hiddenSize","content":"LSTMCell.hiddenSize \nhiddenSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-lstmcell.html#inputSize","title":"LSTMCell.inputSize","content":"LSTMCell.inputSize \ninputSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-linear.html","title":"Linear","content":"Linear \nA model that applies a linear transformation to the incoming data: \\(y = xA^T \u002B b\\) \nLinear.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nLinear.weight \nweight \nLinear.bias \nbias"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-linear.html#\u0060\u0060.ctor\u0060\u0060","title":"Linear.\u0060\u0060.ctor\u0060\u0060","content":"Linear.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-linear.html#weight","title":"Linear.weight","content":"Linear.weight \nweight \nGet or set the weight parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-linear.html#bias","title":"Linear.bias","content":"Linear.bias \nbias \nGet or set the bias parameter of the model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-mode.html","title":"Mode","content":"Mode \nIndicates the training or evaluation mode for a model. \nMode.Train \nTrain \nMode.Eval \nEval"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-mode.html#Train","title":"Mode.Train","content":"Mode.Train \nTrain \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-mode.html#Eval","title":"Mode.Eval","content":"Mode.Eval \nEval \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html","title":"Model\u003C\u0027In, \u0027Out\u003E","content":"Model\u003C\u0027In, \u0027Out\u003E \nRepresents a model, primarily a collection of named parameters and sub-models and a function governed by them. \nModel\u003C\u0027In, \u0027Out\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nModel\u003C\u0027In, \u0027Out\u003E.asFunction \nasFunction \nModel\u003C\u0027In, \u0027Out\u003E.clone \nclone \nModel\u003C\u0027In, \u0027Out\u003E.forward \nforward \nModel\u003C\u0027In, \u0027Out\u003E.compose \ncompose \nModel\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nModel\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nModel\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nModel\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#\u0060\u0060.ctor\u0060\u0060","title":"Model\u003C\u0027In, \u0027Out\u003E.\u0060\u0060.ctor\u0060\u0060","content":"Model\u003C\u0027In, \u0027Out\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#asFunction","title":"Model\u003C\u0027In, \u0027Out\u003E.asFunction","content":"Model\u003C\u0027In, \u0027Out\u003E.asFunction \nasFunction \nUse the model as a function of its parameters and input. \n\n    The resulting function can be composed with a loss function and differentiated.\n    During execution the parameters of the model are temporarily set to the supplied parameters.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#clone","title":"Model\u003C\u0027In, \u0027Out\u003E.clone","content":"Model\u003C\u0027In, \u0027Out\u003E.clone \nclone \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#forward","title":"Model\u003C\u0027In, \u0027Out\u003E.forward","content":"Model\u003C\u0027In, \u0027Out\u003E.forward \nforward \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#compose","title":"Model\u003C\u0027In, \u0027Out\u003E.compose","content":"Model\u003C\u0027In, \u0027Out\u003E.compose \ncompose \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#(--\u003E)","title":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E)","content":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#(--\u003E)","title":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E)","content":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#(--\u003E)","title":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E)","content":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model-2.html#(--\u003E)","title":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E)","content":"Model\u003C\u0027In, \u0027Out\u003E.(--\u003E) \n(--\u003E) \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-model.html","title":"Model","content":"Model \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html","title":"ModelBase","content":"ModelBase \nRepresents the base class of all models. \nModelBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nModelBase.addBuffer \naddBuffer \nModelBase.addBuffer \naddBuffer \nModelBase.addBuffer \naddBuffer \nModelBase.addModel \naddModel \nModelBase.addModel \naddModel \nModelBase.addModel \naddModel \nModelBase.addModel \naddModel \nModelBase.addModel \naddModel \nModelBase.addModel \naddModel \nModelBase.addParameter \naddParameter \nModelBase.addParameter \naddParameter \nModelBase.addParameter \naddParameter \nModelBase.clone \nclone \nModelBase.eval \neval \nModelBase.forwardDiff \nforwardDiff \nModelBase.init \ninit \nModelBase.move \nmove \nModelBase.noDiff \nnoDiff \nModelBase.reverseDiff \nreverseDiff \nModelBase.summary \nsummary \nModelBase.train \ntrain \nModelBase.isNoDiff \nisNoDiff \nModelBase.buffers \nbuffers \nModelBase.nparameters \nnparameters \nModelBase.state \nstate \nModelBase.hasOwnParameters \nhasOwnParameters \nModelBase.children \nchildren \nModelBase.buffersVector \nbuffersVector \nModelBase.isForwardDiff \nisForwardDiff \nModelBase.descendants \ndescendants \nModelBase.nbuffers \nnbuffers \nModelBase.isReverseDiff \nisReverseDiff \nModelBase.parameters \nparameters \nModelBase.hasOwnState \nhasOwnState \nModelBase.stateVector \nstateVector \nModelBase.device \ndevice \nModelBase.dtype \ndtype \nModelBase.hasOwnBuffers \nhasOwnBuffers \nModelBase.nstate \nnstate \nModelBase.backend \nbackend \nModelBase.parametersVector \nparametersVector \nModelBase.mode \nmode"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#\u0060\u0060.ctor\u0060\u0060","title":"ModelBase.\u0060\u0060.ctor\u0060\u0060","content":"ModelBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addBuffer","title":"ModelBase.addBuffer","content":"ModelBase.addBuffer \naddBuffer \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addBuffer","title":"ModelBase.addBuffer","content":"ModelBase.addBuffer \naddBuffer \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addBuffer","title":"ModelBase.addBuffer","content":"ModelBase.addBuffer \naddBuffer \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addModel","title":"ModelBase.addModel","content":"ModelBase.addModel \naddModel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addParameter","title":"ModelBase.addParameter","content":"ModelBase.addParameter \naddParameter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addParameter","title":"ModelBase.addParameter","content":"ModelBase.addParameter \naddParameter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#addParameter","title":"ModelBase.addParameter","content":"ModelBase.addParameter \naddParameter \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#clone","title":"ModelBase.clone","content":"ModelBase.clone \nclone \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#eval","title":"ModelBase.eval","content":"ModelBase.eval \neval \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#forwardDiff","title":"ModelBase.forwardDiff","content":"ModelBase.forwardDiff \nforwardDiff \n\n  Adjust the parameters of the model to initiate a new level of forward-mode automatic differentiation.\n  \n\n  After this call the current parameters of the model will have attached derivatives for forward mode differentiation.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#init","title":"ModelBase.init","content":"ModelBase.init \ninit \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#move","title":"ModelBase.move","content":"ModelBase.move \nmove \nMoves the state (parameters and buffers) of the model to the given configuration"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#noDiff","title":"ModelBase.noDiff","content":"ModelBase.noDiff \nnoDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#reverseDiff","title":"ModelBase.reverseDiff","content":"ModelBase.reverseDiff \nreverseDiff \n\n  Adjust the parameters of the model to initiate a new level of reverse-mode automatic differentiation.\n  \n\n  After this call the current parameters of the model will support reverse-mode differentiation. After the completion\n  of the corresponding \u003Ccode\u003Ereverse\u003C/code\u003E operation, the computed derivatives will be available. \n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#summary","title":"ModelBase.summary","content":"ModelBase.summary \nsummary \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#train","title":"ModelBase.train","content":"ModelBase.train \ntrain \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#isNoDiff","title":"ModelBase.isNoDiff","content":"ModelBase.isNoDiff \nisNoDiff \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#buffers","title":"ModelBase.buffers","content":"ModelBase.buffers \nbuffers \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#nparameters","title":"ModelBase.nparameters","content":"ModelBase.nparameters \nnparameters \nGets the number of parameters of the Model"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#state","title":"ModelBase.state","content":"ModelBase.state \nstate \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#hasOwnParameters","title":"ModelBase.hasOwnParameters","content":"ModelBase.hasOwnParameters \nhasOwnParameters \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#children","title":"ModelBase.children","content":"ModelBase.children \nchildren \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#buffersVector","title":"ModelBase.buffersVector","content":"ModelBase.buffersVector \nbuffersVector \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#isForwardDiff","title":"ModelBase.isForwardDiff","content":"ModelBase.isForwardDiff \nisForwardDiff \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#descendants","title":"ModelBase.descendants","content":"ModelBase.descendants \ndescendants \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#nbuffers","title":"ModelBase.nbuffers","content":"ModelBase.nbuffers \nnbuffers \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#isReverseDiff","title":"ModelBase.isReverseDiff","content":"ModelBase.isReverseDiff \nisReverseDiff \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#parameters","title":"ModelBase.parameters","content":"ModelBase.parameters \nparameters \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#hasOwnState","title":"ModelBase.hasOwnState","content":"ModelBase.hasOwnState \nhasOwnState \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#stateVector","title":"ModelBase.stateVector","content":"ModelBase.stateVector \nstateVector \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#device","title":"ModelBase.device","content":"ModelBase.device \ndevice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#dtype","title":"ModelBase.dtype","content":"ModelBase.dtype \ndtype \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#hasOwnBuffers","title":"ModelBase.hasOwnBuffers","content":"ModelBase.hasOwnBuffers \nhasOwnBuffers \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#nstate","title":"ModelBase.nstate","content":"ModelBase.nstate \nnstate \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#backend","title":"ModelBase.backend","content":"ModelBase.backend \nbackend \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#parametersVector","title":"ModelBase.parametersVector","content":"ModelBase.parametersVector \nparametersVector \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-modelbase.html#mode","title":"ModelBase.mode","content":"ModelBase.mode \nmode \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html","title":"Parameter","content":"Parameter \nRepresents a parameter. \nA parameter is a mutable register holding a tensor. \nParameter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParameter.copy \ncopy \nParameter.forwardDiff \nforwardDiff \nParameter.move \nmove \nParameter.noDiff \nnoDiff \nParameter.reverseDiff \nreverseDiff \nParameter.value \nvalue"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#\u0060\u0060.ctor\u0060\u0060","title":"Parameter.\u0060\u0060.ctor\u0060\u0060","content":"Parameter.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#copy","title":"Parameter.copy","content":"Parameter.copy \ncopy \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#forwardDiff","title":"Parameter.forwardDiff","content":"Parameter.forwardDiff \nforwardDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#move","title":"Parameter.move","content":"Parameter.move \nmove \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#noDiff","title":"Parameter.noDiff","content":"Parameter.noDiff \nnoDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#reverseDiff","title":"Parameter.reverseDiff","content":"Parameter.reverseDiff \nreverseDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameter.html#value","title":"Parameter.value","content":"Parameter.value \nvalue \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html","title":"ParameterDict","content":"ParameterDict \nRepresents a collection of named parameters. \nParameterDict.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParameterDict.add \nadd \nParameterDict.add \nadd \nParameterDict.add \nadd \nParameterDict.clear \nclear \nParameterDict.copy \ncopy \nParameterDict.flatten \nflatten \nParameterDict.forwardDiff \nforwardDiff \nParameterDict.iter \niter \nParameterDict.map \nmap \nParameterDict.map \nmap \nParameterDict.move \nmove \nParameterDict.noDiff \nnoDiff \nParameterDict.reverseDiff \nreverseDiff \nParameterDict.set \nset \nParameterDict.unflatten \nunflatten \nParameterDict.unflattenToNew \nunflattenToNew \nParameterDict.nelement \nnelement \nParameterDict.count \ncount \nParameterDict.Item \nItem \nParameterDict.device \ndevice \nParameterDict.dtype \ndtype \nParameterDict.backend \nbackend"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#\u0060\u0060.ctor\u0060\u0060","title":"ParameterDict.\u0060\u0060.ctor\u0060\u0060","content":"ParameterDict.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#add","title":"ParameterDict.add","content":"ParameterDict.add \nadd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#add","title":"ParameterDict.add","content":"ParameterDict.add \nadd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#add","title":"ParameterDict.add","content":"ParameterDict.add \nadd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#clear","title":"ParameterDict.clear","content":"ParameterDict.clear \nclear \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#copy","title":"ParameterDict.copy","content":"ParameterDict.copy \ncopy \nTBD \n\n   This method discards differentiability and returns a ParameterDict containing parameters that are constant tensors.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#flatten","title":"ParameterDict.flatten","content":"ParameterDict.flatten \nflatten \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#forwardDiff","title":"ParameterDict.forwardDiff","content":"ParameterDict.forwardDiff \nforwardDiff \n\n  Adjust the parameters to include support for forward-mode automatic differentiation.\n  \n\n  After this call the current parameters in this dictionary will have attached derivatives for forward mode differentiation.\n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#iter","title":"ParameterDict.iter","content":"ParameterDict.iter \niter \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#map","title":"ParameterDict.map","content":"ParameterDict.map \nmap \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#map","title":"ParameterDict.map","content":"ParameterDict.map \nmap \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#move","title":"ParameterDict.move","content":"ParameterDict.move \nmove \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#noDiff","title":"ParameterDict.noDiff","content":"ParameterDict.noDiff \nnoDiff \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#reverseDiff","title":"ParameterDict.reverseDiff","content":"ParameterDict.reverseDiff \nreverseDiff \n\n  Adjust the parameters to include support for reverse-mode automatic differentiation.\n  \n\n  After this call the current parameters in this dictionary will support reverse-mode differentiation. After the completion\n  of the corresponding \u003Ccode\u003Ereverse\u003C/code\u003E operation, the computed derivative\n  will be available. \n "},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#set","title":"ParameterDict.set","content":"ParameterDict.set \nset \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#unflatten","title":"ParameterDict.unflatten","content":"ParameterDict.unflatten \nunflatten \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#unflattenToNew","title":"ParameterDict.unflattenToNew","content":"ParameterDict.unflattenToNew \nunflattenToNew \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#nelement","title":"ParameterDict.nelement","content":"ParameterDict.nelement \nnelement \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#count","title":"ParameterDict.count","content":"ParameterDict.count \ncount \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#Item","title":"ParameterDict.Item","content":"ParameterDict.Item \nItem \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#device","title":"ParameterDict.device","content":"ParameterDict.device \ndevice \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#dtype","title":"ParameterDict.dtype","content":"ParameterDict.dtype \ndtype \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-parameterdict.html#backend","title":"ParameterDict.backend","content":"ParameterDict.backend \nbackend \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html","title":"RNN","content":"RNN \nRecurrent neural network. \nRNN.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRNN.forwardWithHidden \nforwardWithHidden \nRNN.newHidden \nnewHidden \nRNN.hiddenSize \nhiddenSize \nRNN.inputSize \ninputSize"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html#\u0060\u0060.ctor\u0060\u0060","title":"RNN.\u0060\u0060.ctor\u0060\u0060","content":"RNN.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html#forwardWithHidden","title":"RNN.forwardWithHidden","content":"RNN.forwardWithHidden \nforwardWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html#newHidden","title":"RNN.newHidden","content":"RNN.newHidden \nnewHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html#hiddenSize","title":"RNN.hiddenSize","content":"RNN.hiddenSize \nhiddenSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnn.html#inputSize","title":"RNN.inputSize","content":"RNN.inputSize \ninputSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html","title":"RNNCell","content":"RNNCell \nUnit cell of a recurrent neural network. Prefer using the RNN class instead, which can combine RNNCells in multiple layers. \nRNNCell.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRNNCell.forwardSequence \nforwardSequence \nRNNCell.forwardSequenceWithHidden \nforwardSequenceWithHidden \nRNNCell.forwardWithHidden \nforwardWithHidden \nRNNCell.newHidden \nnewHidden \nRNNCell.hiddenSize \nhiddenSize \nRNNCell.inputSize \ninputSize"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#\u0060\u0060.ctor\u0060\u0060","title":"RNNCell.\u0060\u0060.ctor\u0060\u0060","content":"RNNCell.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#forwardSequence","title":"RNNCell.forwardSequence","content":"RNNCell.forwardSequence \nforwardSequence \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#forwardSequenceWithHidden","title":"RNNCell.forwardSequenceWithHidden","content":"RNNCell.forwardSequenceWithHidden \nforwardSequenceWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#forwardWithHidden","title":"RNNCell.forwardWithHidden","content":"RNNCell.forwardWithHidden \nforwardWithHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#newHidden","title":"RNNCell.newHidden","content":"RNNCell.newHidden \nnewHidden \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#hiddenSize","title":"RNNCell.hiddenSize","content":"RNNCell.hiddenSize \nhiddenSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-rnncell.html#inputSize","title":"RNNCell.inputSize","content":"RNNCell.inputSize \ninputSize \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-sequential.html","title":"Sequential","content":"Sequential \n \nSequential.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-sequential.html#\u0060\u0060.ctor\u0060\u0060","title":"Sequential.\u0060\u0060.ctor\u0060\u0060","content":"Sequential.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vae.html","title":"VAE","content":"VAE \nVariational auto-encoder \nVAE.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vae.html#\u0060\u0060.ctor\u0060\u0060","title":"VAE.\u0060\u0060.ctor\u0060\u0060","content":"VAE.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html","title":"VAEBase","content":"VAEBase \nVariational auto-encoder base \nVAEBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nVAEBase.decode \ndecode \nVAEBase.encode \nencode \nVAEBase.encodeDecode \nencodeDecode \nVAEBase.loss \nloss \nVAEBase.sample \nsample \nVAEBase.loss \nloss"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#\u0060\u0060.ctor\u0060\u0060","title":"VAEBase.\u0060\u0060.ctor\u0060\u0060","content":"VAEBase.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#decode","title":"VAEBase.decode","content":"VAEBase.decode \ndecode \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#encode","title":"VAEBase.encode","content":"VAEBase.encode \nencode \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#encodeDecode","title":"VAEBase.encodeDecode","content":"VAEBase.encodeDecode \nencodeDecode \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#loss","title":"VAEBase.loss","content":"VAEBase.loss \nloss \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#sample","title":"VAEBase.sample","content":"VAEBase.sample \nsample \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaebase.html#loss","title":"VAEBase.loss","content":"VAEBase.loss \nloss \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaemlp.html","title":"VAEMLP","content":"VAEMLP \nVariational auto-encoder with multilayer perceptron (MLP) encoder and decoder. \nVAEMLP.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-vaemlp.html#\u0060\u0060.ctor\u0060\u0060","title":"VAEMLP.\u0060\u0060.ctor\u0060\u0060","content":"VAEMLP.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-weight.html","title":"Weight","content":"Weight \nContains functionality related to generating initial parameter weights for models. \nWeight.kaiming \nkaiming \nWeight.uniform \nuniform"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-weight.html#kaiming","title":"Weight.kaiming","content":"Weight.kaiming \nkaiming \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-model-weight.html#uniform","title":"Weight.uniform","content":"Weight.uniform \nuniform \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-adam.html","title":"Adam","content":"Adam \nTBD \nAdam.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-adam.html#\u0060\u0060.ctor\u0060\u0060","title":"Adam.\u0060\u0060.ctor\u0060\u0060","content":"Adam.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html","title":"Optimizer","content":"Optimizer \nRepresents an optimizer. \nOptimizer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nOptimizer.step \nstep \nOptimizer.updateRule \nupdateRule \nOptimizer.stateStep \nstateStep \nOptimizer.model \nmodel"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html#\u0060\u0060.ctor\u0060\u0060","title":"Optimizer.\u0060\u0060.ctor\u0060\u0060","content":"Optimizer.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html#step","title":"Optimizer.step","content":"Optimizer.step \nstep \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html#updateRule","title":"Optimizer.updateRule","content":"Optimizer.updateRule \nupdateRule \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html#stateStep","title":"Optimizer.stateStep","content":"Optimizer.stateStep \nstateStep \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optimizer.html#model","title":"Optimizer.model","content":"Optimizer.model \nmodel \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-sgd.html","title":"SGD","content":"SGD \nTBD \nSGD.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-sgd.html#\u0060\u0060.ctor\u0060\u0060","title":"SGD.\u0060\u0060.ctor\u0060\u0060","content":"SGD.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optim.html","title":"optim","content":"optim \nTBD \noptim.adam \nadam \noptim.adam \nadam \noptim.sgd \nsgd \noptim.sgd \nsgd"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optim.html#adam","title":"optim.adam","content":"optim.adam \nadam \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optim.html#adam","title":"optim.adam","content":"optim.adam \nadam \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optim.html#sgd","title":"optim.sgd","content":"optim.sgd \nsgd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-optim-optim.html#sgd","title":"optim.sgd","content":"optim.sgd \nsgd \nTBD"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html","title":"Array","content":"Array \n\n   Contains extensions to the F# Array module. \n  \nArray.allClose \nallClose \nArray.cumulativeSum \ncumulativeSum \nArray.getUniqueCounts \ngetUniqueCounts \nArray.initFlat2D \ninitFlat2D \nArray.initFlat3D \ninitFlat3D \nArray.foralli \nforalli \nArray.insertManyAt \ninsertManyAt \nArray.removeAt \nremoveAt"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#allClose","title":"Array.allClose","content":"Array.allClose \nallClose \n\n Determines if all values of the first array lie within the given tolerances of the second array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#cumulativeSum","title":"Array.cumulativeSum","content":"Array.cumulativeSum \ncumulativeSum \n\n Gets the cumulative sum of the input array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#getUniqueCounts","title":"Array.getUniqueCounts","content":"Array.getUniqueCounts \ngetUniqueCounts \n\n Gets the unique counts of the input array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#initFlat2D","title":"Array.initFlat2D","content":"Array.initFlat2D \ninitFlat2D \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#initFlat3D","title":"Array.initFlat3D","content":"Array.initFlat3D \ninitFlat3D \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#foralli","title":"Array.foralli","content":"Array.foralli \nforalli \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#insertManyAt","title":"Array.insertManyAt","content":"Array.insertManyAt \ninsertManyAt \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array.html#removeAt","title":"Array.removeAt","content":"Array.removeAt \nremoveAt \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array4d.html","title":"Array4D","content":"Array4D \n \nArray4D.map \nmap"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array4d.html#map","title":"Array4D.map","content":"Array4D.map \nmap \n\n Builds a new array whose elements are the results of applying the given function to each of the elements of the array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html","title":"Array5D","content":"Array5D \n \nArray5D.zeroCreate \nzeroCreate \nArray5D.get \nget \nArray5D.set \nset \nArray5D.length1 \nlength1 \nArray5D.length2 \nlength2 \nArray5D.length3 \nlength3 \nArray5D.length4 \nlength4 \nArray5D.length5 \nlength5 \nArray5D.init \ninit \nArray5D.create \ncreate \nArray5D.map \nmap"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#zeroCreate","title":"Array5D.zeroCreate","content":"Array5D.zeroCreate \nzeroCreate \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#get","title":"Array5D.get","content":"Array5D.get \nget \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#set","title":"Array5D.set","content":"Array5D.set \nset \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#length1","title":"Array5D.length1","content":"Array5D.length1 \nlength1 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#length2","title":"Array5D.length2","content":"Array5D.length2 \nlength2 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#length3","title":"Array5D.length3","content":"Array5D.length3 \nlength3 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#length4","title":"Array5D.length4","content":"Array5D.length4 \nlength4 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#length5","title":"Array5D.length5","content":"Array5D.length5 \nlength5 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#init","title":"Array5D.init","content":"Array5D.init \ninit \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#create","title":"Array5D.create","content":"Array5D.create \ncreate \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array5d.html#map","title":"Array5D.map","content":"Array5D.map \nmap \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html","title":"Array6D","content":"Array6D \n \nArray6D.zeroCreate \nzeroCreate \nArray6D.get \nget \nArray6D.set \nset \nArray6D.length1 \nlength1 \nArray6D.length2 \nlength2 \nArray6D.length3 \nlength3 \nArray6D.length4 \nlength4 \nArray6D.length5 \nlength5 \nArray6D.length6 \nlength6 \nArray6D.init \ninit \nArray6D.create \ncreate \nArray6D.map \nmap"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#zeroCreate","title":"Array6D.zeroCreate","content":"Array6D.zeroCreate \nzeroCreate \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#get","title":"Array6D.get","content":"Array6D.get \nget \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#set","title":"Array6D.set","content":"Array6D.set \nset \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length1","title":"Array6D.length1","content":"Array6D.length1 \nlength1 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length2","title":"Array6D.length2","content":"Array6D.length2 \nlength2 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length3","title":"Array6D.length3","content":"Array6D.length3 \nlength3 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length4","title":"Array6D.length4","content":"Array6D.length4 \nlength4 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length5","title":"Array6D.length5","content":"Array6D.length5 \nlength5 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#length6","title":"Array6D.length6","content":"Array6D.length6 \nlength6 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#init","title":"Array6D.init","content":"Array6D.init \ninit \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#create","title":"Array6D.create","content":"Array6D.create \ncreate \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-array6d.html#map","title":"Array6D.map","content":"Array6D.map \nmap \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-arraynd.html","title":"ArrayND","content":"ArrayND \n \nArrayND.init \ninit \nArrayND.zeroCreate \nzeroCreate"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-arraynd.html#init","title":"ArrayND.init","content":"ArrayND.init \ninit \n\n Initializes an array with a given shape and initializer function.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-arraynd.html#zeroCreate","title":"ArrayND.zeroCreate","content":"ArrayND.zeroCreate \nzeroCreate \n\n Initializes an array with a given shape and initializer function.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html","title":"DataConverter","content":"DataConverter \n\n Contains operations relating to converting .NET data to tensor data.\n \nDataConverter.formatType \nformatType \nDataConverter.typesMatch \ntypesMatch \nDataConverter.tryFlatArrayAndShape \ntryFlatArrayAndShape \nDataConverter.dataOfValues \ndataOfValues \nDataConverter.dataOfValuesForFloat32 \ndataOfValuesForFloat32 \nDataConverter.dataOfValuesForFloat64 \ndataOfValuesForFloat64 \nDataConverter.dataOfValuesForByte \ndataOfValuesForByte \nDataConverter.dataOfValuesForInt8 \ndataOfValuesForInt8 \nDataConverter.dataOfValuesForInt16 \ndataOfValuesForInt16 \nDataConverter.dataOfValuesForInt32 \ndataOfValuesForInt32 \nDataConverter.dataOfValuesForInt64 \ndataOfValuesForInt64 \nDataConverter.dataOfValuesForBool \ndataOfValuesForBool"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#formatType","title":"DataConverter.formatType","content":"DataConverter.formatType \nformatType \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#typesMatch","title":"DataConverter.typesMatch","content":"DataConverter.typesMatch \ntypesMatch \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#tryFlatArrayAndShape","title":"DataConverter.tryFlatArrayAndShape","content":"DataConverter.tryFlatArrayAndShape \ntryFlatArrayAndShape \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValues","title":"DataConverter.dataOfValues","content":"DataConverter.dataOfValues \ndataOfValues \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForFloat32","title":"DataConverter.dataOfValuesForFloat32","content":"DataConverter.dataOfValuesForFloat32 \ndataOfValuesForFloat32 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForFloat64","title":"DataConverter.dataOfValuesForFloat64","content":"DataConverter.dataOfValuesForFloat64 \ndataOfValuesForFloat64 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForByte","title":"DataConverter.dataOfValuesForByte","content":"DataConverter.dataOfValuesForByte \ndataOfValuesForByte \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForInt8","title":"DataConverter.dataOfValuesForInt8","content":"DataConverter.dataOfValuesForInt8 \ndataOfValuesForInt8 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForInt16","title":"DataConverter.dataOfValuesForInt16","content":"DataConverter.dataOfValuesForInt16 \ndataOfValuesForInt16 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForInt32","title":"DataConverter.dataOfValuesForInt32","content":"DataConverter.dataOfValuesForInt32 \ndataOfValuesForInt32 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForInt64","title":"DataConverter.dataOfValuesForInt64","content":"DataConverter.dataOfValuesForInt64 \ndataOfValuesForInt64 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dataconverter.html#dataOfValuesForBool","title":"DataConverter.dataOfValuesForBool","content":"DataConverter.dataOfValuesForBool \ndataOfValuesForBool \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dictionary.html","title":"Dictionary","content":"Dictionary \n\n Contains extensions related to .NET Dictionary. \n \nDictionary.copyKeys \ncopyKeys \nDictionary.copyValues \ncopyValues"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dictionary.html#copyKeys","title":"Dictionary.copyKeys","content":"Dictionary.copyKeys \ncopyKeys \n\n Gets a fresh array containing the keys of the dictionary.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-dictionary.html#copyValues","title":"Dictionary.copyValues","content":"Dictionary.copyValues \ncopyValues \n\n Gets a fresh array containing the values of the dictionary.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html","title":"ExtensionAutoOpens","content":"ExtensionAutoOpens \n\n Contains auto-opened extensions to the F# programming model.\n \nExtensionAutoOpens.notNull \nnotNull \nExtensionAutoOpens.array3D \narray3D \nExtensionAutoOpens.array4D \narray4D \nExtensionAutoOpens.array5D \narray5D \nExtensionAutoOpens.array6D \narray6D \nExtensionAutoOpens.print \nprint"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#notNull","title":"ExtensionAutoOpens.notNull","content":"ExtensionAutoOpens.notNull \nnotNull \n\n Indicates if a value is not null.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#array3D","title":"ExtensionAutoOpens.array3D","content":"ExtensionAutoOpens.array3D \narray3D \n\n Creates a non-jagged 3D array from jagged data.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#array4D","title":"ExtensionAutoOpens.array4D","content":"ExtensionAutoOpens.array4D \narray4D \n\n Creates a non-jagged 4D array from jagged data.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#array5D","title":"ExtensionAutoOpens.array5D","content":"ExtensionAutoOpens.array5D \narray5D \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#array6D","title":"ExtensionAutoOpens.array6D","content":"ExtensionAutoOpens.array6D \narray6D \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-extensionautoopens.html#print","title":"ExtensionAutoOpens.print","content":"ExtensionAutoOpens.print \nprint \n\n Print the given value to the console using the \u0027%A\u0027 printf format specifier\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-ordereddictionary.html","title":"OrderedDictionary","content":"OrderedDictionary \n\n Contains extensions related to .NET OrderedDictionary. \n \nOrderedDictionary.copyKeys \ncopyKeys"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-ordereddictionary.html#copyKeys","title":"OrderedDictionary.copyKeys","content":"OrderedDictionary.copyKeys \ncopyKeys \n\n Gets a fresh array containing the keys of the dictionary.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-randommodule.html","title":"Random","content":"Random \n\n Contains operations relating to pseudo-random number generation.\n \nRandom.shuffledIndices \nshuffledIndices"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-randommodule.html#shuffledIndices","title":"Random.shuffledIndices","content":"Random.shuffledIndices \nshuffledIndices \n\n Returns a function that maps a given index to a shuffled version of the indexes up to the given \u0060length\u0060\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html","title":"Seq","content":"Seq \n\n Contains extensions to the F# Seq module. \n \nSeq.maxIndex \nmaxIndex \nSeq.minIndex \nminIndex \nSeq.allEqual \nallEqual \nSeq.duplicates \nduplicates \nSeq.hasDuplicates \nhasDuplicates \nSeq.toArrayQuick \ntoArrayQuick"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#maxIndex","title":"Seq.maxIndex","content":"Seq.maxIndex \nmaxIndex \n\n Gets the index of the maximum element of the sequence.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#minIndex","title":"Seq.minIndex","content":"Seq.minIndex \nminIndex \n\n Gets the index of the minimum element of the sequence.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#allEqual","title":"Seq.allEqual","content":"Seq.allEqual \nallEqual \n\n Indicates if all elements of the sequence are equal.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#duplicates","title":"Seq.duplicates","content":"Seq.duplicates \nduplicates \n\n Gets the duplicate elements in the sequence.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#hasDuplicates","title":"Seq.hasDuplicates","content":"Seq.hasDuplicates \nhasDuplicates \n\n Indicates if a sequence has duplicate elements.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-seq.html#toArrayQuick","title":"Seq.toArrayQuick","content":"Seq.toArrayQuick \ntoArrayQuick \n\n Like Seq.toArray but does not clone the array if the input is already an array\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html","title":"UtilAutoOpens","content":"UtilAutoOpens \n\n Contains auto-opened utilities related to the DiffSharp programming model.\n \nUtilAutoOpens.memoize \nmemoize \nUtilAutoOpens.saveBinary \nsaveBinary \nUtilAutoOpens.loadBinary \nloadBinary \nUtilAutoOpens.logSqrt2Pi \nlogSqrt2Pi \nUtilAutoOpens.log10Val \nlog10Val \nUtilAutoOpens.indentNewLines \nindentNewLines \nUtilAutoOpens.stringPad \nstringPad \nUtilAutoOpens.stringPadAs \nstringPadAs \nUtilAutoOpens.thousandsInt \nthousandsInt \nUtilAutoOpens.thousandsFloat \nthousandsFloat \nUtilAutoOpens.fileToBase64String \nfileToBase64String \nUtilAutoOpens.pngToHtml \npngToHtml \nUtilAutoOpens.bytesReadable \nbytesReadable \nUtilAutoOpens.(!) \n(!) \nUtilAutoOpens.(:=) \n(:=)"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#memoize","title":"UtilAutoOpens.memoize","content":"UtilAutoOpens.memoize \nmemoize \n\n Returns a function that memoizes the given function using a lookaside table.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#saveBinary","title":"UtilAutoOpens.saveBinary","content":"UtilAutoOpens.saveBinary \nsaveBinary \n\n Saves the given value to the given local file using binary serialization.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#loadBinary","title":"UtilAutoOpens.loadBinary","content":"UtilAutoOpens.loadBinary \nloadBinary \n\n Loads the given value from the given local file using binary serialization.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#logSqrt2Pi","title":"UtilAutoOpens.logSqrt2Pi","content":"UtilAutoOpens.logSqrt2Pi \nlogSqrt2Pi \n\n Value of log(sqrt(2*Math.PI)).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#log10Val","title":"UtilAutoOpens.log10Val","content":"UtilAutoOpens.log10Val \nlog10Val \n\n Value of log(10).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#indentNewLines","title":"UtilAutoOpens.indentNewLines","content":"UtilAutoOpens.indentNewLines \nindentNewLines \n\n Indents all lines of the given string by the given number of spaces.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#stringPad","title":"UtilAutoOpens.stringPad","content":"UtilAutoOpens.stringPad \nstringPad \n\n Left-pads a string up to the given length.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#stringPadAs","title":"UtilAutoOpens.stringPadAs","content":"UtilAutoOpens.stringPadAs \nstringPadAs \n\n Left-pads a string to match the length of another string.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#thousandsInt","title":"UtilAutoOpens.thousandsInt","content":"UtilAutoOpens.thousandsInt \nthousandsInt \n\n Formats an integer as a string with comma as thousands separator\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#thousandsFloat","title":"UtilAutoOpens.thousandsFloat","content":"UtilAutoOpens.thousandsFloat \nthousandsFloat \n\n Formats an integer as a string with comma as thousands separator\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#fileToBase64String","title":"UtilAutoOpens.fileToBase64String","content":"UtilAutoOpens.fileToBase64String \nfileToBase64String \n\n Returns the file contents as Base64 encoded string\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#pngToHtml","title":"UtilAutoOpens.pngToHtml","content":"UtilAutoOpens.pngToHtml \npngToHtml \n\n Given a PNG image file name, returns an HTML image element with the image content included as a Base64 encoded string\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#bytesReadable","title":"UtilAutoOpens.bytesReadable","content":"UtilAutoOpens.bytesReadable \nbytesReadable \n\n Return a human-readable string representation of the given value in Bytes.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#(!)","title":"UtilAutoOpens.(!)","content":"UtilAutoOpens.(!) \n(!) \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-utilautoopens.html#(:=)","title":"UtilAutoOpens.(:=)","content":"UtilAutoOpens.(:=) \n(:=) \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html","title":"GlobalNestingLevel","content":"GlobalNestingLevel \n\n Contains operations to get, set or reset the global nesting level for differentiation operations.\n \nGlobalNestingLevel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nGlobalNestingLevel.Next \nNext \nGlobalNestingLevel.Reset \nReset \nGlobalNestingLevel.Set \nSet \nGlobalNestingLevel.Current \nCurrent"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html#\u0060\u0060.ctor\u0060\u0060","title":"GlobalNestingLevel.\u0060\u0060.ctor\u0060\u0060","content":"GlobalNestingLevel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html#Next","title":"GlobalNestingLevel.Next","content":"GlobalNestingLevel.Next \nNext \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html#Reset","title":"GlobalNestingLevel.Reset","content":"GlobalNestingLevel.Reset \nReset \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html#Set","title":"GlobalNestingLevel.Set","content":"GlobalNestingLevel.Set \nSet \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-globalnestinglevel.html#Current","title":"GlobalNestingLevel.Current","content":"GlobalNestingLevel.Current \nCurrent \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-nestinglevel.html","title":"NestingLevel","content":"NestingLevel \n\n Represents a differentiation nesting level.\n \nNestingLevel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nNestingLevel.Next \nNext \nNestingLevel.Current \nCurrent"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-nestinglevel.html#\u0060\u0060.ctor\u0060\u0060","title":"NestingLevel.\u0060\u0060.ctor\u0060\u0060","content":"NestingLevel.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-nestinglevel.html#Next","title":"NestingLevel.Next","content":"NestingLevel.Next \nNext \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-nestinglevel.html#Current","title":"NestingLevel.Current","content":"NestingLevel.Current \nCurrent \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html","title":"Random","content":"Random \n\n Contains operations relating to pseudo-random number generation.\n \nRandom.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nRandom.Bernoulli \nBernoulli \nRandom.Bernoulli \nBernoulli \nRandom.Choice \nChoice \nRandom.Choice \nChoice \nRandom.ChoiceIndex \nChoiceIndex \nRandom.Double \nDouble \nRandom.Double \nDouble \nRandom.Integer \nInteger \nRandom.Integer \nInteger \nRandom.Multinomial \nMultinomial \nRandom.Multinomial \nMultinomial \nRandom.Normal \nNormal \nRandom.Normal \nNormal \nRandom.Seed \nSeed \nRandom.Shuffle \nShuffle \nRandom.UUID \nUUID \nRandom.Uniform \nUniform \nRandom.Uniform \nUniform"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#\u0060\u0060.ctor\u0060\u0060","title":"Random.\u0060\u0060.ctor\u0060\u0060","content":"Random.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Bernoulli","title":"Random.Bernoulli","content":"Random.Bernoulli \nBernoulli \n\n Samples a random value from the Bernoulli distribution.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Bernoulli","title":"Random.Bernoulli","content":"Random.Bernoulli \nBernoulli \n\n Samples a random value from the Bernoulli distribution with the given probability.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Choice","title":"Random.Choice","content":"Random.Choice \nChoice \n\n Samples a value at random from the given array using the given categorical probabilities.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Choice","title":"Random.Choice","content":"Random.Choice \nChoice \n\n Samples a value at random from the given array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#ChoiceIndex","title":"Random.ChoiceIndex","content":"Random.ChoiceIndex \nChoiceIndex \n\n Samples an index at random with the given categorical probabilities.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Double","title":"Random.Double","content":"Random.Double \nDouble \n\n Samples a double value in the given range [low, high)\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Double","title":"Random.Double","content":"Random.Double \nDouble \n\n Samples a double value in the range [0, 1)\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Integer","title":"Random.Integer","content":"Random.Integer \nInteger \n\n Samples a random integer in the given range [low, high).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Integer","title":"Random.Integer","content":"Random.Integer \nInteger \n\n Samples a non-negative random integer\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Multinomial","title":"Random.Multinomial","content":"Random.Multinomial \nMultinomial \n\n Returns a 2D array where each row contains \u0060numSamples\u0060 indices sampled from the multinomial probability distribution defined by the probabilities in the corresponding row of the \u0060probs\u0060 array.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Multinomial","title":"Random.Multinomial","content":"Random.Multinomial \nMultinomial \n\n Samples a number of random values  array of random values for the given weighted distribution\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Normal","title":"Random.Normal","content":"Random.Normal \nNormal \n\n Samples a random value from the normal distribution with the given mean and standard deviation.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Normal","title":"Random.Normal","content":"Random.Normal \nNormal \n\n Samples a random value from the standard normal distribution with mean 0 and standard deviation 1.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Seed","title":"Random.Seed","content":"Random.Seed \nSeed \n\n Sets the random seed.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Shuffle","title":"Random.Shuffle","content":"Random.Shuffle \nShuffle \n\n Returns an array that is a randomly-shuffled version of the given array, using the Durstenfeld/Knuth shuffle.\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#UUID","title":"Random.UUID","content":"Random.UUID \nUUID \n\n Returns a universally unique identifier (UUID) string\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Uniform","title":"Random.Uniform","content":"Random.Uniform \nUniform \n\n Samples a random value from the uniform distribution with the given parameters [low, high).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-random.html#Uniform","title":"Random.Uniform","content":"Random.Uniform \nUniform \n\n Samples a random value from the standard uniform distribution over the interval [0,1).\n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-helpers.html","title":"helpers","content":"helpers \n \nhelpers.printVal \nprintVal \nhelpers.toPython \ntoPython \nhelpers.runScript \nrunScript"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-helpers.html#printVal","title":"helpers.printVal","content":"helpers.printVal \nprintVal \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-helpers.html#toPython","title":"helpers.toPython","content":"helpers.toPython \ntoPython \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-helpers.html#runScript","title":"helpers.runScript","content":"helpers.runScript \nrunScript \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html","title":"Pyplot","content":"Pyplot \n \nPyplot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nPyplot.addPython \naddPython \nPyplot.figure \nfigure \nPyplot.hist \nhist \nPyplot.legend \nlegend \nPyplot.plot \nplot \nPyplot.plot \nplot \nPyplot.savefig \nsavefig \nPyplot.tightLayout \ntightLayout \nPyplot.xlabel \nxlabel \nPyplot.xscale \nxscale \nPyplot.ylabel \nylabel \nPyplot.yscale \nyscale \nPyplot.script \nscript"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#\u0060\u0060.ctor\u0060\u0060","title":"Pyplot.\u0060\u0060.ctor\u0060\u0060","content":"Pyplot.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#addPython","title":"Pyplot.addPython","content":"Pyplot.addPython \naddPython \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#figure","title":"Pyplot.figure","content":"Pyplot.figure \nfigure \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#hist","title":"Pyplot.hist","content":"Pyplot.hist \nhist \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#legend","title":"Pyplot.legend","content":"Pyplot.legend \nlegend \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#plot","title":"Pyplot.plot","content":"Pyplot.plot \nplot \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#plot","title":"Pyplot.plot","content":"Pyplot.plot \nplot \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#savefig","title":"Pyplot.savefig","content":"Pyplot.savefig \nsavefig \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#tightLayout","title":"Pyplot.tightLayout","content":"Pyplot.tightLayout \ntightLayout \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#xlabel","title":"Pyplot.xlabel","content":"Pyplot.xlabel \nxlabel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#xscale","title":"Pyplot.xscale","content":"Pyplot.xscale \nxscale \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#ylabel","title":"Pyplot.ylabel","content":"Pyplot.ylabel \nylabel \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#yscale","title":"Pyplot.yscale","content":"Pyplot.yscale \nyscale \n"},{"uri":"https://diffsharp.github.io/reference/diffsharp-util-pyplot.html#script","title":"Pyplot.script","content":"Pyplot.script \nscript \n"},{"uri":"https://diffsharp.github.io/tensors.html","title":"tensors","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\n\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n// Google Colab only: uncomment and run the following to install dotnet and the F# kernel\n// !bash \u003C(curl -Ls https://raw.githubusercontent.com/gbaydin/scripts/main/colab_dotnet6.sh)\n#endif // IPYNB\n(*** condition: ipynb ***)\n#if IPYNB\n// Import DiffSharp package\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n\n// Set dotnet interactive formatter to plaintext\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n\n(**\n[![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n* The \u0060cref:T:DiffSharp.dsharp\u0060 API\n\n* The \u0060cref:T:DiffSharp.Tensor\u0060 type\n\nSaving tensors as image and loading images as tensors\n\n\n## Converting between Tensors and arrays\n\nSystem.Array and F# arrays\n\n*)\n\nopen DiffSharp\n\n// Tensor\nlet t1 = dsharp.tensor [ 0.0 .. 0.2 .. 1.0 ]\n\n// System.Array\nlet a1 = t1.toArray()\n\n// []\u003Cfloat32\u003E\nlet a1b = t1.toArray() :?\u003E float32[]\n\n// Tensor\nlet t2 = dsharp.randn([3;3;3])\n\n// [,,]\u003Cfloat32\u003E\nlet a2 = t2.toArray() :?\u003E float32[,,]"},{"uri":"https://diffsharp.github.io/differentiable-programming.html","title":"differentiable-programming","content":"// PyTorch style\n\n// DiffSharp style"},{"uri":"https://diffsharp.github.io/index.html","title":"DiffSharp: Differentiable Tensor Programming Made Simple\n","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\n\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n// Google Colab only: uncomment and run the following to install dotnet and the F# kernel\n// !bash \u003C(curl -Ls https://raw.githubusercontent.com/gbaydin/scripts/main/colab_dotnet6.sh)\n#endif // IPYNB\n(*** condition: ipynb ***)\n#if IPYNB\n// Import DiffSharp package\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n\n// Set dotnet interactive formatter to plaintext\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n\n(**\n[![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# DiffSharp: Differentiable Tensor Programming Made Simple\n\nDiffSharp is a tensor library with support for [differentiable programming](https://en.wikipedia.org/wiki/Differentiable_programming).\nIt is designed for use in machine learning, probabilistic programming, optimization and other domains.\n\n\u003Cbutton class=\u0022button\u0022 style=\u0022vertical-align:middle\u0022 onclick=\u0022window.location.href=\u0027{{root}}install.html\u0027\u0022\u003E\u003Cspan\u003EInstall \u00BB\u003C/span\u003E\u003C/button\u003E\n\n## Key Features\n\n\uD83D\uDDF9 Nested and mixed-mode differentiation\n\n\uD83D\uDDF9 Common optimizers, model elements, differentiable probability distributions\n\n\uD83D\uDDF9 F# for robust functional programming \n\n\uD83D\uDDF9 PyTorch familiar naming and idioms, efficient LibTorch CUDA/C\u002B\u002B tensors with GPU support\n\n\uD83D\uDDF9 Linux, macOS, Windows supported\n\n\uD83D\uDDF9 Use interactive notebooks in Jupyter and Visual Studio Code\n\n\uD83D\uDDF9 100% open source \n\n\n## Differentiable Programming\n\nDiffSharp provides world-leading automatic differentiation capabilities for tensor code, including composable gradients, Hessians, Jacobians, directional derivatives, and matrix-free Hessian- and Jacobian-vector products over arbitrary user code. This goes beyond conventional tensor libraries such as PyTorch and TensorFlow, allowing the use of nested forward and reverse differentiation up to any level. \n\nWith DiffSharp, you can compute higher-order derivatives efficiently and differentiate functions that are internally making use of differentiation and gradient-based optimization. \n\n\u003C/br\u003E\n\u003Cimg src=\u0022img/anim-intro-2.gif\u0022 width=\u002285%\u0022 /\u003E\n\n## Practical, Familiar and Efficient\n\nDiffSharp comes with a [LibTorch](https://pytorch.org/cppdocs/) backend, using the same C\u002B\u002B and CUDA implementations for tensor computations that power [PyTorch](https://pytorch.org/). On top of these raw tensors (LibTorch\u0027s ATen, excluding autograd), DiffSharp implements its own computation graph and differentiation capabilities. It is tested on Linux, macOS, and Windows, and it supports CUDA and GPUs.\n\nThe DiffSharp API is designed to be similar to [the PyTorch Python API](https://pytorch.org/docs/stable/index.html) through very similar naming and idioms, and where elements have similar names the PyTorch documentation can generally be used as a guide.\n\nDiffSharp uses [the incredible F# programming language](https://dot.net/fsharp) for tensor programming. F# code is generally faster and more robust than equivalent Python code, while still being succinct and compact like Python, making it an ideal modern AI and machine learning implementation language. This allows fluent and productive code for tensor programming.\n\n\u003C/br\u003E\n\u003Ciframe width=\u002285%\u0022 src=\u0022https://www.youtube.com/embed/_QnbV6CAWXc\u0022 title=\u0022YouTube video player\u0022 frameborder=\u00220\u0022 allow=\u0022accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0022 allowfullscreen\u003E\u003C/iframe\u003E\n\n## Interactive Notebooks\n\nAll documentation pages in this website are interactive notebooks which you can execute directly in your browser without installing anything in your local machine.\n\nUsing the buttons [![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb) [![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb) on the top of each page, you can execute the page as an interactive notebook running on cloud servers provided by [Google Colab](https://colab.research.google.com/) and [Binder](https://mybinder.org/).\n\nUsing the buttons [![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx) \n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb) you can also download a page as a script or an interactive notebook, which you can execute locally in [Jupyter](https://jupyter.org/) or [Visual Studio Code](https://code.visualstudio.com/) using [dotnet interactive](https://github.com/dotnet/interactive).\n\n## Example\n\nDefine and add two tensors:\n*)\n\nopen DiffSharp\n\nlet t1 = dsharp.tensor [ 0.0 ..0.2.. 1.0 ] // Gives [0., 0.2, 0.4, 0.6, 0.8, 1.]\nlet t2 = dsharp.tensor [ 1, 2, 3, 4, 5, 6 ]\n\nt1 \u002B t2\n(*** include-it ***)\n\n(** \nCompute a convolution:\n*)\nlet t3 = dsharp.tensor [[[[0.0 .. 10.0]]]]\nlet t4 = dsharp.tensor [[[[0.0 ..0.1.. 1.0]]]]\n\nt3.conv2d(t4)\n(*** include-it ***)\n\n(** \nTake the gradient of a vector-to-scalar function:\n*)\n\nlet f (x: Tensor) = x.exp().sum()\n\ndsharp.grad f (dsharp.tensor([1.8, 2.5]))\n(*** include-it ***)\n\n(**\nCompute a nested derivative (checking for [perturbation confusion](https://doi.org/10.1007/s10990-008-9037-1)):\n*)\n\nlet x0 = dsharp.tensor(1.)\nlet y0 = dsharp.tensor(2.)\ndsharp.diff (fun x -\u003E x * dsharp.diff (fun y -\u003E x * y) y0) x0\n(*** include-it ***)\n\n\n(**\nDefine a model and optimize it:\n*)\n(*** do-not-eval-file ***)\nopen DiffSharp.Data\nopen DiffSharp.Model\nopen DiffSharp.Compose\nopen DiffSharp.Util\nopen DiffSharp.Optim\n\nlet epochs = 2\nlet batchSize = 32\nlet numBatches = 5\n\nlet trainSet = MNIST(\u0022../data\u0022, train=true, transform=id)\nlet trainLoader = trainSet.loader(batchSize=batchSize, shuffle=true)\n\nlet validSet = MNIST(\u0022../data\u0022, train=false, transform=id)\nlet validLoader = validSet.loader(batchSize=batchSize, shuffle=false)\n\nlet encoder =\n    Conv2d(1, 32, 4, 2)\n    --\u003E dsharp.relu\n    --\u003E Conv2d(32, 64, 4, 2)\n    --\u003E dsharp.relu\n    --\u003E Conv2d(64, 128, 4, 2)\n    --\u003E dsharp.flatten(1)\n\nlet decoder =\n    dsharp.unflatten(1, [128;1;1])\n    --\u003E ConvTranspose2d(128, 64, 4, 2)\n    --\u003E dsharp.relu\n    --\u003E ConvTranspose2d(64, 32, 4, 3)\n    --\u003E dsharp.relu\n    --\u003E ConvTranspose2d(32, 1, 4, 2)\n    --\u003E dsharp.sigmoid\n\nlet model = VAE([1;28;28], 64, encoder, decoder)\n\nlet lr = dsharp.tensor(0.001)\nlet optimizer = Adam(model, lr=lr)\n\nfor epoch = 1 to epochs do\n    let batches = trainLoader.epoch(numBatches)\n    for i, x, _ in batches do\n        model.reverseDiff()\n        let l = model.loss(x)\n        l.reverse()\n        optimizer.step()\n        print $\u0022Epoch: {epoch} minibatch: {i} loss: {l}\u0022 \n\nlet validLoss = \n    validLoader.epoch() \n    |\u003E Seq.sumBy (fun (_, x, _) -\u003E model.loss(x, normalize=false))\n\nprint $\u0022Validation loss: {validLoss/validSet.length}\u0022\n\n(**\n\nNumerous other model definition, differentiation, and training patterns are supported. See the tutorials in the left-hand menu and [examples](https://github.com/DiffSharp/DiffSharp/tree/dev/examples) on GitHub.\n\n## More Information\n\nDiffSharp is developed by [At\u0131l\u0131m G\u00FCne\u015F Baydin](http://www.robots.ox.ac.uk/~gunes/), [Don Syme](https://www.microsoft.com/en-us/research/people/dsyme/)\nand other contributors, having started as a project supervised by the automatic differentiation wizards [Barak Pearlmutter](https://scholar.google.com/citations?user=AxFrw0sAAAAJ\u0026hl=en) and [Jeffrey Siskind](https://scholar.google.com/citations?user=CgSBtPYAAAAJ\u0026hl=en). \n\nPlease join us [on GitHub](https://github.com/DiffSharp/DiffSharp)!\n\n*)"},{"uri":"https://diffsharp.github.io/optimization.html","title":"optimization","content":""},{"uri":"https://diffsharp.github.io/quickstart.html","title":"Quickstart\n","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n#r \u0022nuget: SixLabors.ImageSharp,1.0.1\u0022 \n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\nopen DiffSharp.Util\n\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#r \u0022nuget: SixLabors.ImageSharp,1.0.1\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n// Google Colab only: uncomment and run the following to install dotnet and the F# kernel\n// !bash \u003C(curl -Ls https://raw.githubusercontent.com/gbaydin/scripts/main/colab_dotnet6.sh)\n#endif // IPYNB\n(*** condition: ipynb ***)\n#if IPYNB\n// Import DiffSharp package\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#r \u0022nuget: SixLabors.ImageSharp,1.0.1\u0022\n\n// Set dotnet interactive formatter to plaintext\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n\n(**\n[![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# Quickstart\n\nHere we cover some key tasks involved in a typical machine learning pipeline and how these can be implemented with DiffSharp. Note that a significant part of DiffSharp\u0027s design has been influenced by [PyTorch](https://pytorch.org/) and you would feel mostly at home if you have familiarity with PyTorch.\n\n## Datasets and Data Loaders\n\nDiffSharp provides the \u0060cref:T:DiffSharp.Data.Dataset\u0060 type that represents a data source and the \u0060cref:T:DiffSharp.Data.DataLoader\u0060 type that handles the loading of data from datasets and iterating over [minibatches](https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Iterative_method) of data.\n\nSee the [DiffSharp.Data](/reference/diffsharp-data.html) namespace for the full API reference.\n\n### Datasets\n\nDiffSharp has ready-to-use types that cover main datasets typically used in machine learning, such as \u0060cref:T:DiffSharp.Data.MNIST\u0060, \u0060cref:T:DiffSharp.Data.CIFAR10\u0060, \u0060cref:T:DiffSharp.Data.CIFAR100\u0060, and also more generic dataset types such as \u0060cref:T:DiffSharp.Data.TensorDataset\u0060 or \u0060cref:T:DiffSharp.Data.ImageDataset\u0060.\n\nThe following loads the [MNIST](http://yann.lecun.com/exdb/mnist/) dataset and shows one image entry and the corresponding label.\n*)\n\nopen DiffSharp\nopen DiffSharp.Data\n\n// First ten images in MNIST training set\nlet dataset = MNIST(\u0022../data\u0022, train=true, transform=id, n=10)\n\n// Inspect a single image and label\nlet data, label = dataset[7]\n\n// Save image to file\ndata.saveImage(\u0022test.png\u0022)\n\n(** *)\n\n(*** hide ***)\npngToHtml \u0022test.png\u0022 64\n(*** include-it-raw ***)\n\n// Inspect data as ASCII and show label\nprintfn \u0022Data: %A\\nLabel: %A\u0022 (data.toImageString()) label\n(*** include-output ***)\n\n(**\n \n### Data Loaders\n\nA data loader handles tasks such as constructing minibatches from an underlying dataset on-the-fly, shuffling the data, and moving the data tensors between devices. In the example below we show a single batch of six MNIST images and their corresponding classification labels.\n\n*)\n\nlet loader = DataLoader(dataset, shuffle=true, batchSize=6)\nlet batch, labels = loader.batch()\n\nprintfn \u0022%A\\nLabels: %A\u0022 (batch.toImageString()) labels\n(*** include-output ***)\n\n(**\n\nIn practice a data loader is typically used to iterate over all minibatches in a given dataset in order to feed each minibatch through a machine learning model. One full iteration over the dataset would be called an \u0022epoch\u0022. Typically you would perform multiple such epochs of iterations during the training of a model.\n\n*)\n\nfor epoch = 1 to 10 do\n    for i, data, labels in loader.epoch() do\n        printfn \u0022Epoch %A, minibatch %A\u0022 epoch (i\u002B1)\n        // Process the minibatch\n        // ...\n(**\n\n## Models\n\nMany machine learning models are differentiable functions whose parameters can be tuned via [gradient-based optimization](https://en.wikipedia.org/wiki/Gradient_descent), finding an optimum for an objective function that quantifies the fit of the model to a given set of data. These models are typically built as compositions non-linear functions and ready-to-use building blocks such as linear, recurrent, and convolutional layers.\n\nDiffSharp provides the most commonly used model building blocks including convolutions, transposed convolutions, batch normalization, dropout, recurrent and other architectures.\n\nSee the [DiffSharp.Model](/reference/diffsharp-model.html) namespace for the full API reference.\n\n### Constructing models, PyTorch style\n\nIf you have experience with [PyTorch](https://pytorch.org/), you would find the following way of model definition familiar. Let\u0027s look at an example of a [generative adversarial network (GAN)](https://arxiv.org/abs/1406.2661) architecture.\n*)\nopen DiffSharp.Model\nopen DiffSharp.Compose\n\n// PyTorch style\n\n// Define a model class inheriting the base\ntype Generator(nz: int) =\n    inherit Model()\n    let fc1 = Linear(nz, 256)\n    let fc2 = Linear(256, 512)\n    let fc3 = Linear(512, 1024)\n    let fc4 = Linear(1024, 28*28)\n    do base.addModel(fc1, fc2, fc3, fc4)\n    override self.forward(x) =\n        x\n        |\u003E dsharp.view([-1;nz])\n        |\u003E fc1.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E fc2.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E fc3.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E fc4.forward\n        |\u003E dsharp.tanh\n\n// Define a model class inheriting the base\ntype Discriminator(nz:int) =\n    inherit Model()\n    let fc1 = Linear(28*28, 1024)\n    let fc2 = Linear(1024, 512)\n    let fc3 = Linear(512, 256)\n    let fc4 = Linear(256, 1)\n    do base.addModel(fc1, fc2, fc3, fc4)\n    override self.forward(x) =\n        x\n        |\u003E dsharp.view([-1;28*28])\n        |\u003E fc1.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E dsharp.dropout(0.3)\n        |\u003E fc2.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E dsharp.dropout(0.3)\n        |\u003E fc3.forward\n        |\u003E dsharp.leakyRelu(0.2)\n        |\u003E dsharp.dropout(0.3)\n        |\u003E fc4.forward\n        |\u003E dsharp.sigmoid\n\n// Instantiate the defined classes\nlet nz = 128\nlet gen = Generator(nz)\nlet dis = Discriminator(nz)\n\nprint gen\nprint dis\n(*** include-output ***)\n\n(**\n### Constructing models, DiffSharp style\n\nA key advantage of DiffSharp lies in the [functional programming](https://en.wikipedia.org/wiki/Functional_programming) paradigm enabled by the F# language, where functions are first-class citizens, many algorithms can be constructed by applying and composing functions, and differentiation operations can be expressed as composable [higher-order functions](https://en.wikipedia.org/wiki/Higher-order_function). This allows very succinct (and beautiful) machine learning code to be expressed as a powerful combination of [lambda calculus](https://en.wikipedia.org/wiki/Lambda_calculus) and [differential calculus](https://en.wikipedia.org/wiki/Differential_calculus).\n\nFor example, the following constructs the same GAN architecture (that we constructed in PyTorch style in the previous section) using DiffSharp\u0027s \u0060--\u003E\u0060 composition operator, which allows you to seamlessly compose \u0060Model\u0060 instances and differentiable \u0060Tensor-\u003ETensor\u0060 functions. \n*)\n\n// DiffSharp style\n\n// Model as a composition of models and Tensor-\u003ETensor functions\nlet generator =\n    dsharp.view([-1;nz])\n    --\u003E Linear(nz, 256)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E Linear(256, 512)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E Linear(512, 1024)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E Linear(1024, 28*28)\n    --\u003E dsharp.tanh\n\n// Model as a composition of models and Tensor-\u003ETensor functions\nlet discriminator =\n    dsharp.view([-1; 28*28])\n    --\u003E Linear(28*28, 1024)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E dsharp.dropout(0.3)\n    --\u003E Linear(1024, 512)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E dsharp.dropout(0.3)\n    --\u003E Linear(512, 256)\n    --\u003E dsharp.leakyRelu(0.2)\n    --\u003E dsharp.dropout(0.3)\n    --\u003E Linear(256, 1)\n    --\u003E dsharp.sigmoid\n\nprint generator\nprint discriminator\n(*** include-output ***)"},{"uri":"https://diffsharp.github.io/tutorial-gan.html","title":"tutorial-gan","content":""},{"uri":"https://diffsharp.github.io/tutorial-vae.html","title":"tutorial-vae","content":""},{"uri":"https://diffsharp.github.io/models.html","title":"models","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\n\n(**\nTest \n*)\n\nopen DiffSharp\n\ndsharp.config(backend=Backend.Reference)\n\nlet a = dsharp.tensor([1,2,3])\nprintfn \u0022%A\u0022 a\n(*** include-fsi-output ***)"},{"uri":"https://diffsharp.github.io/tutorial-language.html","title":"tutorial-language","content":""},{"uri":"https://diffsharp.github.io/tutorial-classifier.html","title":"tutorial-classifier","content":""},{"uri":"https://diffsharp.github.io/probability-distributions.html","title":"probability-distributions","content":""},{"uri":"https://diffsharp.github.io/install.html","title":"Installing\n","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\n\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n// Google Colab only: uncomment and run the following to install dotnet and the F# kernel\n// !bash \u003C(curl -Ls https://raw.githubusercontent.com/gbaydin/scripts/main/colab_dotnet6.sh)\n#endif // IPYNB\n(*** condition: ipynb ***)\n#if IPYNB\n// Import DiffSharp package\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n\n// Set dotnet interactive formatter to plaintext\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n\n(**\n[![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# Installing\n\nDiffSharp runs on [dotnet](https://dotnet.microsoft.com/), a cross-platform, open-source platform supported on Linux, macOS, and Windows.\n\nThere are various ways in which you can run DiffSharp, the main ones being: [interactive notebooks](https://github.com/dotnet/interactive) supporting [Visual Studio Code](https://code.visualstudio.com/) and [Jupyter](https://jupyter.org/); running in a [REPL](https://github.com/jonsequitur/dotnet-repl); running [script files](https://docs.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/); and [compiling, packing, and publishing](https://docs.microsoft.com/en-us/dotnet/core/introduction) performant binaries.\n\n\n## Interactive Notebooks and Scripts\n\nYou can use DiffSharp in [dotnet interactive](https://github.com/dotnet/interactive) notebooks in [Visual Studio Code](https://code.visualstudio.com/) or [Jupyter](https://jupyter.org/), or in F# scripts (\u0060.fsx\u0060 files), by referencing the package as follows:\n\n    // Use one of the following three lines\n    #r \u0022nuget: DiffSharp-cpu\u0022 // Use the latest version\n    #r \u0022nuget: DiffSharp-cpu, *-*\u0022 // Use the latest pre-release version\n    #r \u0022nuget: DiffSharp-cpu, 1.0.1\u0022 // Use a specific version\n\n    open DiffSharp\n\n\u003C/br\u003E\n\u003Cimg src=\u0022img/anim-intro-1.gif\u0022 width=\u002285%\u0022 /\u003E\n\n## Dotnet Applications\n\nYou can add DiffSharp to your dotnet application using the [dotnet](https://dotnet.microsoft.com/) command-line interface (CLI).\n\nFor example, the following creates a new F# console application and adds the latest pre-release version of the \u0060DiffSharp-cpu\u0060 package as a dependency.\n\n    dotnet new console -lang \u0022F#\u0022 -o src/app\n    cd src/app\n    dotnet add package --prerelease DiffSharp-cpu\n    dotnet run\n\n## Packages\n\nWe provide several package bundles for a variety of use cases.\n\n* [DiffSharp-cpu](https://www.nuget.org/packages/DiffSharp-cpu)\u003C/br\u003E\n  Includes LibTorch CPU binaries for Linux, macOS, and Windows.\n* [DiffSharp-cuda-linux](https://www.nuget.org/packages/DiffSharp-cuda-linux) / [DiffSharp-cuda-windows](https://www.nuget.org/packages/DiffSharp-cuda-windows)\u003C/br\u003E\n  Include LibTorch CPU and CUDA GPU binaries for Linux and Windows. Large download.\n* [DiffSharp-lite](https://www.nuget.org/packages/DiffSharp-lite)\u003C/br\u003E\n  Includes the Torch backend but not the LibTorch binaries. \n\n### Using local LibTorch binaries (optional)\n\nYou can combine the \u0060DiffSharp-lite\u0060 package bundle with existing local native binaries of LibTorch for your OS (Linux, Mac, or Windows) installed through other means. \n\nLibTorch is the main tensor computation core implemented in C\u002B\u002B/CUDA and it is used by PyTorch in Python and by other projects in various programming languages. The following are two common ways of having LibTorch in your system.\n\n* If you use Python and have [PyTorch](https://pytorch.org/) installed, this comes with LibTorch as a part of the PyTorch distribution. If your GPU works in this PyTorch installation without any issues, it will also work in DiffSharp.\n* You can download the native LibTorch package without Python by following the [get started](https://pytorch.org/get-started/locally/) instructions in the PyTorch website, and extracting the downloaded archive to a folder in your system.\n\nBefore using the \u0060Torch\u0060 backend in DiffSharp, you will have to add an explicit load of the LibTorch native library, which you can do as follows. In order to find the location of LibTorch binaries, searching for \u0060libtorch.so\u0060 in your system might be helpful. Note that this file is called \u0060libtorch.so\u0060 in Linux, \u0060libtorch.dylib\u0060 in macOS, and \u0060torch.dll\u0060 in Windows.\n\n    open System.Runtime.InteropServices\n    NativeLibrary.Load(\u0022/home/user/anaconda3/lib/python3.8/site-packages/torch/lib/libtorch.so\u0022)\n\n\n## Backends and Devices\n\nDiffSharp currently provides two computation backends.\n\n* The \u0060Torch\u0060 backend is the default and recommended backend based on [LibTorch](https://pytorch.org/cppdocs/), using the same C\u002B\u002B and CUDA implementations for tensor computations that power [PyTorch](https://pytorch.org/). On top of these raw tensors (LibTorch\u0027s ATen, excluding autograd), DiffSharp implements its own computation graph and differentiation capabilities. This backend requires platform-specific binaries of LibTorch, which we provide and test on Linux, macOS, and Windows.\n\n* The \u0060Reference\u0060 backend is implemented purely in F# and can run on any hardware platform where [dotnet](https://dotnet.microsoft.com/) can run (for example iOS, Android, Raspberry Pi). This backend has reasonable performance for use cases dominated by scalar and small tensor operations, and is not recommended for use cases involving large tensor operations (such as machine learning). This backend is always available.\n\n### Configuration of Default Backend, Device, and Tensor Type\n\nSelection of the default backend, device, and tensor type is done using \u0060cref:M:DiffSharp.dsharp.config\u0060.\n\n* \u0060cref:T:DiffSharp.Dtype\u0060 choices available: \u0060BFloat16\u0060, \u0060Bool\u0060, \u0060Byte\u0060, \u0060Float16\u0060, \u0060Float32\u0060, \u0060Float64\u0060, \u0060Int16\u0060, \u0060Int32\u0060, \u0060Int64\u0060, \u0060Int8\u0060\n\n* \u0060cref:T:DiffSharp.Device\u0060 choices available: \u0060CPU\u0060, \u0060GPU\u0060\n\n* \u0060cref:T:DiffSharp.Backend\u0060 choices available: \u0060Reference\u0060, \u0060Torch\u0060\n\nFor example, the following selects the \u0060Torch\u0060 backend with single precision tensors as the default tensor type and GPU (CUDA) execution.\n\n*)\n\nopen DiffSharp\n\ndsharp.config(dtype=Dtype.Float32, device=Device.GPU, backend=Backend.Torch)\n\n(**\nThe following selects the \u0060Reference\u0060 backend.\n*)\n\ndsharp.config(backend=Backend.Reference)\n\n(**\nA tensor\u0027s backend and device can be inspected as follows.\n\n*)\nlet t = dsharp.tensor [ 0 .. 10 ]\n\nlet device = t.device\nlet backend = t.backend\n\n(**\nTensors can be moved between devices (for example from CPU to GPU) using \u0060cref:M:DiffSharp.Tensor.move(DiffSharp.Device)\u0060. For example:\n*)\nlet t2 = t.move(Device.GPU)\n\n(**\n## Developing DiffSharp Libraries\n\nTo develop libraries built on DiffSharp, you can use the following guideline to reference the various packages.\n\n* Reference \u0060DiffSharp.Core\u0060 and \u0060DiffSharp.Data\u0060 in your library code.\n* Reference \u0060DiffSharp.Backends.Reference\u0060 in your correctness testing code.\n* Reference \u0060DiffSharp.Backends.Torch\u0060 and \u0060libtorch-cpu\u0060 in your CPU testing code.\n* Reference \u0060DiffSharp.Backends.Torch\u0060 and \u0060libtorch-cuda-linux\u0060 or \u0060libtorch-cuda-windows\u0060 in your (optional) GPU testing code.\n\n*)"},{"uri":"https://diffsharp.github.io/README.html","title":"Running notebooks in MyBinder\n","content":"\n\n# Running notebooks in MyBinder\n\nThe \u0060Dockerfile\u0060 and \u0060NuGet.config\u0060 allow us to run generated notebooks in [MyBinder](https://mybinder.org)\n\n* \u0060master\u0060 branch of diffsharp/diffsharp.github.io:  [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master)\n\n# Generating docs\n\n\nTo iterate on docs (requires evaluation off since DLLs get locked)\n\n    dotnet fsdocs watch \n\nTo use a local build of FSharp.Formatting:\n\n       git clone https://github.com/fsprojects/FSharp.Formatting  ../FSharp.Formatting\n       pushd ..\\FSharp.Formatting\n       .\\build\n       popd\n\nThen:\n\n       ..\\FSharp.Formatting\\src\\FSharp.Formatting.CommandTool\\bin\\Debug\\net6.0\\fsdocs.exe watch\n       ..\\FSharp.Formatting\\src\\FSharp.Formatting.CommandTool\\bin\\Debug\\net6.0\\fsdocs.exe build --clean --eval\n\n## Generated Notebooks\n\nNotebooks are generated for all .md and .fsx files under docs as part of the build.\n\n* Dockerfile - see https://github.com/dotnet/interactive/blob/master/docs/CreateBinder.md\n\n* NuGet.config - likewise\n\nSee MyBinder for creating URLs\n"},{"uri":"https://diffsharp.github.io/extensions.html","title":"Extending DiffSharp\n","content":"(*** condition: prepare ***)\n#I \u0022../tests/DiffSharp.Tests/bin/Debug/net6.0\u0022\n#r \u0022DiffSharp.Core.dll\u0022\n#r \u0022DiffSharp.Data.dll\u0022\n#r \u0022DiffSharp.Backends.Reference.dll\u0022\n#r \u0022DiffSharp.Backends.Torch.dll\u0022\n// These are needed to make fsdocs --eval work. If we don\u0027t select a backend like this in the beginning, we get erratic behavior.\nDiffSharp.dsharp.config(backend=DiffSharp.Backend.Reference)\nDiffSharp.dsharp.seed(123)\n\n(*** condition: fsx ***)\n#if FSX\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n#endif // FSX\n(*** condition: ipynb ***)\n#if IPYNB\n// Google Colab only: uncomment and run the following to install dotnet and the F# kernel\n// !bash \u003C(curl -Ls https://raw.githubusercontent.com/gbaydin/scripts/main/colab_dotnet6.sh)\n#endif // IPYNB\n(*** condition: ipynb ***)\n#if IPYNB\n// Import DiffSharp package\n#r \u0022nuget: DiffSharp-lite,{{fsdocs-package-version}}\u0022\n\n// Set dotnet interactive formatter to plaintext\nFormatter.SetPreferredMimeTypesFor(typeof\u003Cobj\u003E, \u0022text/plain\u0022)\nFormatter.Register(fun (x:obj) (writer: TextWriter) -\u003E fprintfn writer \u0022%120A\u0022 x )\n#endif // IPYNB\n\n(**\n[![Binder](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DiffSharp/diffsharp.github.io/blob/master/{{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Binder](img/badge-binder.svg)](https://mybinder.org/v2/gh/diffsharp/diffsharp.github.io/master?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script](img/badge-script.svg)]({{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Script](img/badge-notebook.svg)]({{fsdocs-source-basename}}.ipynb)\n\n# Extending DiffSharp\n\n\nDiffSharp provides most of the essential operations found in tensor libraries such as [NumPy](https://numpy.org/), [PyTorch](https://pytorch.org/), and [TensorFlow](https://www.tensorflow.org/). All differentiable operations support the forward, reverse, and nested differentiation modes. \n\nWhen implementing new operations, you should prefer to implement these as compositions of existing DiffSharp \u0060cref:T:DiffSharp.Tensor\u0060 operations, which would give you differentiability out of the box.\n\nIn the rare cases where you need to extend DiffSharp with a completely new differentiable operation that cannot be implemented as a composition of existing operations, you can use the provided extension API.\n\n## Simple elementwise functions\n\nIf the function you would like to implement is a simple elementwise function, you can use the \u0060cref:T:DiffSharp.UnaryOpElementwise\u0060 or \u0060cref:T:DiffSharp.BinaryOpElementwise\u0060 types to define your function and its derivatives. The forward, reverse, and nested differentiation rules for the function are automatically generated by the type. The documentation of these two types detail how they should be instantiated.\n\nLet\u0027s see several examples.\n\n$ f(a) = \\mathrm{sin}(a) $, with derivative $ \\frac{\\partial f(a)}{\\partial a} = \\mathrm{cos}(a) \\;$.\n*)\nopen DiffSharp\n\ntype Tensor with\n    member a.sin() = \n        Tensor.Op\n            { new UnaryOpElementwise(\u0022sin\u0022) with \n                member _.fRaw(a) = a.SinT()\n                member _.dfda(a,f) = a.cos()\n            }\n            (a)\n\n(**\n$ f(a) = \\mathrm{log}(a) $, with derivative $ \\frac{\\partial f(a)}{\\partial a} = 1/a \\;$.\n*)\ntype Tensor with\n    member a.log() =\n        Tensor.Op\n            { new UnaryOpElementwise(\u0022log\u0022) with\n                member _.fRaw(a) = a.LogT()\n                member _.dfda(a,f) = 1/a\n            }\n            (a)\n\n\n(**\n$ f(a, b) = ab $, with derivatives $ \\frac{\\partial f(a, b)}{\\partial a} = b $, $ \\frac{\\partial f(a, b)}{\\partial b} = a \\;$.\n*)\ntype Tensor with\n    member a.mul(b) =\n        Tensor.Op\n            { new BinaryOpElementwise(\u0022mul\u0022) with\n                member _.fRaw(a,b) = a.MulTT(b)\n                member _.dfda(a,b,f) = b\n                member _.dfdb(a,b,f) = a\n            }\n            (a,b)\n\n(**\n$ f(a, b) = a^b $, with derivatives $ \\frac{\\partial f(a, b)}{\\partial a} = b a^{b-1} $, $ \\frac{\\partial f(a, b)}{\\partial b} = a^b \\mathrm{log}(a) \\;$. Note the use of the argument \u0060f\u0060 in the derivative definitions that makes use of the pre-computed value of $ f(a, b) = a^b $ that is available to the derivative implementation.\n*)\ntype Tensor with\n    member a.pow(b) =\n        Tensor.Op\n            { new BinaryOpElementwise(\u0022pow\u0022) with\n                member _.fRaw(a,b) = a.PowTT(b)\n                member _.dfda(a,b,f) = b * f / a  // equivalent to b * a.pow(b-1)\n                member _.dfdb(a,b,f) = f * a.log()  // equivalent to a.pow(b) * a.log()\n            }\n            (a,b)\n\n\n(**\n## General functions\n\nFor more complicated functions, you can use the most general way of defining functions using the \u0060cref:T:DiffSharp.UnaryOp\u0060 or \u0060cref:T:DiffSharp.BinaryOp\u0060 types, which allow you to define the full forward and reverse mode differentiation rules. The documentation of these two types detail how they should be instantiated.\n\nLet\u0027s see several examples.\n\n$ f(A) = A^{\\intercal} $, with the forward derivative propagation rule $ \\frac{\\partial f(A)}{\\partial X} = \\frac{\\partial A}{\\partial X} \\frac{\\partial f(A)}{\\partial A} = (\\frac{\\partial A}{\\partial X})^{\\intercal} $ and the reverse derivative propagation rule $ \\frac{\\partial Y}{\\partial A} = \\frac{\\partial Y}{\\partial f(A)} \\frac{\\partial f(A)}{\\partial A} = (\\frac{\\partial Y}{\\partial f(A)})^{\\intercal} \\;$.\n*)\ntype Tensor with\n    member a.transpose() =\n        Tensor.Op\n            { new UnaryOp(\u0022transpose\u0022) with\n                member _.fRaw(a) = a.TransposeT2()\n                member _.ad_dfda(a,ad,f) = ad.transpose()\n                member _.fd_dfda(a,f,fd) = fd.transpose()\n            }\n            (a)\n\n\n(**\n$ f(A, B) = AB $, with the forward derivative propagation rule $ \\frac{\\partial(A, B)}{\\partial X} = \\frac{\\partial A}{\\partial X} \\frac{\\partial f(A, B)}{\\partial A} \u002B \\frac{\\partial B}{\\partial X} \\frac{\\partial f(A, B)}{\\partial B} = \\frac{\\partial A}{\\partial X} B \u002B A \\frac{\\partial B}{\\partial X}$ and the reverse propagation rule $ \\frac{\\partial Y}{\\partial A} = \\frac{\\partial Y}{\\partial f(A, B)} \\frac{\\partial f(A, B)}{\\partial A} = \\frac{\\partial Y}{\\partial f(A, B)} B^{\\intercal} $, $ \\frac{\\partial Y}{\\partial B} = \\frac{\\partial Y}{\\partial f(A, B)} \\frac{\\partial f(A, B)}{B} = A^{\\intercal} \\frac{\\partial Y}{\\partial f(A, B)} \\;$.\n*)\ntype Tensor with\n    member a.matmul(b) =\n        Tensor.Op\n            { new BinaryOp(\u0022matmul\u0022) with\n                member _.fRaw(a,b) = a.MatMulTT(b)\n                member _.ad_dfda(a,ad,b,f) = ad.matmul(b)\n                member _.bd_dfdb(a,b,bd,f) = a.matmul(bd)\n                member _.fd_dfda(a,b,f,fd) = fd.matmul(b.transpose())\n                member _.fd_dfdb(a,b,f,fd) = a.transpose().matmul(fd)\n            }\n            (a,b)"},{"uri":"https://diffsharp.github.io/nested-derivatives.html","title":"nested-derivatives","content":""}]